<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[OneV's Den]]></title>
  <link href="http://onevcat.com/atom.xml" rel="self"/>
  <link href="http://onevcat.com/"/>
  <updated>2013-08-01T21:56:07+09:00</updated>
  <id>http://onevcat.com/</id>
  <author>
    <name><![CDATA[onevcat]]></name>
    <email><![CDATA[onev@onevcat.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[猫都能学会的Unity3D Shader入门指南（一）]]></title>
    <link href="http://onevcat.com/2013/07/shader-tutorial-1/"/>
    <updated>2013-07-23T23:14:00+09:00</updated>
    <id>http://onevcat.com/2013/07/shader-tutorial-1</id>
    <content type="html"><![CDATA[<p><img src="http://img.onevcat.com/2013/shader-tutorial-banner.jpg" alt="Unity Shader教程" /></p>

<h2>动机</h2>

<p>自己使用Unity3D也有一段时间了，但是很多时候是流于表面，更多地是把这个引擎简单地用作脚本控制，而对更深入一些的层次几乎没有了解。虽然说Unity引擎设计的初衷就是创建简单的不需要开发者操心的谁都能用的3D引擎，但是只是肤浅的使用，可能是无法达到随心所欲的境地的，因此，这种状况必须改变！从哪里开始呢，貌似有句话叫做会写Shader的都是高手，于是，想大概看看从Shader开始能不能使自己到达的层次能再深入一些吧，再于是，有了这个系列（希望我能坚持写完它，虽然应该会拖个半年左右）。</p>

<p>Unity3D的所有渲染工作都离不开着色器（Shader），如果你和我一样最近开始对Shader编程比较感兴趣的话，可能你和我有着同样的困惑：如何开始？Unity3D提供了一些Shader的手册和文档（比如<a href="http://docs.unity3d.com/Documentation/Manual/Shaders.html">这里</a>，<a href="http://docs.unity3d.com/Documentation/Components/Built-inShaderGuide.html">这里</a>和<a href="http://docs.unity3d.com/Documentation/Components/SL-Reference.html">这里</a>），但是一来内容比较分散，二来学习阶梯稍微陡峭了些。这对于像我这样之前完全没有接触过有关内容的新人来说是相当不友好的。国内外虽然也有一些Shader的介绍和心得，但是也同样存在内容分散的问题，很多教程前一章就只介绍了基本概念，接下来马上就搬出一个超复杂的例子，对于很多基本的用法并没有解释。也许对于Shader熟练使用的开发者来说是没有问题，但是我相信像我这样的入门者也并不在少数。在多方寻觅无果后，我觉得有必要写一份教程，来以一个入门者的角度介绍一些Shader开发的基本步骤。其实与其说是教程，倒不如说是一份自我总结，希望能够帮到有需要的人。</p>

<p>所以，本“教程”的对象是</p>

<ul>
<li>总的来说是新接触Shader开发的人：也许你知道什么是Shader，也会使用别人的Shader，但是仅限于知道一些基本的内建Shader名字，从来没有打开它们查看其源码。</li>
<li>想要更多了解Shader和有需求要进行Shader开发的开发者，但是之前并没有Shader开发的经验。</li>
</ul>


<p>当然，因为我本身在Shader开发方面也是一个不折不扣的大菜鸟，本文很多内容也只是在自己的理解加上一些可能不太靠谱的求证和总结。本文中的示例应该会有更好的方式来实现，因此您是高手并且恰巧路过的话，如果有好的方式来实现某些内容，恳请您不吝留下评论，我会对本文进行不断更新和维护。</p>

<!--more-->


<h2>一些基本概念</h2>

<h3>Shader和Material</h3>

<p>如果是进行3D游戏开发的话，想必您对着两个词不会陌生。Shader（着色器）实际上就是一小段程序，它负责将输入的Mesh（网格）以指定的方式和输入的贴图或者颜色等组合作用，然后输出。绘图单元可以依据这个输出来将图像绘制到屏幕上。输入的贴图或者颜色等，加上对应的Shader，以及对Shader的特定的参数设置，将这些内容（Shader及输入参数）打包存储在一起，得到的就是一个Material（材质）。之后，我们便可以将材质赋予合适的renderer（渲染器）来进行渲染（输出）了。</p>

<p>所以说Shader并没有什么特别神奇的，它只是一段规定好输入（颜色，贴图等）和输出（渲染器能够读懂的点和颜色的对应关系）的程序。而Shader开发者要做的就是根据输入，进行计算变换，产生输出而已。</p>

<p>Shader大体上可以分为两类，简单来说</p>

<ul>
<li>表面着色器（Surface Shader） - 为你做了大部分的工作，只需要简单的技巧即可实现很多不错的效果。类比卡片机，上手以后不太需要很多努力就能拍出不错的效果。</li>
<li>片段着色器（Fragment Shader） - 可以做的事情更多，但是也比较难写。使用片段着色器的主要目的是可以在比较低的层级上进行更复杂（或者针对目标设备更高效）的开发。</li>
</ul>


<p>因为是入门文章，所以之后的介绍将主要集中在表面着色器上。</p>

<h3>Shader程序的基本结构</h3>

<p>因为着色器代码可以说专用性非常强，因此人为地规定了它的基本结构。一个普通的着色器的结构应该是这样的：
<img src="http://img.onevcat.com/2013/shader-structure.png" alt="一段Shader程序的结构" /></p>

<p>首先是一些属性定义，用来指定这段代码将有哪些输入。接下来是一个或者多个的子着色器，在实际运行中，哪一个子着色器被使用是由运行的平台所决定的。子着色器是代码的主体，每一个子着色器中包含一个或者多个的Pass。在计算着色时，平台先选择最优先可以使用的着色器，然后依次运行其中的Pass，然后得到输出的结果。最后指定一个回滚，用来处理所有Subshader都不能运行的情况（比如目标设备实在太老，所有Subshader中都有其不支持的特性）。</p>

<p>需要提前说明的是，在实际进行表面着色器的开发时，我们将直接在Subshader这个层次上写代码，系统将把我们的代码编译成若干个合适的Pass。废话到此为止，下面让我们真正实际进入Shader的世界吧。</p>

<h2>Hello Shader</h2>

<p>百行文档不如一个实例，下面给出一段简单的Shader代码，然后根据代码来验证下上面说到的结构和阐述一些基本的Shader语法。因为本文是针对Unity3D来写Shader的，所以也使用Unity3D来演示吧。首先，新建一个Shader，可以在Project面板中找到，Create，选择Shader，然后将其命名为<code>Diffuse Texture</code>：</p>

<p><img src="http://img.onevcat.com/2013/shader-create-in-unity.png" alt="在Unity3D中新建一个Shader" /></p>

<p>随便用个文本编辑器打开刚才新建的Shader：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='glsl'><span class='line'><span class="n">Shader</span> <span class="err">&quot;</span><span class="n">Custom</span><span class="o">/</span><span class="n">Diffuse</span> <span class="n">Texture</span><span class="err">&quot;</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">Properties</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">_MainTex</span> <span class="p">(</span><span class="err">&quot;</span><span class="n">Base</span> <span class="p">(</span><span class="n">RGB</span><span class="p">)</span><span class="err">&quot;</span><span class="p">,</span> <span class="mi">2</span><span class="n">D</span><span class="p">)</span> <span class="o">=</span> <span class="err">&quot;</span><span class="n">white</span><span class="err">&quot;</span> <span class="p">{}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="n">SubShader</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">Tags</span> <span class="p">{</span> <span class="err">&quot;</span><span class="n">RenderType</span><span class="err">&quot;</span><span class="o">=</span><span class="err">&quot;</span><span class="n">Opaque</span><span class="err">&quot;</span> <span class="p">}</span>
</span><span class='line'>      <span class="n">LOD</span> <span class="mi">200</span>
</span><span class='line'>      
</span><span class='line'>      <span class="n">CGPROGRAM</span>
</span><span class='line'>      <span class="err">#</span><span class="n">pragma</span> <span class="n">surface</span> <span class="n">surf</span> <span class="n">Lambert</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">sampler2D</span> <span class="n">_MainTex</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">struct</span> <span class="n">Input</span> <span class="p">{</span>
</span><span class='line'>          <span class="n">float2</span> <span class="n">uv_MainTex</span><span class="p">;</span>
</span><span class='line'>      <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">void</span> <span class="n">surf</span> <span class="p">(</span><span class="n">Input</span> <span class="n">IN</span><span class="p">,</span> <span class="k">inout</span> <span class="n">SurfaceOutput</span> <span class="n">o</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="n">half4</span> <span class="n">c</span> <span class="o">=</span> <span class="n">tex2D</span> <span class="p">(</span><span class="n">_MainTex</span><span class="p">,</span> <span class="n">IN</span><span class="p">.</span><span class="n">uv_MainTex</span><span class="p">);</span>
</span><span class='line'>          <span class="n">o</span><span class="p">.</span><span class="n">Albedo</span> <span class="o">=</span> <span class="n">c</span><span class="p">.</span><span class="n">rgb</span><span class="p">;</span>
</span><span class='line'>          <span class="n">o</span><span class="p">.</span><span class="n">Alpha</span> <span class="o">=</span> <span class="n">c</span><span class="p">.</span><span class="n">a</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="n">ENDCG</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="n">FallBack</span> <span class="err">&quot;</span><span class="n">Diffuse</span><span class="err">&quot;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果您之前没怎么看过Shader代码的话，估计细节上会看不太懂。但是有了上面基本结构的介绍，您应该可以识别出这个Shader的构成，比如一个Properties部分，一个SubShader，以及一个FallBack。另外，第一行只是这个Shader的声明并为其指定了一个名字，比如我们的实例Shader，你可以在材质面板选择Shader时在对应的位置找到这个Shader。</p>

<p><img src="http://img.onevcat.com/2013/shader-select.png" alt="在Unity3D中找到刚才新建的Shader" /></p>

<p><strong>接下来我们讲逐句讲解这个Shader，以期明了每一个语句的意义。</strong></p>

<h3>属性</h3>

<p>在<code>Properties{}</code>中定义着色器属性，在这里定义的属性将被作为输入提供给所有的子着色器。每一条属性的定义的语法是这样的：</p>

<p><code>_Name("Display Name", type) = defaultValue[{options}]</code></p>

<ul>
<li>_Name - 属性的名字，简单说就是变量名，在之后整个Shader代码中将使用这个名字来获取该属性的内容</li>
<li>Display Name - 这个字符串将显示在Unity的材质编辑器中作为Shader的使用者可读的内容</li>
<li>type - 这个属性的类型，可能的type所表示的内容有以下几种：

<ul>
<li>Color - 一种颜色，由RGBA（红绿蓝和透明度）四个量来定义；</li>
<li>2D - 一张2的阶数大小（256，512之类）的贴图。这张贴图将在采样后被转为对应基于模型UV的每个像素的颜色，最终被显示出来；</li>
<li>Rect - 一个非2阶数大小的贴图；</li>
<li>Cube - 即Cube map texture（立方体纹理），简单说就是6张有联系的2D贴图的组合，主要用来做反射效果（比如天空盒和动态反射），也会被转换为对应点的采样；</li>
<li>Range(min, max) - 一个介于最小值和最大值之间的浮点数，一般用来当作调整Shader某些特性的参数（比如透明度渲染的截止值可以是从0至1的值等）；</li>
<li>Float - 任意一个浮点数；</li>
<li>Vector - 一个四维数；</li>
</ul>
</li>
<li>defaultValue 定义了这个属性的默认值，通过输入一个符合格式的默认值来指定对应属性的初始值（某些效果可能需要某些特定的参数值来达到需要的效果，虽然这些值可以在之后在进行调整，但是如果默认就指定为想要的值的话就省去了一个个调整的时间，方便很多）。

<ul>
<li>Color - 以0～1定义的rgba颜色，比如(1,1,1,1)；</li>
<li>2D/Rect/Cube - 对于贴图来说，默认值可以为一个代表默认tint颜色的字符串，可以是空字符串或者&#8221;white&#8221;,&#8221;black&#8221;,&#8221;gray&#8221;,&#8221;bump&#8221;中的一个</li>
<li>Float，Range - 某个指定的浮点数</li>
<li>Vector - 一个4维数，写为 (x,y,z,w)</li>
</ul>
</li>
<li>另外还有一个{option}，它只对2D，Rect或者Cube贴图有关，在写输入时我们最少要在贴图之后写一对什么都不含的空白的{}，当我们需要打开特定选项时可以把其写在这对花括号内。如果需要同时打开多个选项，可以使用空白分隔。可能的选择有ObjectLinear, EyeLinear, SphereMap, CubeReflect, CubeNormal中的一个，这些都是OpenGL中TexGen的模式，具体的留到后面有机会再说。</li>
</ul>


<p>所以，一组属性的申明看起来也许会是这个样子的</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='glsl'><span class='line'><span class="c1">//Define a color with a default value of semi-transparent blue</span>
</span><span class='line'><span class="n">_MainColor</span> <span class="p">(</span><span class="err">&quot;</span><span class="n">Main</span> <span class="n">Color</span><span class="err">&quot;</span><span class="p">,</span> <span class="n">Color</span><span class="p">)</span> <span class="o">=</span> <span class="p">(</span><span class="mo">0</span><span class="p">,</span><span class="mo">0</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mf">0.5</span><span class="p">)</span>
</span><span class='line'><span class="c1">//Define a texture with a default of white</span>
</span><span class='line'><span class="n">_Texture</span> <span class="p">(</span><span class="err">&quot;</span><span class="n">Texture</span><span class="err">&quot;</span><span class="p">,</span> <span class="mi">2</span><span class="n">D</span><span class="p">)</span> <span class="o">=</span> <span class="err">&quot;</span><span class="n">white</span><span class="err">&quot;</span> <span class="p">{}</span>
</span></code></pre></td></tr></table></div></figure>


<p>现在看懂上面那段Shader（以及其他所有Shader）的Properties部分应该不会有任何问题了。接下来就是SubShader部分了。</p>

<h3>Tags</h3>

<p>表面着色器可以被若干的标签（tags）所修饰，而硬件将通过判定这些标签来决定什么时候调用该着色器。比如我们的例子中SubShader的第一句</p>

<p><code>Tags { "RenderType"="Opaque" }</code></p>

<p>告诉了系统应该在渲染非透明物体时调用我们。Unity定义了一些列这样的渲染过程，与RenderType是Opaque相对应的显而易见的是<code>"RenderType" = "Transparent"</code>，表示渲染含有透明效果的物体时调用。在这里Tags其实暗示了你的Shader输出的是什么，如果输出中都是非透明物体，那写在Opaque里；如果想渲染透明或者半透明的像素，那应该写在Transparent中。</p>

<p>另外比较有用的标签还有<code>"IgnoreProjector"="True"</code>（不被<a href="http://docs.unity3d.com/Documentation/Components/class-Projector.html">Projectors</a>影响），<code>"ForceNoShadowCasting"="True"</code>（从不产生阴影）以及<code>"Queue"="xxx"</code>（指定渲染顺序队列）。这里想要着重说一下的是Queue这个标签，如果你使用Unity做过一些透明和不透明物体的混合的话，很可能已经遇到过不透明物体无法呈现在透明物体之后的情况。这种情况很可能是由于Shader的渲染顺序不正确导致的。Queue指定了物体的渲染顺序，预定义的Queue有：</p>

<ul>
<li>Background - 最早被调用的渲染，用来渲染天空盒或者背景</li>
<li>Geometry - 这是默认值，用来渲染非透明物体（普通情况下，场景中的绝大多数物体应该是非透明的）</li>
<li>AlphaTest - 用来渲染经过<a href="http://docs.unity3d.com/Documentation/Components/SL-AlphaTest.html">Alpha Test</a>的像素，单独为AlphaTest设定一个Queue是出于对效率的考虑</li>
<li>Transparent - 以从后往前的顺序渲染透明物体</li>
<li>Overlay - 用来渲染叠加的效果，是渲染的最后阶段（比如镜头光晕等特效）</li>
</ul>


<p>这些预定义的值本质上是一组定义整数，Background = 1000， Geometry = 2000, AlphaTest = 2450， Transparent = 3000，最后Overlay = 4000。在我们实际设置Queue值时，不仅能使用上面的几个预定义值，我们也可以指定自己的Queue值，写成类似这样：<code>"Queue"="Transparent+100"</code>，表示一个在Transparent之后100的Queue上进行调用。通过调整Queue值，我们可以确保某些物体一定在另一些物体之前或者之后渲染，这个技巧有时候很有用处。</p>

<h3>LOD</h3>

<p>LOD很简单，它是Level of Detail的缩写，在这里例子里我们指定了其为200（其实这是Unity的内建Diffuse着色器的设定值）。这个数值决定了我们能用什么样的Shader。在Unity的Quality Settings中我们可以设定允许的最大LOD，当设定的LOD小于SubShader所指定的LOD时，这个SubShader将不可用。Unity内建Shader定义了一组LOD的数值，我们在实现自己的Shader的时候可以将其作为参考来设定自己的LOD数值，这样在之后调整根据设备图形性能来调整画质时可以进行比较精确的控制。</p>

<ul>
<li>VertexLit及其系列 = 100</li>
<li>Decal, Reflective VertexLit = 150</li>
<li>Diffuse = 200</li>
<li>Diffuse Detail, Reflective Bumped Unlit, Reflective Bumped VertexLit = 250</li>
<li>Bumped, Specular = 300</li>
<li>Bumped Specular = 400</li>
<li>Parallax = 500</li>
<li>Parallax Specular = 600</li>
</ul>


<h3>Shader本体</h3>

<p>前面杂项说完了，终于可以开始看看最主要的部分了，也就是将输入转变为输出的代码部分。为了方便看，请容许我把上面的SubShader的主题部分抄写一遍</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='glsl'><span class='line'><span class="n">CGPROGRAM</span>
</span><span class='line'><span class="cp">#pragma surface surf Lambert</span>
</span><span class='line'>
</span><span class='line'><span class="k">sampler2D</span> <span class="n">_MainTex</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">struct</span> <span class="n">Input</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">float2</span> <span class="n">uv_MainTex</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">void</span> <span class="n">surf</span> <span class="p">(</span><span class="n">Input</span> <span class="n">IN</span><span class="p">,</span> <span class="k">inout</span> <span class="n">SurfaceOutput</span> <span class="n">o</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">half4</span> <span class="n">c</span> <span class="o">=</span> <span class="n">tex2D</span> <span class="p">(</span><span class="n">_MainTex</span><span class="p">,</span> <span class="n">IN</span><span class="p">.</span><span class="n">uv_MainTex</span><span class="p">);</span>
</span><span class='line'>  <span class="n">o</span><span class="p">.</span><span class="n">Albedo</span> <span class="o">=</span> <span class="n">c</span><span class="p">.</span><span class="n">rgb</span><span class="p">;</span>
</span><span class='line'>  <span class="n">o</span><span class="p">.</span><span class="n">Alpha</span> <span class="o">=</span> <span class="n">c</span><span class="p">.</span><span class="n">a</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="n">ENDCG</span>
</span></code></pre></td></tr></table></div></figure>


<p>还是逐行来看，首先是CGPROGRAM。这是一个开始标记，表明从这里开始是一段CG程序（我们在写Unity的Shader时用的是Cg/HLSL语言）。最后一行的ENDCG与CGPROGRAM是对应的，表明CG程序到此结束。</p>

<p>接下来是是一个编译指令：<code>#pragma surface surf Lambert</code>，它声明了我们要写一个表面Shader，并指定了光照模型。它的写法是这样的</p>

<p><code>#pragma surface surfaceFunction lightModel [optionalparams]</code></p>

<ul>
<li>surface - 声明的是一个表面着色器</li>
<li>surfaceFunction - 着色器代码的方法的名字</li>
<li>lightModel - 使用的光照模型。</li>
</ul>


<p>所以在我们的例子中，我们声明了一个表面着色器，实际的代码在surf函数中（在下面能找到该函数），使用Lambert（也就是普通的diffuse）作为光照模型。</p>

<p>接下来一句<code>sampler2D _MainTex;</code>，sampler2D是个啥？其实在CG中，sampler2D就是和texture所绑定的一个数据容器接口。等等..这个说法还是太复杂了，简单理解的话，所谓加载以后的texture（贴图）说白了不过是一块内存存储的，使用了RGB（也许还有A）通道，且每个通道8bits的数据。而具体地想知道像素与坐标的对应关系，以及获取这些数据，我们总不能一次一次去自己计算内存地址或者偏移，因此可以通过sampler2D来对贴图进行操作。更简单地理解，sampler2D就是GLSL中的2D贴图的类型，相应的，还有sampler1D，sampler3D，samplerCube等等格式。</p>

<p>解释通了sampler2D是什么之后，还需要解释下为什么在这里需要一句对<code>_MainTex</code>的声明，之前我们不是已经在<code>Properties</code>里声明过它是贴图了么。答案是我们用来实例的这个shader其实是由两个相对独立的块组成的，外层的属性声明，回滚等等是Unity可以直接使用和编译的ShaderLab；而现在我们是在<code>CGPROGRAM...ENDCG</code>这样一个代码块中，这是一段CG程序。对于这段CG程序，要想访问在<code>Properties</code>中所定义的变量的话，<strong>必须使用和之前变量相同的名字进行声明</strong>。于是其实<code>sampler2D _MainTex;</code>做的事情就是再次声明并链接了_MainTex，使得接下来的CG程序能够使用这个变量。</p>

<p>终于可以继续了。接下来是一个struct结构体。相信大家对于结构体已经很熟悉了，我们先跳过之，直接看下面的的surf函数。上面的#pragma段已经指出了我们的着色器代码的方法的名字叫做surf，那没跑儿了，就是这段代码是我们的着色器的工作核心。我们已经说过不止一次，着色器就是给定了输入，然后给出输出进行着色的代码。CG规定了声明为表面着色器的方法（就是我们这里的surf）的参数类型和名字，因此我们没有权利决定surf的输入输出参数的类型，只能按照规定写。这个规定就是第一个参数是一个Input结构，第二个参数是一个inout的SurfaceOutput结构。</p>

<p>它们分别是什么呢？Input其实是需要我们去定义的结构，这给我们提供了一个机会，可以把所需要参与计算的数据都放到这个Input结构中，传入surf函数使用；SurfaceOutput是已经定义好了里面类型输出结构，但是一开始的时候内容暂时是空白的，我们需要向里面填写输出，这样就可以完成着色了。先仔细看看INPUT吧，现在可以跳回来看上面定义的INPUT结构体了：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='glsl'><span class='line'><span class="k">struct</span> <span class="n">Input</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">float2</span> <span class="n">uv_MainTex</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>作为输入的结构体必须命名为Input，这个结构体中定义了一个float2的变量…你没看错我也没打错，就是float2，表示浮点数的float后面紧跟一个数字2，这又是什么意思呢？其实没什么魔法，float和vec都可以在之后加入一个2到4的数字，来表示被打包在一起的2到4个同类型数。比如下面的这些定义：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='glsl'><span class='line'><span class="c1">//Define a 2d vector variable</span>
</span><span class='line'><span class="k">vec2</span> <span class="n">coordinate</span><span class="p">;</span>
</span><span class='line'><span class="c1">//Define a color variable</span>
</span><span class='line'><span class="n">float4</span> <span class="n">color</span><span class="p">;</span>
</span><span class='line'><span class="c1">//Multiply out a color</span>
</span><span class='line'><span class="n">float3</span> <span class="n">multipliedColor</span> <span class="o">=</span> <span class="n">color</span><span class="p">.</span><span class="n">rgb</span> <span class="o">*</span> <span class="n">coordinate</span><span class="p">.</span><span class="n">x</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>在访问这些值时，我们即可以只使用名称来获得整组值，也可以使用下标的方式（比如.xyzw，.rgba或它们的部分比如.x等等）来获得某个值。在这个例子里，我们声明了一个叫做<code>uv_MainTex</code>的包含两个浮点数的变量。</p>

<p>如果你对3D开发稍有耳闻的话，一定不会对uv这两个字母感到陌生。UV mapping的作用是将一个2D贴图上的点按照一定规则映射到3D模型上，是3D渲染中最常见的一种顶点处理手段。在CG程序中，我们有这样的约定，在一个贴图变量（在我们例子中是<code>_MainTex</code>）之前加上uv两个字母，就代表提取它的uv值（其实就是两个代表贴图上点的二维坐标 ）。我们之后就可以在surf程序中直接通过访问uv_MainTex来取得这张贴图当前需要计算的点的坐标值了。</p>

<p>如果你坚持看到这里了，那要恭喜你，因为离最后成功读完一个Shader只有一步之遥。我们回到surf函数，它的两有参数，第一个是Input，我们已经明白了：在计算输出时Shader会多次调用surf函数，每次给入一个贴图上的点坐标，来计算输出。第二个参数是一个可写的SurfaceOutput，SurfaceOutput是预定义的输出结构，我们的surf函数的目标就是根据输入把这个输出结构填上。SurfaceOutput结构体的定义如下</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='glsl'><span class='line'><span class="k">struct</span> <span class="n">SurfaceOutput</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">half3</span> <span class="n">Albedo</span><span class="p">;</span>     <span class="c1">//像素的颜色</span>
</span><span class='line'>    <span class="n">half3</span> <span class="n">Normal</span><span class="p">;</span>     <span class="c1">//像素的法向值</span>
</span><span class='line'>    <span class="n">half3</span> <span class="n">Emission</span><span class="p">;</span>   <span class="c1">//像素的发散颜色</span>
</span><span class='line'>    <span class="k">half</span> <span class="n">Specular</span><span class="p">;</span>    <span class="c1">//像素的镜面高光</span>
</span><span class='line'>    <span class="k">half</span> <span class="n">Gloss</span><span class="p">;</span>       <span class="c1">//像素的发光强度</span>
</span><span class='line'>    <span class="k">half</span> <span class="n">Alpha</span><span class="p">;</span>       <span class="c1">//像素的透明度</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>这里的half和我们常见float与double类似，都表示浮点数，只不过精度不一样。也许你很熟悉单精度浮点数（float或者single）和双精度浮点数（double），这里的half指的是半精度浮点数，精度最低，运算性能相对比高精度浮点数高一些，因此被大量使用。</p>

<p>在例子中，我们做的事情非常简单：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='glsl'><span class='line'><span class="n">half4</span> <span class="n">c</span> <span class="o">=</span> <span class="n">tex2D</span> <span class="p">(</span><span class="n">_MainTex</span><span class="p">,</span> <span class="n">IN</span><span class="p">.</span><span class="n">uv_MainTex</span><span class="p">);</span>
</span><span class='line'><span class="n">o</span><span class="p">.</span><span class="n">Albedo</span> <span class="o">=</span> <span class="n">c</span><span class="p">.</span><span class="n">rgb</span><span class="p">;</span>
</span><span class='line'><span class="n">o</span><span class="p">.</span><span class="n">Alpha</span> <span class="o">=</span> <span class="n">c</span><span class="p">.</span><span class="n">a</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>这里用到了一个<code>tex2d</code>函数，这是CG程序中用来在一张贴图中对一个点进行采样的方法，返回一个float4。这里对_MainTex在输入点上进行了采样，并将其颜色的rbg值赋予了输出的像素颜色，将a值赋予透明度。于是，着色器就明白了应当怎样工作：即找到贴图上对应的uv点，直接使用颜色信息来进行着色，over。</p>

<h2>接下来&#8230;</h2>

<p>我想现在你已经能读懂一些最简单的Shader了，接下来我推荐的是参考Unity的<a href="http://docs.unity3d.com/Documentation/Components/SL-SurfaceShaderExamples.html">Surface Shader Examples</a>多接触一些各种各样的基本Shader。在这篇教程的基础上，配合一些google的工作，完全看懂这个shader示例页面应该不成问题。如果能做到无压力看懂，那说明你已经有良好的基础可以前进到Shader的更深的层次了（也许等不到我的下一篇教程就可以自己开始动手写些效果了）；如果暂时还是有困难，那也没有关系，Shader学习绝对是一个渐进的过程，因为有很多约定和常用技巧，多积累和实践自然会进步并掌握。</p>

<p>在接下来的教程里，打算通过介绍一些实际例子以及从基础开始实际逐步动手实现一个复杂一点的例子，让我们能看到shader在真正使用中的威力。我希望能尽快写完这个系列，但是无奈时间确实有限，所以我也不知道什么时候能出炉&#8230;写好的时候我会更改这段内容并指向新的文章。您要是担心错过的话，也可以使用<a href="http://eepurl.com/wNSkj">邮件订阅</a>或者<a href="http://onevcat.com/atom.xml">订阅本站的rss</a>(虽然Google Reader已经关了- -)。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[近期做的两三事]]></title>
    <link href="http://onevcat.com/2013/07/what-i-did-recently/"/>
    <updated>2013-07-21T10:47:00+09:00</updated>
    <id>http://onevcat.com/2013/07/what-i-did-recently</id>
    <content type="html"><![CDATA[<p>夏日炎炎，无心睡眠。</p>

<p>虽然已经有一段时间没有更新博客了，但是我确实是一直在努力干活儿的。这一个月以来大部分视线都在WWDC上，也写了几篇博文介绍个人觉得iOS7中需要深入挖掘和研究的API。但是因为NDA加上现在人在国外的缘故，还是不太好肆无忌惮地发出来。等到iOS7和Xcode5的NDA结束的时候（大概是9月中旬吧），我会一并把写的WWDC2013的笔记发出来，到时候还要请大家多多捧场。</p>

<p>另外在工作之外，也自己做了一些小项目，基本都是一些个人兴趣所致。虽然不值一提，但是还是想写下来主要作为记录。另外如果恰好能帮助到两三个同仁的话，那是最好不过。</p>

<h3>一个Xcode插件，VVDocumenter</h3>

<p>虽然ObjC代码因为其可读性极强，而不太需要时常查阅文档，但是其实对于大多数人（包括我自己）来说，可能为方法或变量取一个好名字并不是那么简单的事情。这时候可能就需要文档或者注释来帮助之后的开发者（包括大家自己）尽快熟悉和方便修改。但是用Xcode写文档是一件让人很头疼的事情，没有像VS之类的成熟IDE的方便的方法，一直以来都是依靠像Snippet这样的东西，然后自己辛苦填写大量已有的内容。</p>

<p>之前看到一个用<a href="http://blog.chukong-inc.com/index.php/2012/05/16/xcode4_fast_doxygen/">Ruby+系统服务来生成注释的方案</a>，但是每次要自己去选还要按快捷键，总觉得是很麻烦的事情。借鉴其他平台IDE一般都是采用三个斜杠（<code>///</code>）来生成文档注释的方法，所以也为Xcode写了一个类似的。用法很简单，在要写文档的代码上面连打三个斜杠，就能自动提取参数等生成规范的Javadoc格式文档注释。<strong>VVDocumenter</strong>整个项目MIT开源，并且扔在github上了，有兴趣的童鞋可以<a href="https://github.com/onevcat/VVDocumenter-Xcode">在这里</a>找到，欢迎大家加星fork以及给我发pull request来改善这个插件。</p>

<p><img src="https://raw.github.com/onevcat/VVDocumenter-Xcode/master/ScreenShot.gif" alt="VVDocumenter演示" /></p>

<h3>一个Unity插件，UniRate</h3>

<p>做了一个叫<strong>UniRate</strong>的Unity插件，可以完全解决Unity移动端游戏请求用户评价的需求。对于一款应用/游戏来说，一般都会在你使用若干次/天之后弹一个邀请你评价的窗口，你可以选择是否到AppStore/Android Market进行评价或者稍后提醒。分别在iOS或者Android中实现这样的功能可以说是小菜一碟，但是Unity里现在暂时没有很好的方案。很可能你会需要花不少时间来实现一个类似功能，又或者要是你对native plugin这方面不太熟悉的话，可能就比较头疼了。</p>

<p>现在可以用UniRate来解决，添加的方法很简单，导入资源包，将里面的UniRateManager拖拽到scene中，就可以了..是的..没有第三步，这时候你已经有一个会监测用户使用并在安装3天并且使用10次后弹出一个提示评价的框，用户可以选择评价并跳转到相应页面了。如果你想做更多细节的调整和控制，可以参看这里的<a href="https://github.com/onevcat/UniRate/wiki/UniRate-Manual">用户手册</a>和<a href="http://unirate.onevcat.com/reference/class_uni_rate.html">在线文档</a>。</p>

<p><img src="http://img.onevcat.com/2013/UniRate.jpg" alt="UniRate" /></p>

<p>如果你感兴趣并且希望支持一下的话，UniRate现在可以在Unity Asset Store购买，<a href="https://www.assetstore.unity3d.com/#/content/10116">传送门在这里</a>。</p>

<h3>Oculus VR Rift</h3>

<p>如果你不知道Oculus的话，这里有张我的近照可以帮助你了解。</p>

<p><img src="http://img.onevcat.com/2013/oculus-me.png" alt="我的Oculus Rift" /></p>

<p>其实就是一个虚拟现实用的眼镜，可以直接在眼前塞满屏幕的设备。之前也有索尼之类的厂家出过类似的眼镜，但是Oculus最大的特点是全屏无黑边，可以说提供了和以往完全不同的沉浸式游戏体验。难能可贵的是，在此同时还能做到价格厚道（坊间传闻今后希望能做到本体免费）。</p>

<p>回到主题，自从体验过Oculus VR Rift以后，我就相信这会是游戏的未来和方向。于是之前就下了订单预定了开发者版本，今天总算是到货。Oculus对于我来说最大的优点是支持Unity3D，所以自己可以用它来做一些好玩儿的东西，算是门槛比较低。相信之后会有一段时间来学习适配Oculus的Unity开发，并且每天沉浸在创造自娱自乐的虚拟现实之中，希望这段时光能成为自己之后美好的回忆。我在之后也会找机会在博客里分享一些关于Unity和Oculus集成，以及开发Oculus适配的游戏的一些经验和方法。</p>

<p><strong>如果有可能的话，真希望自己能够做一款好玩的Oculus的游戏，或者找到一个做Oculus游戏的企业，去创造这个未来，改变世界。</strong></p>

<h3>XUPorter更新</h3>

<p><a href="https://github.com/onevcat/XUPorter">XUPorter</a>最早是写出来自己用的。因为每次从Unity build工程出来的时候，在Xcode里把各种依赖库拖来拖去简直是一件泯灭人性的事情。两年多前刚开始Unity的时候没有post build script这种东西，于是每次都要花上五到十分钟来配置Xcode的工程，时间一长就直接忘了需要依赖哪些文件和框架才能编译通过。后来有个post build脚本，但是每次写起来也很麻烦。XUPorter利用Unity3.5新加入的<code>PostProcessBuild</code>来根据配置修改Xcode工程文件，具体的介绍可以<a href="http://onevcat.com/2012/12/xuporter/">看这里</a>。之前就是往Github上一扔而已，很高兴的是，有一些项目开始使用XUPorter做管理了，也有热心人在Github上帮助维护这个项目。于是最近对其进行了一些更新，添加了第三方库的添加等一些功能。</p>

<p>如果有需要的朋友可以了解一下并使用，可以节省不少时间。如果觉得好，也欢迎帮助推荐和支持，让更多人知道并受益。最简单的方法就是在<a href="https://github.com/onevcat/XUPorter">项目的Github页面</a>加个星星～ :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[开发者所需要知道的iOS7 SDK新特性]]></title>
    <link href="http://onevcat.com/2013/06/developer-should-know-about-ios7/"/>
    <updated>2013-06-11T07:43:00+09:00</updated>
    <id>http://onevcat.com/2013/06/developer-should-know-about-ios7</id>
    <content type="html"><![CDATA[<p><img src="http://img.onevcat.com/2013/ios-7-logo.png" alt="iOS 7" /></p>

<p>春风又绿加州岸，物是人非又一年。WWDC 2013 keynote落下帷幕，新的iOS开发旅程也由此开启。在iOS7界面重大变革的背后，开发者们需要知道的又有哪些呢。同去年一样，我会先简单纵览地介绍iOS7中我个人认为开发者需要着重关注和学习的内容，之后再陆续对自己感兴趣章节进行探索。计划继承类似<a href="http://onevcat.com/2012/06/%E5%BC%80%E5%8F%91%E8%80%85%E6%89%80%E9%9C%80%E8%A6%81%E7%9F%A5%E9%81%93%E7%9A%84ios6-sdk%E6%96%B0%E7%89%B9%E6%80%A7/">WWDC2012的笔记</a>的形式，希望对国内开发者有所帮助。</p>

<p>相关笔记整理如下：（为了避免不必要的麻烦，所有笔记暂时就不在blog上公开全文发布了，先作为自己的笔记进行记录备份。只给出链接，之后NDA解除后再一并公开发吧..不过本站从源代码开始都是架在github上的..所以..嗯不多说了..）</p>

<ul>
<li>总览 <a href="http://onevcat.com/2013/06/developer-should-know-about-ios7/">开发者所需要知道的iOS7 SDK新特性</a></li>
<li>工具 <a href="http://onevcat.com/">WWDC2013笔记 Xcode5和ObjC新特性</a> http://onevcat.com/2013/06/new-in-xcode5-and-objc/</li>
<li>UIKit动力学 <a href="http://onevcat.com/">WWDC2013笔记 UIKit力学模型入门</a> http://onevcat.com/2013/06/uikit-dynamics-started/</li>
<li>SpriteKit入门 <a href="http://onevcat.com/">WWDC2013笔记 SpriteKit快速入门和新时代iOS游戏开发指南</a> http://onevcat.com/2013/06/sprite-kit-start/</li>
</ul>


<!--
---

### UI相关
#### 全新UI设计
iOS7最大的变化莫过于UI设计，也许你会说UI设计“这是设计师大大们应该关注的事情，不关开发者的事，我们只需要替换图片就行了”。那你就错了。UI的变化必然带来使用习惯和方式的转变，如何运用iOS7的UI，如何是自己的应用更切合新的系统，都是需要考虑的事情。另外值得注意的是，使用iOS7 SDK（现在只有Xcode5预览版提供）打包的应用在iOS7上运行时将会自动使用iOS7的新界面，所以原有应用可能需要对新界面进行重大调整。具体的iOS7中所使用的UI元素的人际交互界面文档，可以从[这里](https://developer.apple.com/library/prerelease/ios/design/index.html#//apple_ref/doc/uid/TP40013289)找到（应该是需要开发者账号才能看）。

简单总结来说，以现在上手体验看来新的UI变化改进有如下几点：

* 状态栏，导航栏和应用实际展示内容不再界限：系统自带的应用都不再区分状态栏和navigation bar，而是用统一的颜色力求简洁。这也算是一种趋势。
* BarItem的按钮全部文字化：这点做的相当坚决，所有的导航和工具条按钮都取消了拟物化，原来的文字（比如“Edit”，“Done”之类）改为了简单的文字，原来的图标（比如新建或者删除）也做了简化。
* 程序打开加入了动画：从主界面到图标所在位置的一个放大，同时显示应用的载入界面。

自己实验了几个现有的AppStore应用在iOS7上的运行情况：

* [Pomodoro Do](https://itunes.apple.com/app/id533469911?mt=8)： 这是我自己开发的应用，运行正常，但是因为不是iOS7 SDK打包，所以在UI上使用了之前系统的，问题是导航栏Tint颜色丢失，导致很难看，需要尽快更新。
* Facebook：因为使用了图片自定义导航栏，而没有直接使用系统提供的材质，所以没什么问题。
* 面包旅行：直接Crash，无法打开，原因未知。



这次UI大改可以说是一次对敏捷开发的检验，原来的应用（特别是拟物化用得比较重的应用）虽然也能运行，但是很多UI自定义的地方需要更改不说，还容易让用户产生一种“来到了另一个世界”的感觉，同时可以看到也有部分应用无法运行。而对于苹果的封闭系统和只升不降的特性，开发者以及其应用必须要尽快适应这个新系统，这对于迭代快速，还在继续维护的应用来说会是一个机会。相信谁先能适应新的UI，谁就将在iOS7上占到先机。

#### UIKit的力学模型（UIKit Dynamics）
新增了`UIDynamicItem`委托，用来为UIView制定力学模型行为，当然其他任何对象都能通过实现这组接口来定义动力学行为，只不过在UIKit中可能应用最多。所谓动力学行为，是指将现实世界的我们常见的力学行为或者特性引入到UI中，比如重力等。通过实现UIDynamicItem，UIKit现在支持如下行为：

* UIAttachmentBehavior 连接两个实现了UIDynamicItem的物体（以下简称动力物体），一个物体移动时，另一个跟随移动
* UICollisionBehavior 指定边界，使两个动力物体可以进行碰撞
* UIGravityBehavior 顾名思义，为动力物体增加重力模拟
* UIPushBehavior 为动力物体施加持续的力
* UISnapBehavior 为动力物体指定一个附着点，想象一下类似挂一幅画在图钉上的感觉

如果有开发游戏的童鞋可能会觉得这些很多都是做游戏时候的需求，一种box2d之类的2D物理引擎的既视感跃然而出。没错的亲，动态UI，加上之后要介绍的Sprite Kit，极大的扩展了使用UIKit进行游戏开发的可能性。另外要注意UIDynamicItem不仅适用于UIKit，任何对象都可以实现接口来获得动态物体的一些特性，所以说用来做一些3D的或者其他奇怪有趣的事情也不是没有可能。如果觉得Cocos2D+box2d这样的组合使用起来不方便的话，现在动态UIKit+SpriteKit给出了新的选择。

### 游戏方面

iOS7 SDK极大加强了直接使用iOS SDK制作和分发游戏的体验，最主要的是引入了专门的游戏制作框架。

#### Sprite Kit Framework
这是个人认为iOS7 SDK最大的亮点，也是最重要的部分，iOS SDK终于有自己的精灵系统了。Sprite Kit Framework使用硬件加速的动画系统来表现2D和2.5D的游戏，它提供了制作游戏所需要的大部分的工具，包括图像渲染，动画系统，声音播放以及图像模拟的物理引擎。可以说这个框架是iOS SDK自带了一个较完备的2D游戏引擎，力图让开发者专注于更高层的实现和内容。和大多数游戏引擎一样，Sprite Kit内的内容都按照场景（Scene）来分开组织，一个场景可以包括贴图对象，视频，形状，粒子效果甚至是CoreImage滤镜等等。相对于现有的2D引擎来说，由于Sprite Kit是在系统层级进行的优化，渲染时间等都由框架决定，因此应该会有比较高的效率。

另外，Xcode还提供了创建粒子系统和贴图Atlas的工具。使用Xcode来管理粒子效果和贴图atlas，可以迅速在Sprite Kit中反应出来。

#### Game Controller Framework
为Made-for-iPhone/iPod/iPad (MFi) game controller设计的硬件的对应的框架，可以让用户用来连接和控制专门的游戏硬件。参考WWDC 2013开场视频中开始的赛车演示。现在想到的是，也许这货不仅可以用于游戏…或者苹果之后会扩展其应用，因为使用普及率很高的iPhone作为物联网的入口，似乎会是很有前途的事情。

#### GameCenter改进
GameCenter一直是苹果的败笔...虽然每年都在改进，但是一直没看到大的起色。今年也不例外，都是些小改动，不提也罢。

### 多任务强化

* 经常需要下载新内容的应用现在可以通过设置`UIBackgroundModes`为`fetch`来实现后台下载内容了，需要在AppDelegate里实现`setMinimumBackgroundFetchInterval:`以及`application:performFetchWithCompletionHandler: `来处理完成的下载，这个为后台运行代码提供了又一种选择。不过考虑到Apple如果继续严格审核的话，可能只有杂志报刊类应用能够取得这个权限吧。另外需要注意开发者仅只能指定一个最小间隔，最后下没下估计就得看系统娘的心情了。
* 同样是后台下载，以前只能推送提醒用户进入应用下载，现在可以接到推送并在后台下载。UIBackgroundModes设为remote-notification，并实现`application:didReceiveRemoteNotification:fetchCompletionHandler:`

为后台下载，开发者必须使用一个新的类`NSURLSession`，其实就是在NSURLConnection上加了个后台处理，使用类似，API十分简单，不再赘述。

### AirDrop
这个是iOS7的重头新功能，用户可以用它来分享照片，文档，链接，或者其他数据给附近的设备。但是不需要特别的实现，被集成在了标准的UIActivityViewController里，并没有单独的API提供。数据的话，可以通过实现UIActivityItemSource接口后进行发送。大概苹果也不愿意看到超出他们控制的文件分享功能吧，毕竟这和iOS设计的初衷不一样。如果你不使用UIActivityViewController的话，可能是无法在应用里实装AirDrop功能了。

### 地图
Apple在继续在地图应用上的探索，MapKit的改进也乏善可陈。我一直相信地图类应用的瓶颈一定在于数据，但是对于数据源的建立并不是一年两年能够完成的。Google在这一块凭借自己的搜索引擎有着得天独厚的优势，苹果还差的很远很远。看看有哪些新东西吧：

* MKMapCamera，可以将一个MKMapCamera对象添加到地图上，在指明位置，角度和方向后将呈现3D的样子…大概可以想象成一个数字版的Google街景..
* MKDirections 获取Apple提供的基于方向的路径，然后可以用来将路径绘制在自己的应用中。这可能对一些小的地图服务提供商产生冲击，但是还是那句话，地图是一个数据的世界，在拥有完备数据之前，Apple不是Google的对手。这个状况至少会持续好几年（也有可能是永远）。
* MKGeodesicPolyline 创建一个随地球曲率的线，并附加到地图上，完成一些视觉效果。
* MKMapSnapshotter 使用其拍摄基于地图的照片，也许各类签到类应用会用到
* 改变了overlay物件的渲染方式

### Inter-App Audio 应用间的音频
AudioUnit框架中加入了在同一台设备不同应用之间发送MIDI指令和传送音频的能力。比如在一个应用中使用AudioUnit录音，然后在另一个应用中打开以处理等。在音源应用中声明一个AURemoteIO实例来标为Inter-App可用，在目标应用中使用新的发现接口来发现并获取音频。
想法很好，也算是在应用内共享迈出了一步，不过我对现在使用AudioUnit这样的低层级框架的应用数量表示不乐观。也许今后会有一些为更高层级设计的共享API提供给开发者使用。毕竟要从AudioUnit开始处理音频对于大多数开发者来说并不是一件很容易的事情。

### 点对点连接 Peer-to-Peer Connectivity
可以看成是AirDrop不能直接使用的补偿，代价是需要自己实现。MultipeerConnectivity框架可以用来发现和连接附近的设备，并传输数据，而这一切并不需要有网络连接。可以看到Apple逐渐在文件共享方面一步步放开限制，但是当然所有这些都还是被限制在sandbox里的。

### Store Kit Framework
Store Kit在内购方面采用了新的订单系统，这将可以实现对订单的本机验证。这是一次对应内购破解和有可能验证失败导致内购失败的更新，苹果希望藉此减少内购的实现流程，减少出错，同时遏制内购破解泛滥。前者可能没有问题，但是后者的话，因为objc的动态特性，决定了只要有越狱存在，内购破解也是早晚的事情。不过这一点确实方便了没有能力架设验证服务器的小开发者，这方面来说还是很好的。

### 最后
当然还有一些其他小改动，包括MessageUI里添加了附件按钮，Xcode开始支持模块了等等。完整的iOS7新特性列表可以在[这里](https://developer.apple.com/library/prerelease/ios/releasenotes/General/WhatsNewIniOS/Articles/iOS7.html#//apple_ref/doc/uid/TP40013162-SW1)找到（暂时应该也需要开发者账号）。最后一个好消息是，苹果放慢了废弃API的速度，这个版本并没有特别重要的API被标为Deprecated，Cheers。
-->

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[谈谈Objective-C的警告]]></title>
    <link href="http://onevcat.com/2013/05/talk-about-warning/"/>
    <updated>2013-05-24T09:52:00+09:00</updated>
    <id>http://onevcat.com/2013/05/talk-about-warning</id>
    <content type="html"><![CDATA[<blockquote><p>一个有节操的程序员会在乎自己的代码的警告，就像在乎饭碗边上有只死蟑螂那样。——<a href="http://weibo.com/onevcat">@onevcat</a></p></blockquote>

<h3>重视编译警告</h3>

<p>现在编译器有时候会很吵，而编译器给出的警告对开发者来说是很有用的信息。警告不会阻止继续编译和链接，也不会导致程序不能运行，但是很多时候编译器会先你一步发现问题所在，对于Objective-C来说特别如此。<a href="http://clang.llvm.org/">Clang</a>不仅对于明显的错误能够提出警告（比如某方法或者接口未实现），也能对很多潜在可能的问题做出提示（比如方法已经废弃或者有问题的转换），而这些问题在很多时候都可能成为潜在的致命错误，必须加以重视。</p>

<p>像Ruby或者PHP这样的动态语言没有所谓的编译警告，而C#或者Java这类语言的警告很多都是不得不照顾的废弃方法什么的，很多开发者已经习惯于忽略警告进行开发。OC由于现在由苹果负责维护，Clang的LLVM也同时是苹果在做，可以说从语言到编译器到SDK全局都在掌握之中，因此做OC开发时的警告往往比其他语言的警告更有参考价值。打开尽可能多的警告提示，并且在程序开发中尽量避免生成警告，对于构建一个健壮高效的程序来说，是必须的。</p>

<h3>在Xcode中开启额外警告提示</h3>

<p>Xcode的工程模板已经为我们设置开启了一些默认和常用的警告提示，这些默认设置为了兼容一些上年头的项目，并没有打开很多，仅是指对最危险和最常见的部分进行了警告。这对于一个新项目来说这是不够用的（至少对我来说是不够用的），在无数前辈大牛的教导下，首先要做的事情就是打开尽可能多的警告提示。</p>

<!-- more -->


<p>最简单的方法是通过UI来打开警告。在Xcode中，Build Setting选项里为我们预留了一些打开警告的开关，找到并直接勾选相应的选项就可以打开警告。大部分时间里选项本身已经足够能描述警告的作用和产生警告的时机，如果不是很明白的话，在右侧的Quick Help面板里有更详细的说明。对于OC开发来说特有的警告都在<code>Apple LLVM compiler 4.2 - Warnings - Objective C</code>一栏中，不管您是不是决定打开它们，都是值得花时间看一看加以了解的，因为它们都是写OC程序时最应该避免的情况。另外几个<code>Apple LLVM compiler 4.2 - Warnings - …</code>(All languages和C++)也包含了大量的选项，以方便控制警告产生。</p>

<p><img src="http://img.onevcat.com/2013/xcode-warning.png" alt="Xcode设置中的警告选项" /></p>

<p>当然在UI里一个一个点击激活警告虽然简单，但每次都这样来一回是一种一点也不有趣的做法，特别是在你已经了解它们的内容并决定打开它们的时候。在编译选项中加入合适的flag能够打开或者关闭警告：在Build Setting中的Other C Flags里添加形似<code>-W...</code>的编译标识。你可以在其中填写任意多的<code>-W...</code>以开关某些警告，比如，填写为<code>-Wall -Wno-unused-variable</code>即可打开“全部”警告（其实并不是全部，只是一大部分严重警告而已），但是不启用“未使用变量”的警告。使用<code>-W...</code>的形式，而不是在UI上勾选的一大好处是，在编译器版本更新时，新加入的警告如果包含在<code>-Wall</code>中的话，不需要对工程做任何修改，新的警告即可以生效。这样立即可以察觉到同一个工程由于编译器版本更新时可能带来的隐患。另外一个更重要的原因是..Xcode的UI并没有提供所有的警告 =_=||..</p>

<p>刚才提到的，需要注意的是，<code>-Wall</code>的名字虽然是all，但是这真的只是一个迷惑人的词语，实际上<code>-Wall</code>涵盖的仅只是所有警告中的一个子集。在<a href="http://programmers.stackexchange.com/questions/122608/clang-warning-flags-for-objective-c-development/124574#124574">StackExchange</a>上有一个在Google工作的Clang开发者进行的回答，其中解释了有一些重要的警告组：</p>

<ul>
<li>-Wall 并<strong>不是</strong>所有警告。这一个警告组开启的是编译器开发者对于“你所写的代码中有问题”这一命题有着很高的自信的那些警告。要是在这一组设定下你的代码出现了警告，那基本上就是你的代码真的存在严重问题了。但是同时，并不是说打开Wall就万事大吉了，因为Wall所针对的仅仅只是经典代码库中的为数不多的问题，因此有一些致命的警告并不能被其捕捉到。但是不论如何，因为Wall的警告提供的都是可信度和优先级很高的警告，所以为所有项目（至少是所有新项目）打开这组警告，应该成为一种良好的习惯。</li>
<li>-Wextra 如其所名，<code>-Wextra</code>组提供“额外的”警告。这个组和<code>-Wall</code>组几乎一样有用，但是有些情况下对于代码相对过于严苛。一个很常见的例子是，<code>-Wextra</code>中包含了<code>-Wsign-compare</code>，这个警告标识会开启比较时候对signed和unsigned的类型检查，当比较符两边一边是signed一边是unsigned时，产生警告。其实很多代码并没有特别在意这样的比较，而且绝大多数时候，比较signed和unsigned也是没有太大问题的（当然不排除会有致命错误出现的情况）。需要注意，<code>-Wextra</code>和<code>-Wall</code>是相互独立的两个警告组，虽然里面打开的警告标识有个别是重复的，但是两组并没有包含的关系。想要同时使用的话必须在Other C Flags中都加上</li>
<li>-Weverything 这个是真正的所有警告。但是一般开发者不会选择使用这个标识，因为它包含了那些还正在开发中的可能尚存bug的警告提示。这个标识一般是编译器开发者用来调试时使用的，如果你想在自己的项目里开启的话，警告一定会爆棚导致你想开始撞墙..</li>
</ul>


<p><img src="http://img.onevcat.com/2013/weverything.png" alt="-Wall和-Wextra下0警告的工程，在-Weverything下的表现，可以用惨不忍睹来形容" /></p>

<p>关于某个组开启了哪些警告的说明，在GCC的手册中有<a href="http://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html">一个参考</a>。虽然苹果现在用的都是LLVM了，但是这部分内容应该是继承了GCC的设定。</p>

<h3>控制警告，局部加入或关闭</h3>

<p>Clang提供了我们自己加入警告或者暂时关闭警告的办法。</p>

<p>强制加入一个警告：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">//Generate a warning</span>
</span><span class='line'><span class="cp">#pragma message &quot;Warning 1&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//Another way to generate a warning</span>
</span><span class='line'><span class="cp">#warning &quot;Warning 2&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>两种强制警告的方法在视觉效果上结果是一样的，但是警告类型略有不同，一个是<code>-W#pragma-messages</code>，另一个是<code>-W#warnings</code>。对于第二种写法，把warning换成error，可以强制使编译失败。比如在发布一些需要API Key之类的类库时，可以使用这个方法来提示别的开发者别忘了输入必要的信息。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">//Generate an error to fail the build.</span>
</span><span class='line'><span class="cp">#error &quot;Something wrong&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>对于关闭某个警告，如果需要全局关闭的话，直接在Other C Flags里写<code>-Wno-...</code>就行了，比如<code>-Wextra -Wno-sign-compare</code>就是一个常见的组合。如果相对某几个文件开启或禁用警告，在Build Phases的Compile Source相应的文件中加入对应的编译标识即可。如果只是想在某几行关闭某个警告的话，可以通过临时改变诊断编译标记来抑制指定类型的警告，具体如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="cp">#pragma clang diagnostic push</span>
</span><span class='line'><span class="cp">#pragma clang diagnostic ignored &quot;-Wunused-variable&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">a</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#pragma clang diagnostic pop</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果a之后没有被使用，也不会出未使用变量的警告了。对于想要抑制的警告类型的标识名，可以在build产生该警告后的build log中看到。Xcode中的话，快捷键Cmd+7然后点击最近的build log中，进入详细信息中就能看到了。</p>

<p><img src="http://img.onevcat.com/2013/warning-detail.png" alt="警告的详细信息，可以找到标识符" /></p>

<h3>我应该开启哪些警告提示</h3>

<p>个人喜好（代码洁癖）不同，会有不同的需求。我的建议是对于所有项目，特别是新开的项目，首先开启<code>-Wall</code>和<code>-Wextra</code>，然后在此基础上构建项目并且避免一切警告。如果在开发过程中遇到了某些确实无法解决或者确信自己的做法是正确的话（其实这种情况，你的做法一般即使不是错误的，也会是不那么正确的），可以有选择性地关闭某些警告。一般来说，关闭的警告项目不应该超过一只手能数出来的数字，否则一定哪儿出问题了..</p>

<h3>是否要让警告等于错误</h3>

<p>一种很常见的做法和代码洁癖是将警告标识为错误，从而中断编译过程。这让开发者不得不去修复这些警告，从而保持代码干净整洁。在Xcode中，可以通过勾选相应的Treat Warnings as Errors来开启，或者加入<code>-Werror</code>标识。我个人来说不喜欢使用这个设定，因为它总是打断开发流程。很多时候并不可能把代码全写完再编译调试，相反地，我更喜欢写一点就编译运行一下看看结果，这样在中间debug编译的时候会出现警告也不足为奇。另外，如果做TDD开发时，也可能会有大量正常的警告出现，如果有警告就不让编译的话，开发效率可能会打折扣。一个比较好的做法是只在Release Build时将警告视为错误，因为Xcode中是可以为Debug和Release分别指定标识的，所以这很容易做到。</p>

<p>另外也可以只把某些警告当作错误，<code>-Werror=...</code>即可，同样地，也可以在<code>-Werror</code>被激活时使用<code>-Wno-error=...</code>来使某些警告不成为错误。结合使用这些编译标识可以达到很好的控制。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS中使用blend改变图片颜色]]></title>
    <link href="http://onevcat.com/2013/04/using-blending-in-ios/"/>
    <updated>2013-04-29T16:30:00+09:00</updated>
    <id>http://onevcat.com/2013/04/using-blending-in-ios</id>
    <content type="html"><![CDATA[<p><img src="http://img.onevcat.com/2013/blend_title.png" alt="使用Blend处理图片颜色" /></p>

<p>最近对<code>Core Animation</code>和<code>Core Graphics</code>的内容东西比较感兴趣，自己之前也在这块相对薄弱，趁此机会也想补习一下这块的内容，所以之后几篇可能都会是对CA和CG学习的记录的文章。</p>

<p>在应用里一个很常见的需求是主题变换：同样的图标，同样的素材，但是需要按照用户喜爱变为不同的颜色。在iOS5和6的SDK里部分标准控件引入了<code>tintColor</code>，来满足个性化界面的需求，但是Apple在这方面还远远做的不够。一是现在用默认控件根本难以做出界面优秀的应用，二是<code>tintColor</code>所覆盖的并不够全面，在很多情况下开发者都无法使用其来完成个性化定义。解决办法是什么？最简单当然是拜托设计师大大出图，想要蓝色主题？那好，开PS盖个蓝色图层出一套蓝色的UI；又想加粉色UI，那好，再出一套粉色的图然后导入Xcode。代码上的话根据颜色需求使用image-blue或者image-pink这样的名字来加载图片。</p>

<p>如果有一丁点重构的意识，就会知道这不是一个很好的解决方案。工程中存在大量的冗余和重复（就算你要狡辩这些图片颜色不同不算重复，你也会在内心里知道这种狡辩是多么无力），这是非常致命的。想象一下如果你有10套主题界面，先不论应用的体积会膨胀到多少，光是想做一点修改就会痛苦万分，比如希望改一下某个按钮的形状，很好，设计师大大请重复地修改10遍，并出10套UI，然后一系列的重命名，文件移动和导入…一场灾难。</p>

<p>当然有其他办法，因为说白了就是tint不同的颜色到图片上而已，如果我们能实现改变UIImage的颜色，那我们就只需要一套UI，然后用代码来改变UI的颜色就可以了，生活有木有一下光明起来呀。嗯，让我们先从一张图片开始吧～下面是一张带有alpha通道的图片，原始颜色是纯的灰色（当然什么颜色都可以，只不过我这个人现在暂时比较喜欢灰色而已）。</p>

<!-- more -->


<p><img src="http://img.onevcat.com/2013/blend_origin.png" alt="要处理的原图" /></p>

<p>我们将用blending给这张图片加上另一个纯色作为tint，并保持原来的alpha通道。用Core Graphics来做的话，大概的想法很直接：</p>

<ol>
<li>创建一个上下文用以画新的图片</li>
<li>将新的tintColor设置为填充颜色</li>
<li>将原图片画在创建的上下文中，并用新的填充色着色（注意保持alpha通道）</li>
<li>从当前上下文中取得图片并返回</li>
</ol>


<p>最麻烦的部分可能就是保持alpha通道了。<a href="https://developer.apple.com/library/ios/#documentation/UIKit/Reference/UIImage_Class/Reference/Reference.html">UIImage的文档</a>中提供了使用blend绘图的方法<code>drawInRect:blendMode:alpha:</code>，<code>rect</code>和<code>alpha</code>都没什么问题，但是<code>blendMode</code>是个啥玩意儿啊…继续看文档，关于<a href="https://developer.apple.com/library/ios/#documentation/GraphicsImaging/Reference/CGContext/Reference/reference.html#//apple_ref/doc/c_ref/CGBlendMode"><code>CGBlendMode</code>的文档</a>，里面有一大堆看不懂的枚举值，比如这样：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>kCGBlendModeDestinationOver
</span><span class='line'>R = S*(1 - Da) + D
</span><span class='line'>Available in iOS 2.0 and later.
</span><span class='line'>Declared in CGContext.h.</span></code></pre></td></tr></table></div></figure>


<p>完全不懂..直接看之后的Discussion部分：</p>

<blockquote><p>The blend mode constants introduced in OS X v10.5 represent the Porter-Duff blend modes. The symbols in the equations for these blend modes are:<br/>
R is the premultiplied result<br/>
S is the source color, and includes alpha<br/>
D is the destination color, and includes alpha<br/>
Ra, Sa, and Da are the alpha components of R, S, and D</p></blockquote>

<p>原来如此，R表示结果，S表示包含alpha的原色，D表示包含alpha的目标色，Ra，Sa和Da分别是三个的alpha。明白了这些以后，就可以开始寻找我们所需要的blend模式了。相信你可以和我一样，很快找到这个模式：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>kCGBlendModeDestinationIn
</span><span class='line'>R = D*Sa
</span><span class='line'>Available in iOS 2.0 and later.
</span><span class='line'>Declared in CGContext.h.</span></code></pre></td></tr></table></div></figure>


<p>结果 = 目标色和原色透明度的加成，看起来正式所需要的。啦啦啦，还等什么呢，开始动手实现看看对不对吧～</p>

<p>为了以后使用方便，当然是祭出Category，先创建一个UIImage的类别：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">//  UIImage+Tint.h</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#import &lt;UIKit/UIKit.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@interface</span> <span class="nc">UIImage</span> <span class="nl">(Tint)</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="n">UIImage</span> <span class="o">*</span><span class="p">)</span> <span class="nf">imageWithTintColor:</span><span class="p">(</span><span class="n">UIColor</span> <span class="o">*</span><span class="p">)</span><span class="nv">tintColor</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p>暂时先这样，当然我们也可以创建一个类方法直接完成从bundle读取图片然后加tintColor，但是很多时候并不如上面一个实例方法方便（比如想要从非bundle的地方获取图片），这个问题之后再说。那么就按照之前设想的步骤来实现吧：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">//  UIImage+Tint.m</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#import &quot;UIImage+Tint.h&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@implementation</span> <span class="nc">UIImage</span> <span class="nl">(Tint)</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="n">UIImage</span> <span class="o">*</span><span class="p">)</span> <span class="nf">imageWithTintColor:</span><span class="p">(</span><span class="n">UIColor</span> <span class="o">*</span><span class="p">)</span><span class="nv">tintColor</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="c1">//We want to keep alpha, set opaque to NO; Use 0.0f for scale to use the scale factor of the device’s main screen.</span>
</span><span class='line'>    <span class="n">UIGraphicsBeginImageContextWithOptions</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">size</span><span class="p">,</span> <span class="n">NO</span><span class="p">,</span> <span class="mf">0.0f</span><span class="p">);</span>
</span><span class='line'>    <span class="p">[</span><span class="n">tintColor</span> <span class="n">setFill</span><span class="p">];</span>
</span><span class='line'>    <span class="n">CGRect</span> <span class="n">bounds</span> <span class="o">=</span> <span class="n">CGRectMake</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">width</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">height</span><span class="p">);</span>
</span><span class='line'>    <span class="n">UIRectFill</span><span class="p">(</span><span class="n">bounds</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//Draw the tinted image in context</span>
</span><span class='line'>    <span class="p">[</span><span class="n">self</span> <span class="nl">drawInRect:</span><span class="n">bounds</span> <span class="nl">blendMode:</span><span class="n">kCGBlendModeDestinationIn</span> <span class="nl">alpha:</span><span class="mf">1.0f</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">UIImage</span> <span class="o">*</span><span class="n">tintedImage</span> <span class="o">=</span> <span class="n">UIGraphicsGetImageFromCurrentImageContext</span><span class="p">();</span>
</span><span class='line'>    <span class="n">UIGraphicsEndImageContext</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">tintedImage</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p>简单明了，没有任何难点。测试之：<code>[[UIImage imageNamed:@"image"] imageWithTintColor:[UIColor orangeColor]];</code>，得到的结果为：</p>

<p><img src="http://img.onevcat.com/2013/blend_1.png" alt="使用kCGBlendModeDestinationIn模式的结果" /></p>

<p>嗯&#8230;怎么说呢，虽然tintColor的颜色是变了，但是总觉得怪怪的。仔细对比一下就会发现，原来灰色图里星星和周围的灰度渐变到了橙色的图里好像都消失了：星星整个变成了橙色，周围的一圈漂亮的光晕也没有了，这是神马情况啊…这种图能交差的话那算见鬼了，会被设计和产品打死的吧。对于无渐变的纯色图的图来说直接用上面的方法是没问题的，但是现在除了Metro的大色块以外哪里无灰度渐变的设计啊…检查一下使用的blend，<code>R = D * Sa</code>，恍然大悟，我们虽然保留了原色的透明度，但是却把它的所有的灰度信息弄丢了。怎么办？继续刨<code>CGBlendMode</code>的文档吧，那么多blend模式应该总有我们需要的。功夫不负有心人，<code>kCGBlendModeOverlay</code>一副嗷嗷待选的样子：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">kCGBlendModeOverlay</span>
</span><span class='line'><span class="n">Either</span> <span class="n">multiplies</span> <span class="n">or</span> <span class="n">screens</span> <span class="n">the</span> <span class="n">source</span> <span class="n">image</span> <span class="n">samples</span> <span class="n">with</span> <span class="n">the</span> <span class="n">background</span> <span class="n">image</span> <span class="n">samples</span><span class="p">,</span> <span class="n">depending</span> <span class="n">on</span> <span class="n">the</span> <span class="n">background</span> <span class="n">color</span><span class="p">.</span> <span class="n">The</span> <span class="n">result</span> <span class="n">is</span> <span class="n">to</span> <span class="n">overlay</span> <span class="n">the</span> <span class="n">existing</span> <span class="n">image</span> <span class="n">samples</span> <span class="k">while</span> <span class="n">preserving</span> <span class="n">the</span> <span class="n">highlights</span> <span class="n">and</span> <span class="n">shadows</span> <span class="n">of</span> <span class="n">the</span> <span class="n">background</span><span class="p">.</span> <span class="n">The</span> <span class="n">background</span> <span class="n">color</span> <span class="n">mixes</span> <span class="n">with</span> <span class="n">the</span> <span class="n">source</span> <span class="n">image</span> <span class="n">to</span> <span class="n">reflect</span> <span class="n">the</span> <span class="n">lightness</span> <span class="n">or</span> <span class="n">darkness</span> <span class="n">of</span> <span class="n">the</span> <span class="n">background</span><span class="p">.</span>
</span><span class='line'><span class="n">Available</span> <span class="k">in</span> <span class="n">iOS</span> <span class="mf">2.0</span> <span class="n">and</span> <span class="n">later</span><span class="p">.</span>
</span><span class='line'><span class="n">Declared</span> <span class="k">in</span> <span class="n">CGContext</span><span class="p">.</span><span class="n">h</span><span class="p">.</span>
</span></code></pre></td></tr></table></div></figure>


<p>kCGBlendModeOverlay可以保持背景色的明暗，也就是灰度信息，听起来正是我们需要的。加入到声明中，并且添加相应的实现( 顺便重构一下原来的代码 :) )：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">//  UIImage+Tint.h</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#import &lt;UIKit/UIKit.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@interface</span> <span class="nc">UIImage</span> <span class="nl">(Tint)</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="n">UIImage</span> <span class="o">*</span><span class="p">)</span> <span class="nf">imageWithTintColor:</span><span class="p">(</span><span class="n">UIColor</span> <span class="o">*</span><span class="p">)</span><span class="nv">tintColor</span><span class="p">;</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="n">UIImage</span> <span class="o">*</span><span class="p">)</span> <span class="nf">imageWithGradientTintColor:</span><span class="p">(</span><span class="n">UIColor</span> <span class="o">*</span><span class="p">)</span><span class="nv">tintColor</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">//  UIImage+Tint.m</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#import &quot;UIImage+Tint.h&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@implementation</span> <span class="nc">UIImage</span> <span class="nl">(Tint)</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="n">UIImage</span> <span class="o">*</span><span class="p">)</span> <span class="nf">imageWithTintColor:</span><span class="p">(</span><span class="n">UIColor</span> <span class="o">*</span><span class="p">)</span><span class="nv">tintColor</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">[</span><span class="n">self</span> <span class="nl">imageWithTintColor:</span><span class="n">tintColor</span> <span class="nl">blendMode:</span><span class="n">kCGBlendModeDestinationIn</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="n">UIImage</span> <span class="o">*</span><span class="p">)</span> <span class="nf">imageWithGradientTintColor:</span><span class="p">(</span><span class="n">UIColor</span> <span class="o">*</span><span class="p">)</span><span class="nv">tintColor</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">[</span><span class="n">self</span> <span class="nl">imageWithTintColor:</span><span class="n">tintColor</span> <span class="nl">blendMode:</span><span class="n">kCGBlendModeOverlay</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="n">UIImage</span> <span class="o">*</span><span class="p">)</span> <span class="nf">imageWithTintColor:</span><span class="p">(</span><span class="n">UIColor</span> <span class="o">*</span><span class="p">)</span><span class="nv">tintColor</span> <span class="nf">blendMode:</span><span class="p">(</span><span class="n">CGBlendMode</span><span class="p">)</span><span class="nv">blendMode</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="c1">//We want to keep alpha, set opaque to NO; Use 0.0f for scale to use the scale factor of the device’s main screen.</span>
</span><span class='line'>    <span class="n">UIGraphicsBeginImageContextWithOptions</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">size</span><span class="p">,</span> <span class="n">NO</span><span class="p">,</span> <span class="mf">0.0f</span><span class="p">);</span>
</span><span class='line'>    <span class="p">[</span><span class="n">tintColor</span> <span class="n">setFill</span><span class="p">];</span>
</span><span class='line'>    <span class="n">CGRect</span> <span class="n">bounds</span> <span class="o">=</span> <span class="n">CGRectMake</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">width</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">height</span><span class="p">);</span>
</span><span class='line'>    <span class="n">UIRectFill</span><span class="p">(</span><span class="n">bounds</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//Draw the tinted image in context</span>
</span><span class='line'>    <span class="p">[</span><span class="n">self</span> <span class="nl">drawInRect:</span><span class="n">bounds</span> <span class="nl">blendMode:</span><span class="n">blendMode</span> <span class="nl">alpha:</span><span class="mf">1.0f</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">UIImage</span> <span class="o">*</span><span class="n">tintedImage</span> <span class="o">=</span> <span class="n">UIGraphicsGetImageFromCurrentImageContext</span><span class="p">();</span>
</span><span class='line'>    <span class="n">UIGraphicsEndImageContext</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">tintedImage</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p>完成，测试之…好吧，好尴尬，虽然颜色和周围的光这次对了，但是透明度又没了啊魂淡..一点不奇怪啊，因为<code>kCGBlendModeOverlay</code>本来就没承诺给你保留原图的透明度的说。</p>

<p><img src="http://img.onevcat.com/2013/blend_2.png" alt="使用kCGBlendModeOverlay模式的结果" /></p>

<p>那么..既然我们用<code>kCGBlendModeOverlay</code>能保留灰度信息，用<code>kCGBlendModeDestinationIn</code>能保留透明度信息，那就两个blendMode都用不就完事儿了么～尝试之，如果在blend绘图时不是<code>kCGBlendModeDestinationIn</code>模式的话，则再用<code>kCGBlendModeDestinationIn</code>画一次：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">//  UIImage+Tint.m</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#import &quot;UIImage+Tint.h&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@implementation</span> <span class="nc">UIImage</span> <span class="nl">(Tint)</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="n">UIImage</span> <span class="o">*</span><span class="p">)</span> <span class="nf">imageWithTintColor:</span><span class="p">(</span><span class="n">UIColor</span> <span class="o">*</span><span class="p">)</span><span class="nv">tintColor</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">[</span><span class="n">self</span> <span class="nl">imageWithTintColor:</span><span class="n">tintColor</span> <span class="nl">blendMode:</span><span class="n">kCGBlendModeDestinationIn</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="n">UIImage</span> <span class="o">*</span><span class="p">)</span> <span class="nf">imageWithGradientTintColor:</span><span class="p">(</span><span class="n">UIColor</span> <span class="o">*</span><span class="p">)</span><span class="nv">tintColor</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">[</span><span class="n">self</span> <span class="nl">imageWithTintColor:</span><span class="n">tintColor</span> <span class="nl">blendMode:</span><span class="n">kCGBlendModeOverlay</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="n">UIImage</span> <span class="o">*</span><span class="p">)</span> <span class="nf">imageWithTintColor:</span><span class="p">(</span><span class="n">UIColor</span> <span class="o">*</span><span class="p">)</span><span class="nv">tintColor</span> <span class="nf">blendMode:</span><span class="p">(</span><span class="n">CGBlendMode</span><span class="p">)</span><span class="nv">blendMode</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="c1">//We want to keep alpha, set opaque to NO; Use 0.0f for scale to use the scale factor of the device’s main screen.</span>
</span><span class='line'>    <span class="n">UIGraphicsBeginImageContextWithOptions</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">size</span><span class="p">,</span> <span class="n">NO</span><span class="p">,</span> <span class="mf">0.0f</span><span class="p">);</span>
</span><span class='line'>    <span class="p">[</span><span class="n">tintColor</span> <span class="n">setFill</span><span class="p">];</span>
</span><span class='line'>    <span class="n">CGRect</span> <span class="n">bounds</span> <span class="o">=</span> <span class="n">CGRectMake</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">width</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">height</span><span class="p">);</span>
</span><span class='line'>    <span class="n">UIRectFill</span><span class="p">(</span><span class="n">bounds</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//Draw the tinted image in context</span>
</span><span class='line'>    <span class="p">[</span><span class="n">self</span> <span class="nl">drawInRect:</span><span class="n">bounds</span> <span class="nl">blendMode:</span><span class="n">blendMode</span> <span class="nl">alpha:</span><span class="mf">1.0f</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">blendMode</span> <span class="o">!=</span> <span class="n">kCGBlendModeDestinationIn</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="p">[</span><span class="n">self</span> <span class="nl">drawInRect:</span><span class="n">bounds</span> <span class="nl">blendMode:</span><span class="n">kCGBlendModeDestinationIn</span> <span class="nl">alpha:</span><span class="mf">1.0f</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">UIImage</span> <span class="o">*</span><span class="n">tintedImage</span> <span class="o">=</span> <span class="n">UIGraphicsGetImageFromCurrentImageContext</span><span class="p">();</span>
</span><span class='line'>    <span class="n">UIGraphicsEndImageContext</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">tintedImage</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p>结果如下：</p>

<p><img src="http://img.onevcat.com/2013/blend_3.png" alt="使用kCGBlendModeOverlay和kCGBlendModeDestinationIn模式的结果" /></p>

<p>已经很完美了，这样的话只要在代码里设定一下颜色，我们就能够很轻易地使用同样一套UI，将其blend为需要的颜色，来实现素材的重用了。唯一需要注意的是，因为每次使用<code>UIImage+Tint</code>的方法绘图时，都使用了CG的绘制方法，这就意味着每次调用都会是用到CPU的Offscreen drawing，大量使用的话可能导致性能的问题（主要对于iPhone 3GS或之前的设备，可能同时处理大量这样的绘制调用的能力会有不足）。关于CA和CG的性能的问题，打算在之后用一篇文章来介绍一下。对于这里的<code>UIImage+Tint</code>的实现，可以写一套缓存的机制，来确保大量重复的元素只在load的时候blend一次，之后将其缓存在内存中以快速读取。当然这是一个权衡的问题，在时间和空间中做出正确的平衡和选择，也正是程序设计的乐趣所在。</p>

<p>这篇文章中作为示例的工程和UIImage+Tint可以在<a href="https://github.com/onevcat/VVImageTint">Github</a>上找到，您可以随意玩弄..我相信也会是个来研究每种blend的特性的好机会～</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[苹果应用描述中不能使用特殊字符的对应方法]]></title>
    <link href="http://onevcat.com/2013/04/itc-special-characters/"/>
    <updated>2013-04-28T18:01:00+09:00</updated>
    <id>http://onevcat.com/2013/04/itc-special-characters</id>
    <content type="html"><![CDATA[<p><img src="http://img.onevcat.com/2013/itc-special-character.png" alt="就是不让你用就是不让你用～" /></p>

<p>虽然很早Apple就说过从5月1日开始就不再允许UDID以及没有对iPhone5优化的应用上架，但是这次iTunes Connect的对于描述字符的限制还是让很多开发者措手不及。毕竟事先完全没有和大家打过招呼，Apple想要统一应用市场的风格和体验的心态可以理解，但是在开发者难得还有一点自由发挥的应用描述的地方突然作出这样的限制，确实不太厚道。相关的新闻报道可以参看<a href="http://www.cnbeta.com/articles/234799.htm">这里</a></p>

<p>但是，难道我们真的没法使用更漂亮的描述了么？答案是，有办法！解决办法就一句话，<strong>直接使用<code>字符值引用</code>来写iTC的描述就可以了～</strong></p>

<p>比如，想使用<code>★</code>这个字符，在描述中将<code>★</code>的地方都换成<code>&amp;#9733;</code>就可以了。</p>

<p>一句废话，对于字符转换，当然也有在线将特殊字符转换为字符值引用的服务：<a href="http://yasu.asuka.net/orkut/conv.html">传送门</a></p>

<p>最后，祝大家五一快乐，假期好心情～ :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[上级向的十个iOS面试问题]]></title>
    <link href="http://onevcat.com/2013/04/ios-interview/"/>
    <updated>2013-04-13T01:22:00+09:00</updated>
    <id>http://onevcat.com/2013/04/ios-interview</id>
    <content type="html"><![CDATA[<p><img src="http://img.onevcat.com/2013/welcome-to-xcode.png" alt="Welcome to Xcode" /></p>

<p>不管对于招聘和应聘来说，面试都是很重要的一个环节，特别对于开发者来说，面试中的技术问题环节不仅是企业对应聘者技能和积累的考察，也是一个开发者自我检验的好机会。对于iOS和Mac开发来说，因为本事还算比较新，企业对于这方面的开发者需求也比较大，所以面试时的要求可能并不是很高，一般能知道一些Cocoa和OC的基本知识也就认为可以了。但是对于一个希望拥有技术力基础的企业的iOS或者Mac开发来说，两到三个顶尖的熟练技术人员，带领一些还较为初级的开发者，共同完成项目应该是比较常见的构成。</p>

<p>Cocoa特别是CocoaTouch的开发，上手可以说十分容易，但是背后隐藏的细节和原理却很丰富。一方面对于基础不够熟练和清晰（比如从一个AppDelegate开始用代码构建ViewController，或者清晰地说明栈和堆之类的概念），另一方面对于更进阶的开发知之甚少（比如多线程、网络异步处理或者Core开头的各种框架等等）。这些内容十分重要，但是可能现在一般的iOS开发者或多或少都在这些问题上存在薄弱。在这里我整理了一份面向于较高层级的iOS开发者的面试题目的问题清单，列出了十个应聘Leader级别的高级Cocoa/CocoaTouch开发工程师所应该掌握和理解的技术。这份列表没有提供标准答案，因为这些问题本身就没有标准答案。随每个人对这些内容的认识的不同和理解的差异，可以有不一样的答案。但是最基本地，如果面对的是一名资深的Cocoa开发者，至少期望能得到的答案都是“接触过”，并且能结合自己的经验说个七七八八，达到互相能明白意图和方法的地步。能够在其中两三个领域有不错的见解和具体的阐述的话，那是更好。这种对于知识覆盖面和深度的考察很能真实反映出开发者的技术水平。如果清单里的很大部分内容都是完全没接触过和没听过的话，那可能距离资深Cocoa开发这样一个阶段还尚有距离了。</p>

<p>那么，面试开始。</p>

<!-- more -->


<ol>
<li>你使用过Objective-C的运行时编程（Runtime Programming）么？如果使用过，你用它做了什么？你还能记得你所使用的相关的头文件或者某些方法的名称吗？</li>
<li>你实现过多线程的Core Data么？NSPersistentStoreCoordinator，NSManagedObjectContext和NSManagedObject中的哪些需要在线程中创建或者传递？你是用什么样的策略来实现的？</li>
<li>Core开头的系列的内容。是否使用过CoreAnimation和CoreGraphics。UI框架和CA，CG框架的联系是什么？分别用CA和CG做过些什么动画或者图像上的内容。（有需要的话还可以涉及Quartz的一些内容）</li>
<li>是否使用过CoreText或者CoreImage等？如果使用过，请谈谈你使用CoreText或者CoreImage的体验。</li>
<li>NSNotification和KVO的区别和用法是什么？什么时候应该使用通知，什么时候应该使用KVO，它们的实现上有什么区别吗？如果用protocol和delegate（或者delegate的Array）来实现类似的功能可能吗？如果可能，会有什么潜在的问题？如果不能，为什么？（虽然protocol和delegate这种东西面试已经面烂了&#8230;）</li>
<li>你用过NSOperationQueue么？如果用过或者了解的话，你为什么要使用NSOperationQueue，实现了什么？请描述它和GCD的区别和类似的地方（提示：可以从两者的实现机制和适用范围来描述）。</li>
<li>既然提到GCD，那么问一下在使用GCD以及block时要注意些什么？它们两是一回事儿么？block在ARC中和传统的MRC中的行为和用法有没有什么区别，需要注意些什么？</li>
<li>您是否做过异步的网络处理和通讯方面的工作？如果有，能具体介绍一些实现策略么？</li>
<li>对于Objective-C，你认为它最大的优点和最大的不足是什么？对于不足之处，现在有没有可用的方法绕过这些不足来实现需求。如果可以的话，你有没有考虑或者实践过重新实现OC的一些功能，如果有，具体会如何做？</li>
<li>你实现过一个框架或者库以供别人使用么？如果有，请谈一谈构建框架或者库时候的经验；如果没有，请设想和设计框架的public的API，并指出大概需要如何做、需要注意一些什么方面，来使别人容易地使用你的框架。</li>
</ol>


<p>以上10个问题对于初级或者刚接触iOS的开发者来说，肯定是过于难了。想要答出全部问题，可能需要至少两到三年的Cocoa/CocoaTouch开发经验。而如果想要有所见地的回答，可能需要更长的时间和经验。这些问题对于技术的积累会是一个很好的考察，因为如果没有对这些问题中涉及的内容有过实际使用和体会的话，是很难较完整和全面回答这些问题的。同时，因为这些问题并不像ABCD的客观题有标准答案，表现的是应聘者的理解，所以提问者也必须具备必要的材料或者知识，以应对可能的讨论。</p>

<p>在为团队寻求高级别的开发工程师或者Leader类的职位时，这些问题的回答会是对应聘者技术深度和广度的一个有效的考察。同样地，如果你的团队在Cocoa/CocoaTouch上比较偏重，但是技术团队的No.1的工程师却不能很好地回答这些问题的话，可能也会是需要检讨技术层的一个信号。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[两个人一起记账吧～ Our Money]]></title>
    <link href="http://onevcat.com/2013/04/our-money-app/"/>
    <updated>2013-04-06T11:54:00+09:00</updated>
    <id>http://onevcat.com/2013/04/our-money-app</id>
    <content type="html"><![CDATA[<p><a href="https://itunes.apple.com/cn/app/our-money/id562520527?ls=1&amp;mt=8"><img src="http://img.onevcat.com/2013/ourmoney-banner.jpg" alt="image" /></a></p>

<p>Our Money是一款能够协助多人在云端记账的iOS应用，可以帮助您简单地记录和整理日常开销，您可以邀请您的朋友和家人与您一起记账，免去每日汇报总结之苦。</p>

<ul>
<li><a href="https://itunes.apple.com/cn/app/our-money/id562520527?ls=1&amp;mt=8">App Store地址</a></li>
<li><a href="http://ourmoney.onevcat.com">Our Money app的首页</a></li>
</ul>


<p>大概但凡从按月领生活费开始花钱以来，都会兴起记账的念头，至于是否能够坚持，就各凭本事了。说到自己，则是多次付诸行动，然后不了了之。从一开始记在小本本上自己用计算器加加减减，到建个Excel文档自动求和，再到手机上的记账应用，时代在进步，咱的手段也在进步，却总还觉得没有找到最合适的工具。尤其是用手机记账以来，有的软件，每次对非得给一笔开销定义出两层的分类，让我头疼不已，家庭小帐非得整成个公司帐簿，改动标签也颇为麻烦；有的软件，记录条目倒是简单，但其他诸如统计等功能却也一起被简化了。不过，最让我郁闷的是，记账总成为我一个人的事情，谁让是用我的手机在记呢。</p>

<p>现在，终于等到了一款操作简单但是功能齐全，尤其是，<strong>可以多人共同记账的应用</strong>。这款叫做Our Money 的应用，最大的亮点当然就在于“Our”。它可以实现多人一起记账，只要人手一个应用，就可以和家人一起记录家庭开销，和朋友一起整理出游费用，不同的帐本可以选择和不同的人分享，每个人都能参与，条目更新实时同步，再不用一个人负责所有的帐目。</p>

<p>好啦，废话不多说，让我们一起来体验一下这个软件吧。<a href="https://itunes.apple.com/cn/app/our-money/id562520527?ls=1&amp;mt=8">下载应用</a>并打开，用邮箱注册用户，就可以开始记账啦。请记住你的邮箱是你邀请别人或者别人邀请你共同记账的标识哦～</p>

<!-- more -->




<br>


<p><img src="http://img.onevcat.com/2013/1-ourmoney-login.png" alt="OurMoney的注册登陆界面" />
Our Money的主界面相当简洁，最上方列出列表名称，收入（预算）、支出、结余也一目了然，条目的时间、分类、备注都一目了然。那么其他其他内容被藏在哪里呢？左边一拉，当前列表的按月总计；右边一拉，列表编辑，数据统计，就是这么简单～</p>

<br>


<p><img src="http://img.onevcat.com/2013/2-ourmoney-month.png" alt="按月份统计收入和开销" /></p>

<br>


<p><img src="http://img.onevcat.com/2013/3-ourmoney-stat.png" alt="按项目和用户的统计" />
首先我们新建一个列表， 在右边的界面下拉一下，就可以新建自己的列表了。选中的列表下方能够修改列表名称或者删除，中间的邀请就是重头戏啦，输入希望一同记账的朋友的邮箱，他就可以收到邀请并加入你的列表。当邀请了朋友或家人加入列表后，列表信息中就会显示多人同为列表用户。当然，在记账时随时可以邀请新的用户加入。</p>

<br>


<p><img src="http://img.onevcat.com/2013/4-ourmoney-invite.png" alt="邀请别人加入特定列表一起记账" />
选定刚才新建的列表，回到主界面，随便记下一点东西，在同一列表中的用户将通过推送（如果允许的话）收到您更改了列表的消息。而对方打开应用时，马上就可以同步地看到您所记录的信息，这便于双方更迅速地各自完成记账，免去了回家后苦苦思索或者汇总的麻烦，确实十分方便。</p>

<br>


<p><img src="http://img.onevcat.com/2013/5-ourmoney-push.png" alt="家人或朋友记账后，立即可以收到系统提醒" /></p>

<p>记错了，找不到修改的地方怎么办？点一下，记录被选中，下面就出现了编辑或者删除的选项，还可以分享条目到社交网络，秀一下收到的礼物什么的哦～</p>

<p>在消费和记账时难免会出现没有网络的尴尬时候，这时候Our Money还能正常工作么？当然，Our Money具有完善的离线模式处理，没有网络时照常使用，当之后连上网络的时候会自动为您完成所有同步，完全不用自己操心。</p>

<br>


<p><img src="http://img.onevcat.com/2013/6-ourmoney-offline.png" alt="Our Money方便的离线模式" /></p>

<p>总的来说Our Money是一款功能强大但又简单高效的记账软件，其云端记账和共同记账的理念很符合当今多人记账的需求。从今天开始就和家人朋友用Our Money一起记账吧～</p>

<p>您可以从<a href="https://itunes.apple.com/cn/app/our-money/id562520527?ls=1&amp;mt=8">App Store中下载Our Money</a>，还可以进一步通过应用内的赠送系统将您的记账和心得分享给家人朋友。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[赴日半年的一些杂感]]></title>
    <link href="http://onevcat.com/2013/04/half-year-in-japan/"/>
    <updated>2013-04-01T23:47:00+09:00</updated>
    <id>http://onevcat.com/2013/04/half-year-in-japan</id>
    <content type="html"><![CDATA[<p><img src="http://i758.photobucket.com/albums/xx224/onevcat/OneV-s-Den/half-year-in-japan/2013-03-09125056.jpg" alt="樱花之国" /></p>

<p>来日本已经足足有半年了，在这半年里见识了许多，也经历了许多。学生生涯的结束和职场生涯的开始，在这样的转变中积极投入到新的生活中去，大概也算是自己努力的一种方式。今天到公司很早，有机会整理一下这半年的一些体会和感想吧。</p>

<h2>关于日本</h2>

<p>其实日本对于中国和中国人来说，一直是个又爱又恨的国家。爱大抵是因为日本既有着无数的中国文化元素输入，同时又有着一大堆类似ACG的输出。前者拉近了中国与日本的距离，后者让世界有了解日本的窗口。而恨，基本都来源于七十多年前的那场战争。中国人的这种仇恨其实也并非与生俱来，而日本人也确实很难理解这种仇恨，我想这大抵和两个国家国民所受到的教育和舆论的导向不无关系。说到教育和舆论，中国的洗脑教育和言论管制估计在全球知名大国中是无出其右的。包括我在内，从小接受的就是长期而持续的仇恨教育灌输，所有能接触到的历史书籍中也都是宣扬两国民族仇恨的，我想这对于国人于日本的理解上造成了很大偏差。加上当代中国走了一些弯路，导致普遍性的国民信仰丢失和是非观的扭曲，导致了这种本不该存在的误解又进一步加深。</p>

<p>相反地，在日本不管是电视新闻还是报纸，我都极少见到有针对中国的宣传。其实基本上电视新闻都很少会报道日本国外的消息。经常见到的都是本地哪个居民楼发生了火灾，或者谁家走失的猫狗被发现并寻找失主这样的消息。而唯一有的政治节目的形式一般是一大堆人坐成个圆桌讨论的形式，即使这样还是会请来不同方面的人，更像是一种讨论。比如之前说到钓鱼岛的问题，人员构成是两个主持+两个日本政界+两个中国人+一个美国人这样的组合，一群人都站在自己的利益角度吵得不亦乐乎。这在国内现在的请“砖家”出来唠叨教导大众的媒体模式下，应该是不可能出现的。</p>

<p>但是同时，日本国民对于政治的不关心远远超出了我的想象，但是却正是一个这样对政治不关心的国家，却有着整个亚洲最民主的制度，这是一个很奇怪的现象。选举前几乎每天在车站都会有议员拿个喇叭宣扬自己党派和个人的理念思想，但路人匆匆都无人理睬（我想如果有人停下来和他辩论的话他也许会很开心）；到现在选举已经尘埃落定后也每周会有不同的政治家到处演说。在中国，就算在北京，你也绝不可能看到国家财政部或者人事部的部长在做街头演说，也没有可能直面总书记或者国家主席，但是这些事情我却都在日本经历了，而且是作为一个外国人在不经意间就都经历了。中日两国在政治上的差距，还很大很大，而中国想要走的民主道路（希望如此），也还很长很长。</p>

<!-- more -->


<p>其他的来说，印象最深刻的大抵就是和传说中一样的日本人的礼貌和以“耻文化”为基础的道德理念。虽然是在礼仪之邦长大的孩子，但是却是在这里感受到了更多的礼仪。服务行业就不用多说了，就算是普通生活中也会有很多的讲究。有时候真的不得不感慨是环境造就人的行为，在一个所有人都很互相尊重（至少是表面上互相尊重）的环境下，你也不得不学会去尊重别人。同样的，当人们都互相信任的时候，你也不由地变得愿意信任别人，这是一件让人感觉很好的事情。</p>

<p><img src="http://i758.photobucket.com/albums/xx224/onevcat/OneV-s-Den/half-year-in-japan/2012-09-30121053.jpg" alt="随便一个书店里关于三国的架子，可能在中国都看不到这么多的有关书籍" /></p>

<p>另外就是日本真的是一个很喜欢读书的国家，这一点虽然不让我吃惊，但是当走在街上很容易就看到很多书店的时候还是有些赞叹的。在电子书籍和信息时代的今天，实体书可能更多的已经成为一种符号了，至少在快餐文化的中国是如此。实体书在日本的畅销，一方面是因为地铁和文库本的贡献，另一方面大概是因为日本本身文化封闭的特性吧（之后会展开说这点）。</p>

<h2>关于工作</h2>

<p><img src="http://i758.photobucket.com/albums/xx224/onevcat/OneV-s-Den/half-year-in-japan/2013-02-22085647.jpg" alt="面白法人Kayac的门牌" /></p>

<p>工作上并没有什么特别值得称道的地方，本来也是作为漫漫人生中修行的一站来到这里的，所以说更多的还是希望用心体会这边的工作的精髓，而并不是去刻意地达成某些目标。虽然日本是一个游戏制作的传统强国，但是可以感受到在当今欧美大作不断频现和日本游戏固步自封的双重作用下，日本的游戏产业正在逐渐没落。虽然在社交领域有DeNA或者GREE，在手游上有去年风光满满的Puzzle And Dragon，但是给人的印象就是这些大抵都是only for Japan的东西。日本游戏界可以说看不到和外界交流的意愿，现在的日本游戏越来越难走向世界，世界的优秀游戏也越来越难进入日本市场，这大抵还是和当今主流文化是英语文化圈的欧美文化但是日本从业人员整体英语水平并不够有一定关系吧。</p>

<p>除此之外，工作上还是很开心的。Kayac是一个很不错的公司，至少到现在我很享受在这里的工作。虽然加班是多了点，但是和最地狱的那段时间来说简直就是天堂（所以说趁着年轻过一些苦逼的日子是很有好处的，之后都会觉得比起以前不算什么）。不仅可以穿拖鞋汗衫进出公司，更可以每天面朝大海或者富士山写代码，这点比较惬意。</p>

<p>不过工作上需要特别提的，最好的地方是，可以和其他国家（不单单日本的，还有法国越南印尼什么）的程序员一起工作，这对我来说是一种非常奇妙的体验。以前很多时候认为是非常正常的事情，以及非常正常的写法，有时候却在不同文化背景下会发生了一些奇妙的变化。会发现原来每个国家的coder写出来的东西真的是会带有coder个人的文化背景和思考方法的，这是以前完全没有想到的事情。比如日本的程序员写出来的东西总是很工整，每个类的格式甚至是申明变量的顺序都很规范，但是往往却在很多地方写的很啰嗦复杂。在你完全了解他的结构之前，读这样的代码很是痛苦，无尽的跳转和条件经常让人崩溃，有时候甚至不得不佩服在如此复杂的代码下居然没有出错。而法国人的代码却完全不一样，写的结构那个飘逸那个散，还时不时带上几句法语注释，虽说配合Google Translate可以猜个大概，但还是让人哭笑不得。</p>

<p>Kayac的话据说有全日本最好的Perl程序员（或者说之一），但是很可惜我并不会也不想以Perl作为自己的开发语言，所以说基本没有交流，算是比较可惜。这边的话也有一些还算厉害的OC程序员和iOS开发者，有时候可以在网上看到一些他们的技术博客，也算不错。和其中一个在Kayac待了几年的大大玩的比较好，他居然还送了一本他写的OC的入门书给我，虽然说内容太基础对我没什么用处，但是这份情谊还是很珍贵的。</p>

<p>技术力上的话，Kayac或者是大部分日本企业（猜测）并不是具有很强的技术能力。不管是在选用框架和编码能力上大部分员工都还很入门的感觉。不过这大抵是因为重视的方面不同，我们可能更看重个人能力和解决问题的速度质量，但是他们更多的是喜欢在范式和规则之下完成任务。这样一来，制定规则的人，或者说是项目的负责人的业务能力也就直接导致了项目的质量和进度。不过正如@钟亮所说，很多时候跳出技术的层面来看这些就会豁然开朗，无非就是遵循的规则和追求目标的手段的不一致，绝大部分最终的产品不会有太多人在意其中的技术细节。</p>

<p>不过不管怎么样，技术强力还是很有好处的，一开始和同事互相不太认识的时候经常各种“被教导”和“被使唤”，后来逐渐实力被认可以后就转变成了总是“被请教”和“被提建议”。日本社会和日本人心态确实是会从骨子里尊敬强者，所以说想要立足以及赢得他们的尊重，只能迫使自己变得更强。</p>

<p>每天很快就能搞定自己的任务，但是这边整个公司或者国家的氛围就是要加班到很晚，所以自己也不好到点走人。于是就有了以前不敢想象的大把时间用于学习和提高。闲着没事儿会琢磨学一些新的语言，或者是想办法将现有知识更深入，也会有时间经常关心一些业界的最新动态，这些都会很有帮助，也希望它们最终能成为自己人生的积淀。</p>

<p>同时也在向日本人学习。不得不说一下现在在做的项目的Leader，是一个很有趣的人。年轻时候干的是潜水员，负责挖沉船探宝那种，后来体力逐渐跟不上，也考虑到相对危险，转行当了程序员。半路出家但是水平还不赖，更难能可贵的是一把年纪了却每天也还坚持学技术。从git到进阶C#再到模型和贴图入门什么的，我入职半年间，他案头的书都换了三四本。这种精神很让人佩服，也应当成为学习的榜样。</p>

<h2>关于生活</h2>

<p>关于这一点，嘛，至少可以不用待在北京吸毒气。在北京的时候因为空气的问题，经常咳嗽不舒服，每次沙尘的时候也完全不能出门。那时候雾霾还不叫雾霾，但是劣质空气不需要命名大家也心知肚明。一年中能见到蓝天的日子也屈指可数。别的不说，这边至少天蓝蓝，水蓝蓝，空气清新，多年的咳嗽到这边完全没有复发，这就比一切都强了。</p>

<p><img src="http://i758.photobucket.com/albums/xx224/onevcat/OneV-s-Den/half-year-in-japan/2012-11-04140710-2.jpg" alt="东京彩虹桥" /></p>

<p>另外不需要因为户口什么的各种看派出所的脸色。印象里在日本我所得到的微笑和尊重比在国内加起来都多——不管是来自服务行业、政府部门还是平时接触的日本人。有时候仔细想想确实，纳税人辛辛苦苦创造的价值，却很大一部分得不到有效的利用。而去和自己供养的人打交道的时候，还要遭遇种种不便和蔑视。愤愤不平倒是没有，但心却拔凉拔凉。深知自己并不是二代，靠自己改变不了现状，剩下的选择就只有逃离（XD 当然没这么夸张的凄凉，只不过用脚投票也是现在的流行趋势是不）。</p>

<p>暂时就写这么多吧，之后的生活，再慢慢体会。顺便送上一副京都的红叶。顺便提一句，本文照片都是自己拍摄的，版权所有。因此如果想要借作他用的话，还请麻烦知会一声，如果合适，会考虑给您高清版本的图片。</p>

<p><img src="http://i758.photobucket.com/albums/xx224/onevcat/OneV-s-Den/half-year-in-japan/2012-11-23150218.jpg" alt="京都御所红叶" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MGTwitterEngine中Twitter API 1.1的使用]]></title>
    <link href="http://onevcat.com/2013/03/mgtwitterengine%E4%B8%ADtwitter-api-1-1%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <updated>2013-03-24T00:00:00+09:00</updated>
    <id>http://onevcat.com/2013/03/mgtwitterengine中twitter-api-1-1的使用</id>
    <content type="html"><![CDATA[<p>在iOS5中使用Twitter framework或者在iOS6中使用Social framework来完成Twitter的集成是非常简单和轻松的，但是如果应用要针对iOS5之前的系统版本，那么就不能使用iOS提供的框架了。一个比较常见也是使用最广泛的选择是<a href="https://github.com/mattgemmell/MGTwitterEngine">MGTwitterEngine</a>，比如<a href="http://www.onevcat.com/showcase/pomodoro_do/">PomodoroDo</a>选择使用的就是该框架。</p>

<p>但是今天在对PomodoroDo作更新的时候，发现Twitter的分享无法使用了，在查阅Twitter文档说明之后，发现这是Twitter采用了新版API的原因。默认状况下MGTwitterEngine采用的是v1版的API，并且使用XML的版本进行请求，而在1.1中，将<a href="https://dev.twitter.com/docs/api/1.1/overview#JSON_support_only">只有JSON方式的API可以使用</a>。v1.0版本的API已经于2013年3月5日被完全废弃，因此想要继续使用MGTwitterEngine来适配iOS5之前的Twitter集成需求，就需要将MGTwitterEngine的请求改为JSON方式。MGTwitterEngine也考虑到了这一点，但是因为时间比较古老了，MGTwitterEngine使用了YAJL来作为JSON的Wrapper，因此还需要将YAJL集成进来。下午的时候尝试了一会儿，成功地让MGTwitterEngine用上了1.1的Twitter API，为了以防之后别人或是自己可能遇到同样的问题，将更新的方法在此留底备忘。</p>

<ol>
<li><p>导入YAJL Framework</p>

<ul>
<li>YAJL的OC实现，从<a href="https://github.com/gabriel/yajl-objc/download">该地址下载该框架</a>。(2013年3月24日的最新版本为YAJL 0.3.1 for iOS)</li>
<li>解压下载得到的zip，将解压后的YAJLiOS.framework加入项目工程</li>
<li>在Xcode的Build Setting里在Other Linker Flags中添加-ObjC和-all_load标记</li>
</ul>
</li>
<li><p>加入MGTwitterEngine的JSON相关代码</p>

<ul>
<li>从<a href="https://github.com/mattgemmell/MGTwitterEngine">MGTwitterEngine的页面</a>down下该项目。当然如果有新版或者有别的branch可以用的话更省事儿，但是鉴于MGTwitterEngine现在的活跃度来说估计可能性不大，所以还是乖乖自己更新吧。</li>
<li>解开下载的zip，用Xcode打开MGTwitterEngine.xcodeproj工程文件，将其中Twitter YAJL Parsers组下的所有文件copy到自己的项目中。</li>
</ul>
</li>
<li><p>YAJL头文件集成</p>

<ul>
<li>接下来是C和OC接口头文件的导入，从下面下载YAJL库：<a href="https://github.com/thinglabs/yajl-objc">https://github.com/thinglabs/yajl-objc</a></li>
<li>在下载得到的文件夹中，寻找并将以下h文件拷贝到自己的工程中：

<ul>
<li>yajl_common.h</li>
<li>yajl_gen.h</li>
<li>yajl_parse.h</li>
<li>NSObject+YAJL.h</li>
<li>YAJL.h</li>
<li>YAJLDocument.h</li>
<li>YAJLGen.h</li>
<li>YAJLParser.h</li>
</ul>
</li>
</ul>
</li>
<li><p>最后是在MGTwitterEngine设定为使用v1.1 API以及JSON方式请求</p></li>
</ol>


<p>在MGTwitterEngine.m中，将对应代码修改为以下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="cp">#define USE_LIBXML 0</span>
</span><span class='line'><span class="cp">#define TWITTER_DOMAIN @&quot;api.twitter.com/1.1&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>在MGbTwitader.h，启用YAJL</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="cp">#define define YAJL_AVAILABLE 1</span>
</span></code></pre></td></tr></table></div></figure>


<p>本文参考：</p>

<p><a href="https://github.com/mattgemmell/MGTwitterEngine/issues/107">MGTwitterEngine issues 107</a></p>

<p><a href="http://damienh.org/2009/06/20/setting-up-mgtwitterengine-with-yajl-106-for-iphone-development/">http://damienh.org/2009/06/20/setting-up-mgtwitterengine-with-yajl-106-for-iphone-development/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Xcode 4 插件制作入门]]></title>
    <link href="http://onevcat.com/2013/02/xcode-plugin/"/>
    <updated>2013-02-02T00:00:00+09:00</updated>
    <id>http://onevcat.com/2013/02/xcode-plugin</id>
    <content type="html"><![CDATA[<p><img src="http://www.onevcat.com/wp-content/uploads/2013/02/QQ20130202-15.png"></p>

<p>本文欢迎转载，但烦请保留此行出处信息：<a href="http://www.onevcat.com/2013/02/xcode-plugin/">http://www.onevcat.com/2013/02/xcode-plugin/</a></p>

<p>本文将介绍创建一个Xcode4插件所需要的基本步骤以及一些常用的方法。请注意为Xcode创建插件并没有任何的官方支持，因此本文所描述的方法和提供的信息可能会随Apple在Xcode上做的变化而失效。另外，由于创建插件会使用到私有API，因此Xcode插件也不可能被提交到Mac App Store上进行出售。</p>

<p>本文内容是基于Xcode 4.6（4H127）完成的，但是应该可以适用于任意的Xcode 4.X版本。VVPlugInDemo的工程文件我放到了github上，有需要的话您可以从<a href="https://github.com/onevcat/VVPluginDemo">这里下载</a>并作为参考和起始来使用。</p>

<h2>综述</h2>

<p>Xcode本身作为一个IDE来说已经可以算上优秀，但是依然会有很多缺失的功能，另外在开发中针对自己的开发需求，创建一些便利的IDE插件，必定将大为加快开发速度。由于苹果官方并不对Xcode插件提供任何技术和文档支持，因此对于大部分开发者来说可能难于上手。虽然没有官方支持，但是在Xcode中开发并使用插件是可能的，并且也是被默许的。在Xcode启动的时候，Xcode将会寻找位于~/Library/Application Support/Developer/Shared/Xcode/Plug-ins文件夹中的后缀名为.xcplugin的bundle作为插件进行加载（运行其中的可执行文件），这就可以令我们光明正大合法合理地将我们的代码注入（虽然这个词有点不好听）Xcode，并得到运行。因此，想要创建Xcode插件，<strong>我们需要创建Bundle工程并将编译的bundle放到上面所说的插件目录中去</strong>，这就是Xcode插件的原理。</p>

<p>需要特别说明的是，因为Xcode会在启动时加载你的插件，这样就相当于你的代码有机会注入Xcode。只要你的插件加载成功，那么它将和Xcode共用一个进程，也就是说当你的代码crash的时候，Xcode也会随之crash。同样的情况也可能在Xcode版本更新的时候，由于兼容性问题而出现（因为插件可能使用私有API，Apple没有义务去维护这些API的可用性）。在出现这种情况的时候，可以直接删除插件目录下的导致问题的xcplugin文件即可。</p>

<!--more-->


<h2>你的第一个插件</h2>

<p>我将通过制作一个简单的demo插件来说明一般Xcode插件的编写方法，这个插件将在Xcode的Edit菜单中加入一个叫做“What is selected”的项目，当你点击这个菜单命令的时候，将弹出一个警告框，提示你现在在编辑器中所选中的内容。我相信这个例子能包含绝大部分在插件创建中所必须的步骤和一些有用的方法。由于我自己也只是个半吊子开发者，水平十分有限，因此错误和不当之处还恳请大家轻喷多原谅，并帮助我改正。那么开始..</p>

<h3>创建Bundle工程</h3>

<p><img src="http://i758.photobucket.com/albums/xx224/onevcat/QQ20130202-1.png" alt="image" /> 创建工程，OSX，Framework &amp; Library，选择Bundle，点击Next。</p>

<p><img src="http://i758.photobucket.com/albums/xx224/onevcat/QQ20130202-2.png" alt="image" /></p>

<p>在Project信息页面中，填入插件名字，在这个例子里，就叫做DemoPlugin，Framework使用默认的Cocoa就行。另外一定记住将Use Automatic Reference Counting前的勾去掉，由于插件只能使用GC来进行内存管理，因此不需要使用ARC。</p>

<h3>工程设置</h3>

<p>插件工程有别于一般工程，需要进行一些特别的设置，以确保能正确编译插件bundle。</p>

<p><img src="http://i758.photobucket.com/albums/xx224/onevcat/QQ20130202-3.png" alt="image" /></p>

<p>首先，在编辑工程的Info.plist文件（直接编辑plist文件或者是修改TARGETS下对应target的Info都行），加入以下三个布尔值：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>XCGCReady = YES
</span><span class='line'>XCPluginHasUI = NO 
</span><span class='line'>XC4Compatible = YES</span></code></pre></td></tr></table></div></figure>


<p>这将告诉编译器工程已经使用了GC，没有另外的UI并且是Xcode4适配的，否则你的插件将不会被加载。接下来，对Bundle Setting进行一些设置：</p>

<p><img src="http://i758.photobucket.com/albums/xx224/onevcat/QQ20130202-4.png" alt="image" /></p>

<ul>
<li><p>Installation Build Products Location 设置为 ${HOME}</p>

<ul>
<li>Product的根目录</li>
</ul>
</li>
<li><p>Installation Directory 设置为</p>

<ul>
<li>/Library/Application Support/Developer/Shared/Xcode/Plug-ins</li>
<li>这里指定了插件安装的位置，这样build之后就会将插件直接扔到Plug-ins的目录了。当然不嫌麻烦的话也可以每次自己复制粘贴过去。注意这里不是绝对路径，而是基于上面的${HOME}的路径。</li>
</ul>
</li>
<li><p>Deployment Location 设置为 YES</p>

<ul>
<li>告诉Xcode不要用设置里的build location，而是用Installation Directory来确定build后放哪儿</li>
</ul>
</li>
<li><p>Wrapper extension 设置为 xcplugin</p>

<ul>
<li>把产品后缀名改为xcplugin，否则Xcode不会加载插件</li>
</ul>
</li>
</ul>


<p>如一开始说的那样，Xcode会在每次启动的时候搜索插件目录并进行加载，做如上设置的目的是每次build之后你只需要重新启动Xcode就能看到重新编译后的插件的效果，而避免了自己再去寻找Product然后copy&amp;paste的步骤。<br/>
另外，还需要自己在User-Defined里添加一个键值对：</p>

<p><img src="http://i758.photobucket.com/albums/xx224/onevcat/QQ20130202-5.png" alt="image" /></p>

<ul>
<li>GCC_ENABLE_OBJC_GC 设置为 supported</li>
</ul>


<p>至此所有配置工作完成，接下来终于可以开始实现插件了～</p>

<h3>Hello World</h3>

<p>新建一个类，取名叫做VVPluginDemo（当然只要不重，随便什么名字都是可以的），继承自NSObject（做iOS开发的童鞋请不要忘记现在是写Xcode插件，您需要通过OS X的Cocoa里的Objective-C class模版，而不要用Cocoa Touch的模版..）。打开VVPluginDemo.m，加入以下代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">+</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">pluginDidLoad:</span><span class="p">(</span><span class="n">NSBundle</span> <span class="o">*</span><span class="p">)</span><span class="nv">plugin</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;Hello World&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Build（对于OS X 10.8的SDK可能会有提示GC已经废弃的警告，不用管，Xcode本身是GC的，ARC的插件是无法load的），打开控制台（Control+空格 输入console），重新启动Xcode。应该能控制台中看到我们的插件的输出：</p>

<p><img src="http://i758.photobucket.com/albums/xx224/onevcat/QQ20130202-6.png" alt="image" /></p>

<p>太好了。有句话叫做，写出一个Hello World，就说明你已经掌握了一半…那么，剩下的一半内容，将对开发插件时可能面临的问题和一些常用的手段进行介绍。</p>

<h3>创建插件单例，监听事件</h3>

<p>继续我们的插件，还记得我们的目的么？在Xcode的Edit菜单中加入一个叫做“What is selected”的项目，当你点击这个菜单命令的时候，将弹出一个警告框，提示你现在在编辑器中所选中的内容。一般来说，我们希望插件能够在整个Xcode的生命周期中都存在（不要忘记其实用来写Cocoa的Xcode本身也是一个Cocoa程序）。最好的办法就是在+pluginDidLoad:中初始化单例，如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">+</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="nf">pluginDidLoad:</span> <span class="p">(</span><span class="n">NSBundle</span><span class="o">*</span><span class="p">)</span> <span class="n">plugin</span> <span class="p">{</span>
</span><span class='line'>  <span class="p">[</span><span class="n">self</span> <span class="n">shared</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="o">+</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span> <span class="n">shared</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">static</span> <span class="n">dispatch_once_t</span> <span class="n">once</span><span class="p">;</span>
</span><span class='line'>  <span class="k">static</span> <span class="kt">id</span> <span class="n">instance</span> <span class="o">=</span> <span class="nb">nil</span><span class="p">;</span>
</span><span class='line'>  <span class="n">dispatch_once</span><span class="p">(</span><span class="o">&amp;</span><span class="n">once</span><span class="p">,</span> <span class="o">^</span><span class="p">{</span>
</span><span class='line'>      <span class="n">instance</span> <span class="o">=</span> <span class="p">[[</span><span class="n">self</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">instance</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这样，以后我们在别的类中，就可以简单地通过[VVPluginDemo shared]来访问到插件的实例了。</p>

<p>在init中，加入一个程序启动完成的事件监听，并在程序完成启动后，在菜单栏的Edit中添加我们所需要的菜单项，这个操作最好是在Xcode完全启动以后再进行，以避免一些潜在的危险和冲突。另外，由于想要在按下按钮时显示编辑器中显示的内容，我们可能需要监听NSTextViewDidChangeSelectionNotification事件（WTF，你为什么会知道要监听什么。别着急，后面会再说，先做demo先做demo）</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nf">init</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">self</span> <span class="o">=</span> <span class="p">[</span><span class="n">super</span> <span class="n">init</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>      <span class="p">[[</span><span class="n">NSNotificationCenter</span> <span class="n">defaultCenter</span><span class="p">]</span> <span class="nl">addObserver:</span><span class="n">self</span>
</span><span class='line'>              <span class="nl">selector:</span><span class="k">@selector</span><span class="p">(</span><span class="nl">applicationDidFinishLaunching:</span><span class="p">)</span>
</span><span class='line'>                  <span class="nl">name:</span><span class="n">NSApplicationDidFinishLaunchingNotification</span>
</span><span class='line'>                <span class="nl">object:</span><span class="nb">nil</span><span class="p">];</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">self</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="nf">applicationDidFinishLaunching:</span> <span class="p">(</span><span class="n">NSNotification</span><span class="o">*</span><span class="p">)</span> <span class="n">noti</span> <span class="p">{</span>
</span><span class='line'>  <span class="p">[[</span><span class="n">NSNotificationCenter</span> <span class="n">defaultCenter</span><span class="p">]</span> <span class="nl">addObserver:</span><span class="n">self</span>
</span><span class='line'>          <span class="nl">selector:</span><span class="k">@selector</span><span class="p">(</span><span class="nl">selectionDidChange:</span><span class="p">)</span>
</span><span class='line'>              <span class="nl">name:</span><span class="n">NSTextViewDidChangeSelectionNotification</span>
</span><span class='line'>            <span class="nl">object:</span><span class="nb">nil</span><span class="p">];</span>
</span><span class='line'>  <span class="n">NSMenuItem</span> <span class="o">*</span><span class="n">editMenuItem</span> <span class="o">=</span> <span class="p">[[</span><span class="n">NSApp</span> <span class="n">mainMenu</span><span class="p">]</span> <span class="nl">itemWithTitle:</span><span class="s">@&quot;Edit&quot;</span><span class="p">];</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">editMenuItem</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="p">[[</span><span class="n">editMenuItem</span> <span class="n">submenu</span><span class="p">]</span> <span class="nl">addItem:</span><span class="p">[</span><span class="n">NSMenuItem</span> <span class="n">separatorItem</span><span class="p">]];</span>
</span><span class='line'>      <span class="n">NSMenuItem</span> <span class="o">*</span><span class="n">newMenuItem</span> <span class="o">=</span> <span class="p">[[</span><span class="n">NSMenuItem</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithTitle:</span><span class="s">@&quot;What is selected&quot;</span> <span class="nl">action:</span><span class="k">@selector</span><span class="p">(</span><span class="nl">showSelected:</span><span class="p">)</span> <span class="nl">keyEquivalent:</span><span class="s">@&quot;&quot;</span><span class="p">];</span>
</span><span class='line'>      <span class="p">[</span><span class="n">newMenuItem</span> <span class="nl">setTarget:</span><span class="n">self</span><span class="p">];</span>
</span><span class='line'>      <span class="p">[</span><span class="n">newMenuItem</span> <span class="nl">setKeyEquivalentModifierMask:</span> <span class="n">NSAlternateKeyMask</span><span class="p">];</span>
</span><span class='line'>      <span class="p">[[</span><span class="n">editMenuItem</span> <span class="n">submenu</span><span class="p">]</span> <span class="nl">addItem:</span><span class="n">newMenuItem</span><span class="p">];</span>
</span><span class='line'>      <span class="p">[</span><span class="n">newMenuItem</span> <span class="n">release</span><span class="p">];</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">-</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="nl">selectionDidChange:</span><span class="p">(</span><span class="n">NSNotification</span> <span class="o">*</span><span class="p">)</span><span class="n">noti</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">//Nothing now. Just in case of crash.   </span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">-</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="nl">showSelected:</span><span class="p">(</span><span class="n">NSNotification</span> <span class="o">*</span><span class="p">)</span><span class="n">noti</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">//Nothing now. Just in case of crash.   </span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>现在build，重启Xcode，如果一切顺利的话，你应该能看到菜单栏上的变化了：</p>

<p><img src="http://i758.photobucket.com/albums/xx224/onevcat/QQ20130202-8.png" alt="image" /></p>

<h3>完成Demo插件</h3>

<p>剩下的事情就很简单了，在接收到TextView的ChangeSelection通知后把现在选中的文本更新一下，在点击按钮时显示一个含有储存文字的对话框就行了。Let&#8217;s do it~</p>

<p>首先在.m文件中加上property声明（个人习惯，喜欢用ivar也可以）。在#import和@implementation之间加上：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">@interface</span> <span class="nc">VVPluginDemo</span><span class="p">()</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="n">nonatomic</span><span class="p">,</span><span class="n">copy</span><span class="p">)</span> <span class="n">NSString</span> <span class="o">*</span><span class="n">selectedText</span><span class="p">;</span>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p>得益于新的属性自动绑定，synthesis已经不需要写了（对此还不太了解的童鞋可以参看我的<a href="http://www.onevcat.com/2012/06/modern-objective-c/">这篇博文</a>）。然后完成- selectionDidChange:和-showSelected:如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="nf">selectionDidChange:</span><span class="p">(</span><span class="n">NSNotification</span> <span class="o">*</span><span class="p">)</span><span class="nv">noti</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">([[</span><span class="n">noti</span> <span class="n">object</span><span class="p">]</span> <span class="nl">isKindOfClass:</span><span class="p">[</span><span class="n">NSTextView</span> <span class="n">class</span><span class="p">]])</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">NSTextView</span><span class="o">*</span> <span class="n">textView</span> <span class="o">=</span> <span class="p">(</span><span class="n">NSTextView</span> <span class="o">*</span><span class="p">)[</span><span class="n">noti</span> <span class="n">object</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">NSArray</span><span class="o">*</span> <span class="n">selectedRanges</span> <span class="o">=</span> <span class="p">[</span><span class="n">textView</span> <span class="n">selectedRanges</span><span class="p">];</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">selectedRanges</span><span class="p">.</span><span class="n">count</span><span class="o">==</span><span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="k">return</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">NSRange</span> <span class="n">selectedRange</span> <span class="o">=</span> <span class="p">[[</span><span class="n">selectedRanges</span> <span class="nl">objectAtIndex:</span><span class="mi">0</span><span class="p">]</span> <span class="n">rangeValue</span><span class="p">];</span>
</span><span class='line'>      <span class="n">NSString</span><span class="o">*</span> <span class="n">text</span> <span class="o">=</span> <span class="n">textView</span><span class="p">.</span><span class="n">textStorage</span><span class="p">.</span><span class="n">string</span><span class="p">;</span>
</span><span class='line'>      <span class="n">self</span><span class="p">.</span><span class="n">selectedText</span> <span class="o">=</span> <span class="p">[</span><span class="n">text</span> <span class="nl">substringWithRange:</span><span class="n">selectedRange</span><span class="p">];</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="c1">//Hello, welcom to OneV&#39;s Den  </span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="nf">showSelected:</span><span class="p">(</span><span class="n">NSNotification</span> <span class="o">*</span><span class="p">)</span><span class="nv">noti</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">NSAlert</span> <span class="o">*</span><span class="n">alert</span> <span class="o">=</span> <span class="p">[[[</span><span class="n">NSAlert</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">]</span> <span class="n">autorelease</span><span class="p">];</span>
</span><span class='line'>  <span class="p">[</span><span class="n">alert</span> <span class="nl">setMessageText:</span> <span class="n">self</span><span class="p">.</span><span class="n">selectedText</span><span class="p">];</span>
</span><span class='line'>  <span class="p">[</span><span class="n">alert</span> <span class="n">runModal</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Build，重启Xcode，随便选中一段文本，然后点击Edit中的What is selected。OY～完成～</p>

<p><img src="http://i758.photobucket.com/albums/xx224/onevcat/QQ20130202-7.png" alt="image" /></p>

<p>至此，您应该已经掌握了基本的Xcode插件制作方法了。接下来的就是根据您的需求实践了～但是在此之前，还有一些重要的技巧和常用方法可能您会有兴趣。</p>

<h2>开发插件时有用的技巧</h2>

<p>由于没有文档指导插件开发，调试也只能用打log的方式，因此会十分艰难。掌握一些常用的技巧和方法，将会很有帮助。</p>

<h3>I Need All Notifications!</h3>

<p>一种很好的方法是监听需要的消息，并针对消息作出反应。就像demo里的NSTextViewDidChangeSelectionNotification。对于熟悉iOS或者Mac开发的童鞋来说，应该在日常开发里也接触过很多类型的Notification了，而因为插件开发没有文档，因此我们需要自己去寻找想要监听和接收的Notification。<a href="https://developer.apple.com/library/mac/#documentation/Cocoa/Reference/Foundation/Classes/NSNotificationCenter_Class/Reference/Reference.html">NSNotificationCenter文档</a>中，关于加入Observer的方法-addObserver:selector:name:object:，当给name参数赋值nil时，将可以监听到所有的notification：</p>

<blockquote><p>notificationName: The name of the notification for which to register the observer; that is, only notifications with this name are delivered to the observer. If you pass nil, the notification center doesn’t use a notification’s name to decide whether to deliver it to the observer.</p></blockquote>

<p>因此可以用它来监测所有的Notification，并从中找到自己所需要的来进行处理：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nf">init</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">self</span> <span class="o">=</span> <span class="p">[</span><span class="n">super</span> <span class="n">init</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>      <span class="p">[[</span><span class="n">NSNotificationCenter</span> <span class="n">defaultCenter</span><span class="p">]</span> <span class="nl">addObserver:</span><span class="n">self</span>
</span><span class='line'>          <span class="nl">selector:</span><span class="k">@selector</span><span class="p">(</span><span class="nl">notificationListener:</span><span class="p">)</span>
</span><span class='line'>              <span class="nl">name:</span><span class="nb">nil</span> <span class="nl">object:</span><span class="nb">nil</span><span class="p">];</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">self</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">notificationListener:</span><span class="p">(</span><span class="n">NSNotification</span> <span class="o">*</span><span class="p">)</span><span class="nv">noti</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot; Notification: %@&quot;</span><span class="p">,</span> <span class="p">[</span><span class="n">noti</span> <span class="n">name</span><span class="p">]);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>编译重启后在控制台得到的输出：</p>

<p><img src="http://i758.photobucket.com/albums/xx224/onevcat/QQ20130202-9.png" alt="image" /></p>

<p>当然如果只是打印名字的话可能帮助不大，也许你需要从noti的object或者userinfo中获得更多的信息。按条件打印，配合控制台的搜索进行寻找会是一个不错的方法。</p>

<h3>Hack私有API</h3>

<p>用OC的动态特性可以做很多事，比如在运行时替换掉某个Xcode的方法。记住Xcode本身也是Cocoa程序，本质上和我们用Xcode所开发的程序没有太大区别。因此如果可以知道Xcode在进行某些操作时候的方法的话，就可以将该方法与我们自己实现的方法进行运行时调换，从而改为执行我们自己的方法。这便是运行时的Method Swizzling（或者叫Monkey patch，管他呢），这在smalltalk类语言中是一种很有趣和方便的做法，关于这方面更详细的，我以前写过一篇关于<a href="http://www.onevcat.com/2012/04/objective-c-runtime/">OC运行时特性的文章</a>。当时提到的method swizzling方法并没有对交换的函数进行检查等工作，通用性也比较差。现在针对OC已经有比较成熟的一套方法交换机制了，其中比较有名的有<a href="https://github.com/rentzsch/jrswizzle">rentzsch的jrswizzle</a>以及<a href="http://cocoadev.com/wiki/MethodSwizzling">OC社区的MethodSwizzling实现</a>。</p>

<p>有了方法交换的办法，接下来需要寻找要交换的方法。Xcode所使用的所有库都包含在Xcode.app/Contents/的Frameworks，SharedFrameworks和OtherFrameworks三个文件夹下。其中和Xcode关系最为直接以及最为重要的是Frameworks中的IDEKit和IDEFoundation，以及SharedFrameworks中的DVTKit和DVTFoundation四个。其中DVT前缀表示Developer Toolkit，IDE和IDEFoundation中的类基本是DVT中类的子类。这四个framework将是我们在开发改变Xcode默认行为的Xcode插件时最主要要打交道的。另外如果想对IB进行注入，可能还需要用到Frameworks下的IBAutolayoutFoundation（待确定）。关于这些framework中的私有API，可以使用<a href="http://stevenygard.com/projects/class-dump/">class-dump</a>很简单地将头文件提取出来。当然，也有人为懒人们完成了这个工作，<a href="https://github.com/probablycorey/xcode-class-dump">probablycorey的xcode-class-dump</a>中有绝大部分类的头文件。</p>

<p>作为Demo，我们将简单地完成一个方法交换：在补全代码时，我们简单地输出一句log。</p>

<h4>MethodSwizzle</h4>

<p>为了交换方法，可以直接用现成的MethodSwizzle实现。MethodSwizzle可以在<a href="https://gist.github.com/4696790">这里</a>找到。将.h和.m导入插件工程即可～</p>

<h4>寻找对应API</h4>

<p>通过搜索，补全代码的功能定义在DVKit中的DVTTextCompletionController类，其中有一个方法为- (BOOL)acceptCurrentCompletion，猜测返回的布尔值是否接受当前的补全结果。由于这些都是私有API，因此需要在我们的工程中自己进行声明。在新建文件中的C and C++中选Header File，为工程加入一个Header文件，并加入一下代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">@interface</span> <span class="nc">DVTTextCompletionController</span> : <span class="nc">NSObject</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nf">acceptCurrentCompletion</span><span class="p">;</span>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后需要将DVKit.framework添加到工程中，在/Applications/Xcode.app/Contents/SharedFrameworks中找到DVTKit.framework，拷贝到任意正常能访问到的目录下，然后在插件工程的Build Phases中加入framework。嗯？你说找不到DVTKit.framework？亲，私有框架当然找不到，点击Add Other&#8230;然后去刚才copy出来的地方去找吧..</p>

<p><img src="http://i758.photobucket.com/albums/xx224/onevcat/QQ20130202-10.png" alt="image" /></p>

<p>最后便是加入方法交换了～新建一个DVTTextCompletionController的Category，命名为PluginDemo</p>

<p><img src="http://i758.photobucket.com/albums/xx224/onevcat/QQ20130202-13.png" alt="image" /></p>

<p>import之前定义的header和MethodSwizzle.h，在DVTTextCompletionController+PluginDemo.m中加入下面实现：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">+</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">load</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">MethodSwizzle</span><span class="p">(</span><span class="n">self</span><span class="p">,</span>
</span><span class='line'>                <span class="k">@selector</span><span class="p">(</span><span class="n">acceptCurrentCompletion</span><span class="p">),</span>
</span><span class='line'>                <span class="k">@selector</span><span class="p">(</span><span class="n">swizzledAcceptCurrentCompletion</span><span class="p">));</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nf">swizzledAcceptCurrentCompletion</span> <span class="p">{</span>
</span><span class='line'><span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;acceptCurrentCompletion is called by %@&quot;</span><span class="p">,</span> <span class="n">self</span><span class="p">);</span>
</span><span class='line'><span class="k">return</span> <span class="p">[</span><span class="n">self</span> <span class="n">swizzledAcceptCurrentCompletion</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>+load方法在每个NSObject类或子类被调用时都会被执行，可以用来在runtime配置当前类。这里交换了DVTTextCompletionController的acceptCurrentCompletion方法和我们自己实现的swizzledAcceptCurrentCompletion方法。在swizzledAcceptCurrentCompletion中，先打印了一句log，输出相应该方法的实例。接下来似乎是调用了自己，但是实际上swizzledAcceptCurrentCompletion的方法已经和原来的acceptCurrentCompletion交换，因此这里实际调用的将是原来的方法。那么这段代码所做的就是将Xcode想调用原来的acceptCurrentCompletion的行为，改变成了先打印一个log，之后再进行原来的acceptCurrentCompletion调用。</p>

<p>编译，重启Xcode，打开一个工程随便输入点东西，让补全出现。控制台中的输出符合我们的预期：</p>

<p><img src="http://i758.photobucket.com/albums/xx224/onevcat/QQ20130202-12.png" alt="image" /></p>

<p>太棒了，有了对私有API的注入，能做的事情大为扩展了。</p>

<h3>研究Xcode的View Hierarchy</h3>

<p>另外一种常见的插件行为是修改某些界面。再一次说明，Xcode是一个标准Cocoa程序，一切都是那么熟悉（如果你为Cocoa或者CocoaTouch开发的话，应该是很熟悉）。拿到整个App的Window，然后依次递归打印subview。stackoverflow上有<a href="http://stackoverflow.com/questions/2715534/where-does-a-uialertview-live-while-not-dismissed/2715772#2715772">一个UIView的版本</a>，稍微改变一下就可以得到一个NSView版本。新建一个NSView的Dumping Category，加入如下实现：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">dumpWithIndent:</span><span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">indent</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">NSString</span> <span class="o">*</span><span class="n">class</span> <span class="o">=</span> <span class="n">NSStringFromClass</span><span class="p">([</span><span class="n">self</span> <span class="n">class</span><span class="p">]);</span>
</span><span class='line'>  <span class="n">NSString</span> <span class="o">*</span><span class="n">info</span> <span class="o">=</span> <span class="s">@&quot;&quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">([</span><span class="n">self</span> <span class="nl">respondsToSelector:</span><span class="k">@selector</span><span class="p">(</span><span class="n">title</span><span class="p">)])</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">NSString</span> <span class="o">*</span><span class="n">title</span> <span class="o">=</span> <span class="p">[</span><span class="n">self</span> <span class="nl">performSelector:</span><span class="k">@selector</span><span class="p">(</span><span class="n">title</span><span class="p">)];</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">title</span> <span class="o">!=</span> <span class="nb">nil</span> <span class="o">&amp;&amp;</span> <span class="p">[</span><span class="n">title</span> <span class="n">length</span><span class="p">]</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="n">info</span> <span class="o">=</span> <span class="p">[</span><span class="n">info</span> <span class="nl">stringByAppendingFormat:</span><span class="s">@&quot; title=%@&quot;</span><span class="p">,</span> <span class="n">title</span><span class="p">];</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">([</span><span class="n">self</span> <span class="nl">respondsToSelector:</span><span class="k">@selector</span><span class="p">(</span><span class="n">stringValue</span><span class="p">)])</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">NSString</span> <span class="o">*</span><span class="n">string</span> <span class="o">=</span> <span class="p">[</span><span class="n">self</span> <span class="nl">performSelector:</span><span class="k">@selector</span><span class="p">(</span><span class="n">stringValue</span><span class="p">)];</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">string</span> <span class="o">!=</span> <span class="nb">nil</span> <span class="o">&amp;&amp;</span> <span class="p">[</span><span class="n">string</span> <span class="n">length</span><span class="p">]</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="n">info</span> <span class="o">=</span> <span class="p">[</span><span class="n">info</span> <span class="nl">stringByAppendingFormat:</span><span class="s">@&quot; stringValue=%@&quot;</span><span class="p">,</span> <span class="n">string</span><span class="p">];</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="n">NSString</span> <span class="o">*</span><span class="n">tooltip</span> <span class="o">=</span> <span class="p">[</span><span class="n">self</span> <span class="n">toolTip</span><span class="p">];</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">tooltip</span> <span class="o">!=</span> <span class="nb">nil</span> <span class="o">&amp;&amp;</span> <span class="p">[</span><span class="n">tooltip</span> <span class="n">length</span><span class="p">]</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">info</span> <span class="o">=</span> <span class="p">[</span><span class="n">info</span> <span class="nl">stringByAppendingFormat:</span><span class="s">@&quot; tooltip=%@&quot;</span><span class="p">,</span> <span class="n">tooltip</span><span class="p">];</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;%@%@%@&quot;</span><span class="p">,</span> <span class="n">indent</span><span class="p">,</span> <span class="n">class</span><span class="p">,</span> <span class="n">info</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="p">([[</span><span class="n">self</span> <span class="n">subviews</span><span class="p">]</span> <span class="n">count</span><span class="p">]</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">NSString</span> <span class="o">*</span><span class="n">subIndent</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSString</span> <span class="nl">stringWithFormat:</span><span class="s">@&quot;%@%@&quot;</span><span class="p">,</span> <span class="n">indent</span><span class="p">,</span> <span class="p">([</span><span class="n">indent</span> <span class="n">length</span><span class="p">]</span><span class="o">/</span><span class="mi">2</span><span class="p">)</span><span class="o">%</span><span class="mi">2</span><span class="o">==</span><span class="mi">0</span> <span class="o">?</span> <span class="s">@&quot;| &quot;</span> <span class="o">:</span> <span class="s">@&quot;: &quot;</span><span class="p">];</span>
</span><span class='line'>      <span class="k">for</span> <span class="p">(</span><span class="n">NSView</span> <span class="o">*</span><span class="n">subview</span> <span class="k">in</span> <span class="p">[</span><span class="n">self</span> <span class="n">subviews</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>          <span class="p">[</span><span class="n">subview</span> <span class="nl">dumpWithIndent:</span><span class="n">subIndent</span><span class="p">];</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>在合适的时候（比如点击某个按钮时），调用下面一句代码，便可以打印当前Xcode的结构，非常方便。这对了解Xcode的构成和如何搭建一个如Xcode般复杂的程序很有帮助～</p>

<pre><code>[[[NSApp mainWindow] contentView] dumpWithIndent:@""];
</code></pre>

<p>在结果控制台中的输出结果类似这样：</p>

<p><img src="http://i758.photobucket.com/albums/xx224/onevcat/QQ20130202-14.png" alt="image" /></p>

<p>根据自己需要去去相应的view吧～然后配合方法交换，基本可以做到尽情做想做的事情了。</p>

<h2>最后的小bonus</h2>

<p>/Applications/Xcode.app/Contents/Frameworks/IDEKit.framework/Versions/A/Resources中有不少Xcode界面用的图片，pdf，png和tiff格式都有，想要自定义run，stop按钮或者想要让断点标记从蓝色块变成机器猫头像什么的…应该是可能的～</p>

<p>/Applications/Xcode.app/Contents/PlugIns目录里有很多Xcode自带的“官方版”外挂插件，显然通过class-dump和注入的方法，你可以为Xcode的插件写插件&#8230;嗯～比如改变debugger的行为或者让plist编辑器更聪明，就是这样的。</p>

<p>希望Apple能提供为Xcode编写插件的支持，所有东西都需要摸索虽然很有趣，但是也比较花时间。</p>

<p>另外，github等代码托管网站上有不少大神们写的插件，都开源放出。这些必须是学习插件编写的最优秀的教材和参考：</p>

<ul>
<li><a href="https://github.com/mneorr/Alcatraz">mneorr / Alcatraz</a> Xcode的包管理插件，管理其他插件的插件</li>
<li><a href="https://github.com/onevcat/VVDocumenter-Xcode">onevcat / VVDocumenter-Xcode</a> 帮助快速写文档注释的插件，自动提取参数返回值等</li>
<li><a href="https://github.com/omz/ColorSense-for-Xcode">omz / ColorSense-for-Xcode</a> 在UIColor/NSColor上显示出对应的颜色</li>
<li><a href="https://github.com/omz/Dash-Plugin-for-Xcode">omz / Dash-Plugin-for-Xcode</a> 在Xcode中集成Dash，方便看文档</li>
<li><a href="https://github.com/omz/MiniXcode">omz / MiniXcode</a> 隐藏Xcode臃肿的工具栏，获得更大的可视空间</li>
<li><a href="https://github.com/ksuther/KSImageNamed-Xcode">ksuther / KSImageNamed-Xcode</a> 输入imageNamed的时候自动补完图片名称</li>
<li><a href="https://github.com/JugglerShu/XVim">JugglerShu / XVim</a> 将Xcode编辑器改造成Vim</li>
<li><a href="https://github.com/davekeck/Xcode-4-Fixins">davekeck / Xcode-4-Fixins</a> 修正一些Xcode的bugs（应该已经没有太大用了）</li>
<li><a href="https://github.com/0xced/CLITool-InfoPlist">0xced / CLITool-InfoPlist</a> 方便修改Info.plist为CLI目标的插件</li>
<li><a href="https://github.com/questbeat/Lin">questbeat / Lin</a> 为NSLocalizedString显示补全</li>
<li><a href="https://github.com/stefanceriu/SCXcodeMiniMap">stefanceriu / SCXcodeMiniMap</a> 在侧边显示代码小地图</li>
</ul>


<p>好了，就到这里吧。VVPlugInDemo的工程文件我放到了github上，有需要的话您可以从<a href="https://github.com/onevcat/VVPluginDemo">这里下载</a>并作为参考和起始来使用。谢谢您看完这么长的文。正如一开始所说的，我自己水平十分有限，因此错误和不当之处还恳请大家轻喷多原谅，并帮助我改正，再次谢谢～</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Unity3D中暂停时的动画及粒子效果实现]]></title>
    <link href="http://onevcat.com/2013/01/do_not_pause_me/"/>
    <updated>2013-01-26T00:00:00+09:00</updated>
    <id>http://onevcat.com/2013/01/do_not_pause_me</id>
    <content type="html"><![CDATA[<p><!--:zh--><h2 style="text-align: justify;"><a href="http://www.onevcat.com/wp-content/uploads/2013/01/big副本.png"><img class="aligncenter size-full wp-image-1087" title="unpause" src="http://www.onevcat.com/wp-content/uploads/2013/01/big副本.png" alt="" width="500" height="200" data-pinit="registered" /></a></h2>
<p style="text-align: justify;">暂停是游戏中经常出现的功能，而Unity3D中对于暂停的处理并不是很理想。一般的做法是将Time.timeScale设置为0。Unity的文档中对于这种情况有以下描述；</p></p>

<p><blockquote>The scale at which the time is passing. This can be used for slow motion effects….When timeScale is set to zero the game is basically paused …</blockquote>
<p style="text-align: justify;">timeScale表示游戏中时间流逝快慢的尺度。文档中明确表示，这个参数是用来做慢动作效果的。对于将timeScale设置为0的情况，仅只有一个补充说明。在实际使用中，通过设置timeScale来实现慢动作特效，是一种相当简洁且不带任何毒副作用的方法，但是当将timeScale设置为0来实现暂停时，<strong>由于时间不再流逝，所有和时间有关的功能痘将停止</strong>，有些时候这正是我们想要的，因为毕竟是暂停。但是副作用也随之而来，在暂停时各种动画和粒子效果都将无法播放（因为是时间相关的），FixedUpdate也将不再被调用。</p>
<p style="text-align: justify;"><strong>换句话说，最大的影响是，在timeScale＝0的暂停情况下，你将无法实现暂停菜单的动画以及各种漂亮的点击效果。</strong></p>
<p style="text-align: justify;">但是并非真的没办法，关于timeScale的文档下就有提示：</p></p>

<p><blockquote>Except for realtimeSinceStartup, timeScale affects all the time and delta time measuring variables of the Time class.</blockquote>
<p style="text-align: justify;">因为realtimeSinceStartup和timeScale无关，因此也就成了解决在暂停下的动画和粒子效果的救命稻草。对于Unity动画，在每一帧，根据实际时间寻找相应帧并采样显示的方法来模拟动画：</p></p>

<p><pre class="lang:c# mark:19-21 decode:true" title="暂停时采样的核心代码">AnimationState _currState = animation[clipName];
bool isPlaying = true;</pre></p>

<p>float _progressTime = 0F;<br />
float _timeAtLastFrame = 0F;<br />
float _timeAtCurrentFrame = 0F;<br />
bool _inReversePlaying = false;</p>

<p>float _deltaTime = 0F;<br />
animation.Play(clipName);<br />
_timeAtLastFrame = Time.realtimeSinceStartup;</p>

<p>while (isPlaying) {<br />
    _timeAtCurrentFrame = Time.realtimeSinceStartup;<br />
    _deltaTime = _timeAtCurrentFrame - _timeAtLastFrame;<br />
    _timeAtLastFrame = _timeAtCurrentFrame; </p>

<p>    _progressTime += _deltaTime;</p>

<p>    _currState.normalizedTime = _inReversePlaying ? 1.0f - (_progressTime / _currState.length) : _progressTime / _currState.length; <br />
    animation.Sample();</p>

<p>    //&#8230;repeat or over by wrap mode <br />
}
<p style="text-align: justify;">对于粒子效果，同样进行计时，并通过粒子系统的Simulate方法来模拟对应时间的粒子状态来完成效果，比如对于Legacy粒子，使Emitter在timeScale＝0暂停时继续有效发射并显示效果：</p></p>

<p><pre class="lang:c# mark:4-5 decode:true">_deltaTime = Time.realtimeSinceStartup - _timeAtLastFrame;
_timeAtLastFrame = Time.realtimeSinceStartup;
if (Time.timeScale == 0 ){
	_emitter.Simulate(_deltaTime);
	_emitter.emit = true;
}</pre>
<p style="text-align: justify;">核心的代码基本都在上面了，可以根据这个思路完成实现。<a href="https://github.com/onevcat/UnpauseMe">完整的代码和示例工程</a>我放到了github上，有需要的朋友可以去查看，也欢迎大家指正。</p><!--:--><!--:en-->&nbsp;</p>

<p><!--:--><!--:ja-->&nbsp;</p>

<p><!--:--></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Unity编译至Xcode工程后自动添加文件和库的方法]]></title>
    <link href="http://onevcat.com/2012/12/xuporter/"/>
    <updated>2012-12-18T00:00:00+09:00</updated>
    <id>http://onevcat.com/2012/12/xuporter</id>
    <content type="html"><![CDATA[<p><img src="http://www.onevcat.com/wp-content/uploads/2012/12/1.png" alt="XUPorter" /></p>

<p>废话之前</p>

<p><a href="https://github.com/onevcat/XUPorter">XUPorter项目Github链接</a></p>

<h3>为什么想要自动添加</h3>

<p>由于Unity是全平台的游戏开发环境，在开发中针对特定平台的特定功能时，很难避免根据对象平台的不同而引入不同的依赖。包括源码，需要的库和框架等。在使用各种插件后这种情况愈发严重：比如想加入内购功能，StroreKit.framework必不可少，而且也需要相应的处理代码。按照一般的Unity插件开发流程，在完成.cs的接口声明和Unity侧的调用实现后，最重要的当然是在iOS native侧完成实现。而在以前，包括依赖库和所有源码文件，都只有在Unity生成Xcode工程之后，再手动添加。如果工程小依赖少的话花不了太多时间，但是如果项目很大，很可能折腾一次就要十来分钟，严重影响了工作效率，必须加以解决。</p>

<h3>怎么办</h3>

<p>Unity开发团队也意识到了这个问题，在Unity编译的最后加入了一个脚本调用的命令，会自动搜索Editor文件夹下的PostprocessBuildPlayer，并进行调用，在该文件中可以自己加入脚本来向Xcode中添加库和文件。关于PostprocessBuildPlayer的详细信息，可以参看<a href="http://docs.unity3d.com/Documentation/Manual/BuildPlayerPipeline.html">官方文档</a>，关于向Xcode中添加文件或库，gonzoua的<a href="https://github.com/gonzoua/xcs">xcs</a>也许是不错的选择。但是似乎xcs只能针对Xcode3来添加，在Xcode4中，主工程文件的结构发生了改变，导致xcs失效，而这个项目也迟迟没有更新（也许有时间我会考虑接手继续这个项目，但肯定不是现在&#8230;）。因此不得不打其他主意。</p>

<p>在Unity3.5中，加入了一个很棒的标签——<a href="http://docs.unity3d.com/Documentation/ScriptReference/PostProcessBuildAttribute.html">[PostProcessBuild]</a>，被该标签标注的函数将自动在build player后被调用，这为大家提供了一个不需要用脚本和命令行就能添加或修改编译得到的工程的绝好的入口。darktable用python实现了一个Xcode4工程文件读写的接口<a href="https://bitbucket.org/darktable/mod-pbxproj/overview">Mod PBXProj</a>，但是对于Unity来说，更需要的是C#的实现。Cariola完成了<a href="https://github.com/dcariola/XCodeEditor-for-Unity">一部分实现</a>，但是存在一些错误和不太好用的地方，代码也很乱。我在其基础上进行了一些改进和整理。但是因为变动的还是比较大，很难merge回去，所以决定自己开一个项目来继续推进这个项目。</p>

<h3>XUPorter</h3>

<p>我把它叫做XUPorter，a dependency porter from Unity to Xcode。XUPorter可以读取Xcode工程文件并进行解析（再次感谢darktable的工作），之后在Unity工程的Assets目录下寻找所有的.projmods文件，并根据文件内容向工程中添加文件或库。</p>

<h4>使用方法</h4>

<p>将Github项目中的所有文件copy到Unity工程文件夹下的/Assets/Editor目录中，XUPorter使用一个<a href="https://github.com/prime31/UIToolkit/blob/master/Assets/Plugins/MiniJSON.cs">改良版的MiniJSON</a>来进行。如果你的项目中已经在使用这个MiniJSON了的话，可以直接将XUPorter文件夹下的MiniJSON文件夹删掉；如果不一样的话，你可以选择其中一个重构一下或者加上命名空间来解决类名冲突。接下来，Mods文件夹下是示例文件以及需要导入Xcode的文件。在看完以后你需要把Mods文件夹下的所有.projmods文件以及Mods/iOS文件夹下的内容删除或者替换为你所需要的内容。</p>

<p>在<a href="http://d.pr/f/HAzc">这里</a>提供了.unitypackege格式文件的下载，你也可以选择下载打包好的文件并导入你的工程，之后的步骤和上面一样。</p>

<p>.projmods文件是一个JSON格式的配置patch文件，定义了要如何设置Xcode工程。举个基本的例子，比如KKKeychain.projmods：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;group&quot;</span><span class="p">:</span> <span class="s2">&quot;KKKeychain&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;libs&quot;</span><span class="p">:</span> <span class="p">[],</span>
</span><span class='line'>    <span class="nt">&quot;frameworks&quot;</span><span class="p">:</span> <span class="p">[</span><span class="s2">&quot;Security.framework&quot;</span><span class="p">],</span>
</span><span class='line'>    <span class="nt">&quot;headerpaths&quot;</span><span class="p">:</span> <span class="p">[],</span>
</span><span class='line'>    <span class="nt">&quot;files&quot;</span><span class="p">:</span>   <span class="p">[],</span>
</span><span class='line'>    <span class="nt">&quot;folders&quot;</span><span class="p">:</span> <span class="p">[</span><span class="s2">&quot;iOS/KKKeychain/&quot;</span><span class="p">],</span>
</span><span class='line'>    <span class="nt">&quot;linker_flags&quot;</span><span class="p">:</span> <span class="p">[],</span>
</span><span class='line'>    <span class="nt">&quot;excludes&quot;</span><span class="p">:</span> <span class="p">[</span><span class="s2">&quot;^.*.meta$&quot;</span><span class="p">,</span> <span class="s2">&quot;^.*.mdown$&quot;</span><span class="p">,</span> <span class="s2">&quot;^.*.pdf$&quot;</span><span class="p">]</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>各参数定义如下：</p>

<ul>
<li>group：所有由该projmods添加的文件和文件夹所属的Xcode中的group名称</li>
<li>libs：在Xcode Build Phases中需要添加的动态链接库的名称，比如libz.dylib</li>
<li>frameworks：在Xcode Build Phases中需要添加的框架的名称，比如Security.framework</li>
<li>headerpaths：Xcode中编译设置中的Header Search Paths路径</li>
<li>files：加入工程的文件名</li>
<li>folders：加入工程的文件夹，其中所有的文件和文件夹都将被加入工程中</li>
<li>linker_flags：添加到工程linker flag中的链接配置，比如-ObjC</li>
<li>excludes：忽略的文件的正则表达式，匹配的文件将不会被加入工程中</li>
</ul>


<p>更多的例子可以参看Mods文件夹中的其他projmods文件。所有的定义路径都是基于当前projmods文件位置的相对路径。 最后，在完成projmods后，Unity会在编译完成后，调用XCodePostProcess的OnPostProcessBuild来对编译得到的Xcode工程进行修改。</p>

<p>之后进一步要做的是为MiniJSON添加一个namespace，这样可以避免不必要的冲突。另外如果您有什么好的想法，也欢迎fork这个项目并给我pull request。项目的github链接请<a href="https://github.com/onevcat/XUPorter">猛击这里</a>。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Unity 3D中的内存管理]]></title>
    <link href="http://onevcat.com/2012/11/memory-in-unity3d/"/>
    <updated>2012-11-16T00:00:00+09:00</updated>
    <id>http://onevcat.com/2012/11/memory-in-unity3d</id>
    <content type="html"><![CDATA[<p><!--:zh--><p style="text-align: justify;"><a href="http://www.onevcat.com/wp-content/uploads/2012/11/unity-technologies-870x531.jpg"><img class="aligncenter size-full wp-image-1043" title="unity-technologies-870x531" src="http://www.onevcat.com/wp-content/uploads/2012/11/unity-technologies-870x531.jpg" alt="" width="870" height="182" data-pinit="registered" /></a></p>
<p style="text-align: justify;">本文欢迎转载，但烦请保留此行出处信息：<a href="http://www.onevcat.com/2012/11/memory-in-unity3d/">http://www.onevcat.com/2012/11/memory-in-unity3d/</a></p>
<p style="text-align: justify;">Unity3D在内存占用上一直被人诟病，特别是对于面向移动设备的游戏开发，动辄内存占用飙上一两百兆，导致内存资源耗尽，从而被系统强退造成极差的体验。类似这种情况并不少见，但是绝大部分都是可以避免的。虽然理论上Unity的内存管理系统应当为开发者分忧解难，让大家投身到更有意义的事情中去，但是对于Unity对内存的管理方式，官方文档中并没有太多的说明，基本需要依靠自己摸索。最近在接手的项目中存在严重的内存问题，在参照文档和Unity Answer众多猜测和证实之后，稍微总结了下Unity中的内存的分配和管理的基本方式，在此共享。</p>
<p style="text-align: justify;">虽然Unity标榜自己的内存使用全都是“Managed Memory”，但是事实上你必须正确地使用内存，以保证回收机制正确运行。如果没有做应当做的事情，那么场景和代码很有可能造成很多非必要内存的占用，这也是很多Unity开发者抱怨内存占用太大的原因。接下来我会介绍Unity使用内存的种类，以及相应每个种类的优化和使用的技巧。遵循使用原则，可以让非必要资源尽快得到释放，从而降低内存占用。</p>
<p style="text-align: justify;"><!--:--><!--more--><!--:zh--></p></p>

<p><hr /></p>

<p><h3 style="text-align: justify;">Unity中的内存种类</h3>
<p style="text-align: justify;">实际上Unity游戏使用的内存一共有三种：程序代码、托管堆（Managed Heap）以及本机堆（Native Heap）。</p>
<p style="text-align: justify;">程序代码包括了所有的Unity引擎，使用的库，以及你所写的所有的游戏代码。在编译后，得到的运行文件将会被加载到设备中执行，并占用一定内存。这部分内存实际上是没有办法去“管理”的，它们将在内存中从一开始到最后一直存在。一个空的Unity默认场景，什么代码都不放，在iOS设备上占用内存应该在17MB左右，而加上一些自己的代码很容易就飙到20MB左右。想要减少这部分内存的使用，能做的就是减少使用的库，稍后再说。</p>
<p style="text-align: justify;">托管堆是被Mono使用的一部分内存。<a href="http://www.mono-project.com/Main_Page">Mono</a>项目一个开源的.net框架的一种实现，对于Unity开发，其实充当了基本类库的角色。托管堆用来存放类的实例（比如用new生成的列表，实例中的各种声明的变量等）。“托管”的意思是Mono“应该”自动地改变堆的大小来适应你所需要的内存，并且定时地使用垃圾回收（Garbage Collect）来释放已经不需要的内存。关键在于，有时候你会忘记清除对已经不需要再使用的内存的引用，从而导致Mono认为这块内存一直有用，而无法回收。</p>
<p style="text-align: justify;">最后，本机堆是Unity引擎进行申请和操作的地方，比如贴图，音效，关卡数据等。Unity使用了自己的一套内存管理机制来使这块内存具有和托管堆类似的功能。基本理念是，如果在这个关卡里需要某个资源，那么在需要时就加载，之后在没有任何引用时进行卸载。听起来很美好也和托管堆一样，但是由于Unity有一套自动加载和卸载资源的机制，让两者变得差别很大。自动加载资源可以为开发者省不少事儿，但是同时也意味着开发者失去了手动管理所有加载资源的权力，这非常容易导致大量的内存占用（贴图什么的你懂的），也是Unity给人留下“吃内存”印象的罪魁祸首。</p></p>

<p><hr /></p>

<p><h3 style="text-align: justify;">优化程序代码的内存占用</h3>
<p style="text-align: justify;">这部分的优化相对简单，因为能做的事情并不多：主要就是减少打包时的引用库，改一改build设置即可。对于一个新项目来说不会有太大问题，但是如果是已经存在的项目，可能改变会导致原来所需要的库的缺失（虽说一般来说这种可能性不大），因此有可能无法做到最优。</p>
<p style="text-align: justify;"><img src="http://www.onevcat.com/wp-content/uploads/2012/11/unity-setting.png" alt="image" data-pinit="registered" /></p>
<p style="text-align: justify;">当使用Unity开发时，默认的Mono包含库可以说大部分用不上，在Player Setting（Edit-&gt;Project Setting-&gt;Player或者Shift+Ctrl(Command)+B里的Player Setting按钮）面板里，将最下方的Optimization栏目中“Api Compatibility Level”选为.NET 2.0 Subset，表示你只会使用到部分的.NET 2.0 Subset，不需要Unity将全部.NET的Api包含进去。接下来的“Stripping Level”表示从build的库中剥离的力度，每一个剥离选项都将从打包好的库中去掉一部分内容。你需要保证你的代码没有用到这部分被剥离的功能，选为“Use micro mscorlib”的话将使用最小的库（一般来说也没啥问题，不行的话可以试试之前的两个）。库剥离可以极大地降低打包后的程序的尺寸以及程序代码的内存占用，唯一的缺点是这个功能只支持Pro版的Unity。</p>
<p style="text-align: justify;">这部分优化的力度需要根据代码所用到的.NET的功能来进行调整，有可能不能使用Subset或者最大的剥离力度。如果超出了限度，很可能会在需要该功能时因为找不到相应的库而crash掉（iOS的话很可能在Xcode编译时就报错了）。比较好地解决方案是仍然用最强的剥离，并辅以较小的第三方的类库来完成所需功能。一个最常见问题是最大剥离时Sysytem.Xml是不被Subset和micro支持的，如果只是为了xml，完全可以导入一个轻量级的xml库来解决依赖（Unity官方推荐<a href="http://unity3d.com/support/documentation/Images/manual/Mono.Xml.zip">这个</a>）。</p>
<p style="text-align: justify;">关于每个设定对应支持的库的详细列表，可以在<a href="http://docs.unity3d.com/Documentation/ScriptReference/MonoCompatibility.html">这里</a>找到。关于每个剥离级别到底做了什么，<a href="http://unity3d.com/support/documentation/Manual/iphone-playerSizeOptimization.html">Unity的文档</a>也有说明。实际上，在游戏开发中绝大多数被剥离的功能使用不上的，因此不管如何，库剥离的优化方法都值得一试。</p></p>

<p><hr /></p>

<p><h3 style="text-align: justify;">托管堆优化</h3>
<p style="text-align: justify;">Unity有一篇不错的关于<a href="http://unity3d.com/support/documentation/Manual/Understanding%20Automatic%20Memory%20Management.html">托管堆代码如何写比较好</a>的说明，在此基础上我个人有一些补充。</p>
<p style="text-align: justify;">首先需要明确，托管堆中存储的是你在你的代码中申请的内存（不论是用js，C#还是Boo写的）。一般来说，无非是new或者Instantiate两种生成object的方法（事实上Instantiate中也是调用了new）。在接收到alloc请求后，托管堆在其上为要新生成的对象实例以及其实例变量分配内存，如果可用空间不足，则向系统申请更多空间。</p>
<p style="text-align: justify;">当你使用完一个实例对象之后，通常来说在脚本中就不会再有对该对象的引用了（这包括将变量设置为null或其他引用，超出了变量的作用域，或者对Unity对象发送Destory()）。在每隔一段时间，Mono的垃圾回收机制将检测内存，将没有再被引用的内存释放回收。总的来说，你要做的就是在尽可能早的时间将不需要的引用去除掉，这样回收机制才能正确地把不需要的内存清理出来。但是需要注意在内存清理时有可能造成游戏的短时间卡顿，这将会很影响游戏体验，因此如果有大量的内存回收工作要进行的话，需要尽量选择合适的时间。</p>
<p style="text-align: justify;">如果在你的游戏里，有特别多的类似实例，并需要对它们经常发送Destroy()的话，游戏性能上会相当难看。比如<a href="http://www.onevcat.com/showcase/coinpush/">小熊推金币</a>中的金币实例，按理说每枚金币落下台子后都需要对其Destory()，然后新的金币进入台子时又需要Instantiate，这对性能是极大的浪费。一种通常的做法是在不需要时，不摧毁这个GameObject，而只是隐藏它，并将其放入一个重用数组中。之后需要时，再从重用数组中找到可用的实例并显示。这将极大地改善游戏的性能，相应的代价是消耗部分内存，一般来说这是可以接受的。关于对象重用，可以参考<a href="http://docs.unity3d.com/Documentation/Manual/UnderstandingAutomaticMemoryManagement.html">Unity关于内存方面的文档中Reusable Object Pools部分</a>，或者Prime31有一个是用Linq来建立重用池的视频教程（Youtube，需要翻墙，<a href="http://www.youtube.com/watch?v=IX041ZvgQKE">上</a>，<a href="http://www.youtube.com/watch?v=d9078u8ft58">下</a>）。</p>
<p style="text-align: justify;">如果不是必要，应该在游戏进行的过程中尽量减少对GameObject的Instantiate()和Destroy()调用，因为对计算资源会有很大消耗。在便携设备上短时间大量生成和摧毁物体的话，很容易造成瞬时卡顿。如果内存没有问题的话，尽量选择先将他们收集起来，然后在合适的时候（比如按暂停键或者是关卡切换），将它们批量地销毁并且回收内存。Mono的内存回收会在后台自动进行，系统会选择合适的时间进行垃圾回收。在合适的时候，也可以手动地调用System.GC.Collect()来建议系统进行一次垃圾回收。要注意的是这里的调用真的仅仅只是建议，可能系统会在一段时间后在进行回收，也可能完全不理会这条请求，不过在大部分时间里，这个调用还是靠谱的。</p></p>

<p><hr /></p>

<p><h3 style="text-align: justify;">本机堆的优化</h3>
<p style="text-align: justify;">当你加载完成一个Unity的scene的时候，scene中的所有用到的asset（包括Hierarchy中所有GameObject上以及脚本中赋值了的的材质，贴图，动画，声音等素材），都会被自动加载（这正是Unity的智能之处）。也就是说，当关卡呈现在用户面前的时候，所有Unity编辑器能认识的本关卡的资源都已经被预先加入内存了，这样在本关卡中，用户将有良好的体验，不论是更换贴图，声音，还是播放动画时，都不会有额外的加载，这样的代价是内存占用将变多。Unity最初的设计目的还是面向台式机，几乎无限的内存和虚拟内存使得这样的占用似乎不是问题，但是这样的内存策略在之后移动平台的兴起和大量移动设备游戏的制作中出现了弊端，因为移动设备能使用的资源始终非常有限。因此在面向移动设备游戏的制作时，尽量减少在Hierarchy对资源的直接引用，而是使用Resource.Load的方法，在需要的时候从硬盘中读取资源，在使用后用Resource.UnloadAsset()和Resources.UnloadUnusedAssets()尽快将其卸载掉。总之，这里是一个处理时间和占用内存空间的trade off，如何达到最好的效果没有标准答案，需要自己权衡。</p>
<p style="text-align: justify;">在关卡结束的时候，这个关卡中所使用的所有资源将会被卸载掉（除非被标记了DontDestroyOnLoad）的资源。注意不仅是DontDestroyOnLoad的资源本身，其相关的所有资源在关卡切换时都不会被卸载。DontDestroyOnLoad一般被用来在关卡之间保存一些玩家的状态，比如分数，级别等偏向文本的信息。如果DontDestroyOnLoad了一个包含很多资源（比如大量贴图或者声音等大内存占用的东西）的话，这部分资源在场景切换时无法卸载，将一直占用内存，这种情况应该尽量避免。</p>
<p style="text-align: justify;">另外一种需要注意的情况是脚本中对资源的引用。大部分脚本将在场景转换时随之失效并被回收，但是，在场景之间被保持的脚本不在此列（通常情况是被附着在DontDestroyOnLoad的GameObject上了）。而这些脚本很可能含有对其他物体的Component或者资源的引用，这样相关的资源就都得不到释放，这绝对是不想要的情况。另外，static的单例（singleton）在场景切换时也不会被摧毁，同样地，如果这种单例含有大量的对资源的引用，也会成为大问题。因此，尽量减少代码的耦合和对其他脚本的依赖是十分有必要的。如果确实无法避免这种情况，那应当手动地对这些不再使用的引用对象调用Destroy()或者将其设置为null。这样在垃圾回收的时候，这些内存将被认为已经无用而被回收。</p>
<p style="text-align: justify;">需要注意的是，Unity在一个场景开始时，根据场景构成和引用关系所自动读取的资源，只有在读取一个新的场景或者reset当前场景时，才会得到清理。因此这部分内存占用是不可避免的。在小内存环境中，这部分初始内存的占用十分重要，因为它决定了你的关卡是否能够被正常加载。因此在计算资源充足或是关卡开始之后还有机会进行加载时，尽量减少Hierarchy中的引用，变为手动用Resource.Load，将大大减少内存占用。在Resource.UnloadAsset()和Resources.UnloadUnusedAssets()时，只有那些真正没有任何引用指向的资源会被回收，因此请确保在资源不再使用时，将所有对该资源的引用设置为null或者Destroy。同样需要注意，这两个Unload方法仅仅对Resource.Load拿到的资源有效，而不能回收任何场景开始时自动加载的资源。与此类似的还有AssetBundle的Load和Unload方法，灵活使用这些手动自愿加载和卸载的方法，是优化Unity内存占用的不二法则～</p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Perl中JSON的解析和utf-8乱码的解决]]></title>
    <link href="http://onevcat.com/2012/10/perl-json-utf/"/>
    <updated>2012-10-29T00:00:00+09:00</updated>
    <id>http://onevcat.com/2012/10/perl-json-utf</id>
    <content type="html"><![CDATA[<p><!--:zh--><p style="text-align: justify;">最近在做一个带有网络通讯和同步功能的app，需要自己写一些后台的东西。因为是半路入门，所以从事开发以来就没有做过后台相关的工作，属于绝对的小白菜鸟。而因为公司在入职前给新员工提过学习Perl的要求，所以还算是稍微看过一些。这次的后台也直接就用Perl来写了。</p></p>

<p><h3 style="text-align: justify;">基本使用</h3>
<p style="text-align: justify;">和app的通讯，很大程度上依赖了JSON，一来是熟悉，二来是iOS现在解析JSON也十分方便。iOS客户端的话JSON的解析和生成都是没什么问题的：iOS5中加入了<a href="http://developer.apple.com/library/ios/#documentation/Foundation/Reference/NSJSONSerialization_Class/Reference/Reference.html">NSJSONSerialization</a>类来提供相关功能，如果希望支持更早的系统版本的话，相关的开源代码也有很多，也简单易用，比如<a href="http://stig.github.com/json-framework/">SBJson</a>或者<a href="https://github.com/johnezang/JSONKit">JSONKit</a>。同样，在Perl里也有不少类似的JSON处理的模块，最有名最早的应该是<a href="http://search.cpan.org/~makamaka/JSON-2.53/lib/JSON.pm">JSON</a>模块了，同时也简单易用，应该可以满足大部分情况下的需求了。</p>
<p style="text-align: justify;"><!--:--><!--more--><!--:zh--></p>
<p style="text-align: justify;">使用也很简单，安装完模块后，use之后使用encode_json命令即可将perl的array或者dic转换为标准的JSON字符串了：</p>
<p style="text-align: justify;">[gist id=3970516 file=Perl_JSON_encode.pl]</p>
<p style="text-align: justify;">得到的字符串为</p></p>

<p><blockquote>[{&#8220;name&#8221;:&#8221;Ken&#8221;,&#8221;age&#8221;:19},{&#8220;name&#8221;:&#8221;Ken&#8221;,&#8221;age&#8221;:25}]</blockquote>
<p style="text-align: justify;">相对应地，解析也很容易</p>
<p style="text-align: justify;">[gist id=3970516 file=Perl_JSON_decode.pl]</p></p>

<p><div style="text-align: justify;">得到的$array是含有两个字典的数组的ref。</div>
<div style="text-align: justify;"></div>
<div style="text-align: justify;"></div>
<h3 style="text-align: justify;">UTF-8乱码解决</h3>
<p style="text-align: justify;">在数据中含有UTF-8字符的时候需要稍微注意，如果直接按照上面的方法将会出现乱码。JSON模块的encode_json和decode_json自身是支持UTF8编码的，但是perl为了简洁高效，默认是认为程序是非UTF8的，因此在程序开头处需要申明需要UTF8支持。另外，如果需要用到JSON编码的功能（即encode_json）的话，还需要加入Encode模块的支持。总之，在程序开始处加入以下：</p>
<p style="text-align: justify;">[gist id=3970516 file=header.pl]</p>
<p style="text-align: justify;">另外，如果使用非UTF8进行编码的内容的话，最好先使用Encode的from_to命令转换成UTF8，之后再进行JSON编码。比如使用GBK编码的简体字（一般来自比较早的Windows的文件等会偶尔变成非UTF8编码），先进性如下转换：</p>
<p style="text-align: justify;">[crayon lang=&#8221;perl&#8221; url = &#8220;https://gist.github.com/raw/3970516/47d582812cc8ad9658b7287c88ededaa07a22c76/from_to.pl&#8221; /]</p></p>

<p><div style="text-align: justify;">其他的，如果追求更高的JSON转换性能的话，可以试试看<a href="http://search.cpan.org/~mlehmann/JSON-XS-2.33/XS.pm">JSON::XS</a>之类的附加模块～</div><!--:--><!--:en-->&nbsp;</p>

<p>&nbsp;</p>

<p><!--:--><!--:ja-->&nbsp;</p>

<p>&nbsp;</p>

<p><!--:--></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[再见，祖国]]></title>
    <link href="http://onevcat.com/2012/09/see-you-my-country/"/>
    <updated>2012-09-27T00:00:00+09:00</updated>
    <id>http://onevcat.com/2012/09/see-you-my-country</id>
    <content type="html"><![CDATA[<p><!--:zh--><p style="text-align: justify;">这篇日志发送的时候，我应该已经在离开中国的飞机上了，也有可能已经到达异国他乡了。这是一次不知道归期的旅途，也是一次充满未知的探索，从现在开始，祝自己好运。</p>
<p style="text-align: justify;">我在中国待了二十六载春秋，对这片土地有着深厚的感情。无论何时何地，无论此去经年，这个经历了太多磨难和挫折并且面临着巨大挑战的国家，始终是我魂牵梦萦的地方。虽然还有各种问题，虽然不足和缺点明显到让人无力吐槽，但是这个国家是我的祖国。对于自己的国家，一个人是没有任何理由和立场去厌恶的。</p>
<p style="text-align: justify;">记得本科入学式的时候，校长有这样一句话：“你们来到这里，是因为祖国选择了你们”。而讽刺的是，在四年或者七年后，我们中有一大批人选择了离开祖国，而且可能永远不会再回来。学校很尴尬的恢复成了最初成立时的“留美预备学校”的性质。确实，在这100年的时间里，似乎很多东西都回到了起点…</p>
<p style="text-align: justify;">到达之后可能会消失一段时间了，因为网络和通讯以及生活的安定都会需要一段时间。之后的blog风格依然会以iOS开发的技术的入门介绍为主，当然因为在国外一切都很新鲜，也许国外生活的介绍和感想的比例会稍微高一些。也许工作会相当忙，但是我仍然希望能有时间做一些工作之外的自己的事情，因为毕竟工作只是工作，它的目的不是代替生活，而是服务生活的～</p>
<p style="text-align: justify;">那么，祖国，再见。</p><!--:--><!--:en-->&nbsp;</p>

<p><!--:--><!--:ja-->&nbsp;</p>

<p><!--:--></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[WWDC 2012 Session笔记——202, 228, 232 AutoLayout（自动布局）入门]]></title>
    <link href="http://onevcat.com/2012/09/autoayout/"/>
    <updated>2012-09-20T00:00:00+09:00</updated>
    <id>http://onevcat.com/2012/09/autoayout</id>
    <content type="html"><![CDATA[<p><!--:zh--><p style="text-align: justify;"><a href="http://www.onevcat.com/wp-content/uploads/2012/09/QQ20120920-8.png"><img class="aligncenter size-full wp-image-1017" title="QQ20120920-8" src="http://www.onevcat.com/wp-content/uploads/2012/09/QQ20120920-8.png" alt="" width="651" height="262" data-pinit="registered" /></a></p>
<p style="text-align: justify;">这是博主的WWDC2012笔记系列中的一篇，完整的笔记列表可以参看<a href="http://www.onevcat.com/tag/wwdc/">这里</a>。如果您是首次来到本站，也许您会有兴趣通过<a href="http://www.onevcat.com/feed">RSS</a>，或者通过页面下方的邮件订阅的方式订阅本站。</p>
<p style="text-align: justify;">AutoLayout在去年的WWDC上被引入Cocoa，而在今年的WWDC上，Apple不惜花费了三个Session的前所未见的篇幅来详细地向开发者讲解AutoLayout在iOS上的应用，是由起原因的：iPhone5的屏幕将变为4寸，开发者即将面临为不同尺寸屏幕进行应用适配的工作。Android平台开发中最令人诟病的适配工作的厄运现在似乎也将降临在iOS开发者的头上。基于这样的情况，Apple大力推广使用AutoLayout的方法来进行UI布局，以一举消除适配的烦恼。AutoLayout将是自Interface Builder和StoryBoard之后UI制作上又一次重要的变化，也必然是之后iOS开发的趋势，因此这个专题很值得学习。</p></p>

<p><h2 style="text-align: justify;">AutoLayout是什么？</h2>
<p style="text-align: justify;">使用一句Apple的官方定义的话</p></p>

<p><blockquote>AutoLayout是一种基于约束的，描述性的布局系统。</blockquote></p>

<p>Auto Layout Is a Constraint-Based, Descriptive Layout System.
<p style="text-align: justify;">关键词：</p></p>

<p><ul style="text-align: justify;">
	<li>基于约束 － 和以往定义frame的位置和尺寸不同，AutoLayout的位置确定是以所谓相对位置的约束来定义的，比如<em>x坐标为superView的中心，y坐标为屏幕底部上方10像素</em>等</li>
	<li>描述性 － 约束的定义和各个view的关系使用接近自然语言或者可视化语言（稍后会提到）的方法来进行描述</li>
	<li>布局系统 － 即字面意思，用来负责界面的各个元素的位置。</li>
</ul>
<div style="text-align: justify;"><!--:--><!--:en-->&nbsp;</div></p>

<p><!--:--><!--more--><!--:zh-->
<p style="text-align: justify;">总而言之，AutoLayout为开发者提供了一种不同于传统对于UI元素位置指定的布局方法。以前，不论是在IB里拖放，还是在代码中写，每个UIView都会有自己的frame属性，来定义其在当前视图中的位置和尺寸。使用AutoLayout的话，就变为了使用约束条件来定义view的位置和尺寸。这样的<strong>最大好处是一举解决了不同分辨率和屏幕尺寸下view的适配问题，另外也简化了旋转时view的位置的定义</strong>，原来在底部之上10像素居中的view，不论在旋转屏幕或是更换设备（iPad或者iPhone5或者以后可能出现的mini iPad）的时候，始终还在底部之上10像素居中的位置，不会发生变化。</p>
<p style="text-align: justify;">总结</p></p>

<p><blockquote>使用约束条件来描述布局，view的frame会依据这些约束来进行计算</blockquote></p>

<p>Describe the layout with constraints, and frames are calculated automatically.</p>

<p><hr /></p>

<p><h2 style="text-align: justify;">AutoLayout和Autoresizing Mask的区别</h2>
<p style="text-align: justify;">Autoresizing Mask是我们的老朋友了…如果你以前一直是代码写UI的话，你肯定写过UIViewAutoresizingFlexibleWidth之类的枚举；如果你以前用IB比较多的话，一定注意到过每个view的size inspector中都有一个红色线条的Autoresizing的指示器和相应的动画缩放的示意图，这就是Autoresizing Mask。在iOS6之前，关于屏幕旋转的适配和iPhone，iPad屏幕的自动适配，基本都是由Autoresizing Mask来完成的。但是随着大家对iOS app的要求越来越高，以及已经以及今后可能出现的多种屏幕和分辨率的设备来说，Autoresizing Mask显得有些落伍和迟钝了。AutoLayout可以完成所有原来Autoresizing Mask能完成的工作，同时还能够胜任一些原来无法完成的任务，其中包括：</p></p>

<p><ul style="text-align: justify;">
	<li>AutoLayout可以指定任意两个view的相对位置，而不需要像Autoresizing Mask那样需要两个view在直系的view hierarchy中。</li>
	<li>AutoLayout不必须指定相等关系的约束，它可以指定非相等约束（大于或者小于等）；而Autoresizing Mask所能做的布局只能是相等条件的。</li>
	<li>AutoLayout可以指定约束的优先级，计算frame时将优先按照满足优先级高的条件进行计算。</li>
</ul>
<p style="text-align: justify;">总结</p></p>

<p><blockquote>Autoresizing Mask是AutoLayout的子集，任何可以用Autoresizing Mask完成的工作都可以用AutoLayout完成。AutoLayout还具备一些Autoresizing Mask不具备的优良特性，以帮助我们更方便地构建界面。</blockquote></p>

<p><hr /></p>

<p><h2 style="text-align: justify;">AutoLayout基本使用方法</h2>
<h3 style="text-align: justify;">Interface Builder</h3>
<p style="text-align: justify;">最简单的使用方法是在IB中直接拖。在IB中任意一个view的File inspector下面，都有Use Autolayout的选择框（没有的同学可以考虑升级一下Xcode了=。=），钩上，然后按照平常那样拖控件就可以了。拖动控件后在左边的view hierarchy栏中会出现Constraints一向，其中就是所有的约束条件。</p>
<p style="text-align: justify;"><img src="http://ww3.sinaimg.cn/mw690/83bbf18dgw1dwxkfbus7qj.jpg" alt="" data-pinit="registered" /></p>
<p style="text-align: justify;">选中某个约束条件后，在右边的Attributes inspector中可以更改约束的条件，距离值和优先度等：
<img src="http://ww2.sinaimg.cn/mw690/83bbf18dgw1dwxklmxul8j.jpg" alt="" data-pinit="registered" /></p>
<p style="text-align: justify;">对于没有自动添加的约束，可以在IB中手动添加。选择需要添加约束的view，点击菜单的Edit-&gt;Pin里的需要的选项，或者是点击IB主视图右下角的<img src="http://ww3.sinaimg.cn/mw690/83bbf18dgw1dwxkrarjvmj.jpg" alt="" />按钮，即可添加格外的约束条件。</p>
<p style="text-align: justify;">可视化的添加不仅很方便直观，而且基本不会出错，是优先推荐的添加约束的方式。但是有时候只靠IB是无法完成某些约束的添加的（比如跨view hierarchy的约束），有时候IB添加的约束不能满足要求，这时就需要使用约束的API进行补充。</p></p>

<p><h3 style="text-align: justify;">手动使用API添加约束</h3>
<h4 style="text-align: justify;">创建</h4>
<p style="text-align: justify;">iOS6中新加入了一个类：NSLayoutConstraint，一个形如这样的约束</p></p>

<p><ul style="text-align: justify;">
	<li>item1.attribute = multiplier ⨉ item2.attribute + constant</li>
</ul>
<p style="text-align: justify;">对应的代码为</p></p>

<p><pre class="lang:objc decode:true ">[NSLayoutConstraint constraintWithItem:button
                             attribute:NSLayoutAttributeBottom
                             relatedBy:NSLayoutRelationEqual
                                toItem:superview
                             attribute:NSLayoutAttributeBottom
                            multiplier:1.0
                              constant:-padding]</pre>
&nbsp;
<p style="text-align: justify;">这对应的约束是“button的底部（y） ＝ superview的底部 －10”。</p></p>

<p><h4 style="text-align: justify;">添加</h4>
<p style="text-align: justify;">在创建约束之后，需要将其添加到作用的view上。UIView（当然NSView也一样）加入了一个新的实例方法：</p></p>

<p><ul style="text-align: justify;">
	<li>-(void)addConstraint:(NSLayoutConstraint *)constraint;</li>
</ul>
<p style="text-align: justify;">用来将约束添加到view。在添加时唯一要注意的是添加的目标view要遵循以下规则：</p></p>

<p><ul style="text-align: justify;">
	<li>对于两个同层级view之间的约束关系，添加到他们的父view上</li>
</ul>
<p style="text-align: justify;"><img src="http://ww1.sinaimg.cn/mw690/83bbf18dgw1dx3236wmnnj.jpg" alt="" data-pinit="registered" /></p></p>

<p><ul style="text-align: justify;">
	<li>对于两个不同层级view之间的约束关系，添加到他们最近的共同父view上</li>
</ul>
<p style="text-align: justify;"><img src="http://ww1.sinaimg.cn/mw690/83bbf18dgw1dx3237dsbxj.jpg" alt="" data-pinit="registered" /></p></p>

<p><ul style="text-align: justify;">
	<li>对于有层次关系的两个view之间的约束关系，添加到层次较高的父view上</li>
</ul>
<p style="text-align: justify;"><img src="http://ww4.sinaimg.cn/mw690/83bbf18dgw1dx32384ardj.jpg" alt="" data-pinit="registered" /></p></p>

<p><h4 style="text-align: justify;">刷新</h4>
<p style="text-align: justify;">可以通过-setNeedsUpdateConstraints和-layoutIfNeeded两个方法来刷新约束的改变，使UIView重新布局。这和CoreGraphic的-setNeedsDisplay一套东西是一样的～</p></p>

<p><h3 style="text-align: justify;">Visual Format Language 可视格式语言</h3>
<p style="text-align: justify;">UIKit团队这次相当有爱，估计他们自己也觉得新加约束的API名字太长了，因此他们发明了一种新的方式来描述约束条件，十分有趣。这种语言是对视觉描述的一种抽象，大概过程看起来是这样的：</p>
<p style="text-align: justify;">accept按钮在cancel按钮右侧默认间距处</p>
<p style="text-align: justify;"><img src="http://ww2.sinaimg.cn/mw690/83bbf18dgw1dx32c2yth4j.jpg" alt="" /></p>
<p style="text-align: justify;"><img src="http://ww4.sinaimg.cn/mw690/83bbf18dgw1dx32c3win2j.jpg" alt="" /></p>
<p style="text-align: justify;"><img src="http://ww3.sinaimg.cn/mw690/83bbf18dgw1dx32c47ab9j.jpg" alt="" /></p>
<p style="text-align: justify;">最后使用VFL（Visual Format Language）描述变成这样：</p></p>

<p><pre class="lang:objc decode:true ">[NSLayoutConstraint constraintsWithVisualFormat:@"[cancelButton]-[acceptButton]" 
                                        options:0 
                                        metrics:nil 
                                          views:viewsDictionary];</pre>
&nbsp;
<p style="text-align: justify;">其中viewsDictionary是绑定了view的名字和对象的字典，对于这个例子可以用以下方法得到对应的字典：</p></p>

<p><pre class="lang:objc decode:true ">UIButton *cancelButton = ... 
UIButton *acceptButton = ... 
viewsDictionary = NSDictionaryOfVariableBindings(cancelButton,acceptButton);</pre>
&nbsp;
<p style="text-align: justify;">生成的字典为</p></p>

<p><pre><code>{ acceptButton = ""; cancelButton = ""; } </code></pre>
<p style="text-align: justify;">当然，不嫌累的话自己手写也未尝不可。现在字典啊数组啊写法相对简化了很多了，因此也不复杂。关于Objective-C的新语法，可以参考我之前的一篇WWDC 2012笔记：<a href="http://www.onevcat.com/2012/06/modern-objective-c/">WWDC 2012 Session笔记——405 Modern Objective-C</a>。</p>
<p style="text-align: justify;">在view名字后面添加括号以及连接处的数字可以赋予表达式更多意义，以下进行一些举例：</p></p>

<p><ul style="text-align: justify;">
	<li>[cancelButton(72)]-12-[acceptButton(50)]
<ul>
	<li>取消按钮宽72point，accept按钮宽50point，它们之间间距12point</li>
</ul>
</li>
	<li>[wideView(&gt;=60@700)]
<ul>
	<li>wideView宽度大于等于60point，该约束条件优先级为700（优先级最大值为1000，优先级越高的约束越先被满足）</li>
</ul>
</li>
	<li>V:[redBox][yellowBox(==redBox)]
<ul>
	<li>竖直布局，先是一个redBox，其下方紧接一个宽度等于redBox宽度的yellowBox</li>
</ul>
</li>
	<li>H:|-[Find]-[FindNext]-[FindField(&gt;=20)]-|
<ul>
	<li>水平布局，Find距离父view左边缘默认间隔宽度，之后是FindNext距离Find间隔默认宽度；再之后是宽度不小于20的FindField，它和FindNext以及父view右边缘的间距都是默认宽度。（竖线&#8217;|‘ 表示superview的边缘）</li>
</ul>
</li>
</ul></p>

<p><hr /></p>

<p><h2 style="text-align: justify;">容易出现的错误</h2>
<p style="text-align: justify;">因为涉及约束问题，因此约束模型下的所有可能出现的问题这里都会出现，具体来说包括两种：</p></p>

<p><ul style="text-align: justify;">
	<li>Ambiguous Layout 布局不能确定</li>
	<li>Unsatisfiable Constraints 无法满足约束</li>
</ul>
<p style="text-align: justify;">布局不能确定指的是给出的约束条件无法唯一确定一种布局，也即约束条件不足，无法得到唯一的布局结果。这种情况一般添加一些必要的约束或者调整优先级可以解决。无法满足约束的问题来源是有约束条件互相冲突，因此无法同时满足，需要删掉一些约束。两种错误在出现时均会导致布局的不稳定和错误，Ambiguous可以被容忍并且选择一种可行布局呈现在UI上，Unsatisfiable的话会无法得到UI布局并报错。</p>
<p style="text-align: justify;">对于不能确定的布局，可以通过调试时暂停程序，在debugger中输入</p></p>

<p><ul style="text-align: justify;">
	<li>po [[UIWindow keyWindow] _autolayoutTrace]</li>
</ul>
<p style="text-align: justify;">来检查是否存在Ambiguous Layout以及存在的位置，来帮助添加条件。另外还有一些检查方法，来查看view的约束和约束状态：</p></p>

<p><ul style="text-align: justify;">
	<li>[view constraintsAffectingLayoutForOrientation/Axis: NSLayoutConstraintOrientationHorizontal/Vertical]</li>
	<li>[view hasAmbiguousLayout]
<ul>
	<li>[view exerciseAmbiguityInLayout]</li>
</ul>
</li>
</ul></p>

<p><hr /></p>

<p><h2 style="text-align: justify;">布局动画</h2>
<p style="text-align: justify;">动画是UI体验的重要部分，更改布局以后的动画也非常关键。说到动画，Core Animation又立功了..自从CA出现以后，所有的动画效果都非常cheap，在auto layout中情况也和collection view里一样，很简单（可以参考<a href="http://www.onevcat.com/2012/08/advanced-collection-view/">WWDC 2012 Session笔记——219 Advanced Collection Views and Building Custom Layouts</a>），只需要把layoutIfNeeded放到animation block中即可～</p></p>

<p><pre class="lang:objc decode:true ">[UIView animateWithDuration:0.5 animations:^{
    [view layoutIfNeeded];
}];</pre>
&nbsp;
<p style="text-align: justify;">如果对block不熟悉的话，可以看看我很早时候写的一篇<a title="Objective-C中的Block" href="http://www.onevcat.com/2011/11/objective-c%e4%b8%ad%e7%9a%84block/">block的文章</a>。</p><!--:--><!--:en-->&nbsp;</p>

<p>&nbsp;</p>

<p><!--:--><!--:ja-->&nbsp;</p>

<p>&nbsp;</p>

<p><!--:--></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[WWDC 2012 Session笔记——219 Advanced Collection Views and Building Custom Layouts]]></title>
    <link href="http://onevcat.com/2012/08/advanced-collection-view/"/>
    <updated>2012-08-28T00:00:00+09:00</updated>
    <id>http://onevcat.com/2012/08/advanced-collection-view</id>
    <content type="html"><![CDATA[<p><!--:zh--><p style="text-align: justify;"><a href="http://www.onevcat.com/wp-content/uploads/2012/08/QQ20120828-3.png"><img class="aligncenter size-full wp-image-984" title="uicollectionview-struct" src="http://www.onevcat.com/wp-content/uploads/2012/08/QQ20120828-3.png" alt="" width="983" height="251" data-pinit="registered" /></a></p>
<p style="text-align: justify;">这是博主的WWDC2012笔记系列中的一篇，完整的笔记列表可以参看<a href="http://www.onevcat.com/tag/wwdc/">这里</a>。如果您是首次来到本站，也许您会有兴趣通过<a href="http://www.onevcat.com/feed">RSS</a>，或者通过页面下方的邮件订阅的方式订阅本站。</p>
<p style="text-align: justify;">在上一篇<a href="http://www.onevcat.com/2012/06/introducing-collection-views/">UICollectionView的入门介绍</a>中，大概地对iOS6新加入的强大的UICollectionView进行了一些说明。在这篇博文中，将结合WWDC2012 Session219：Advanced Collection View的内容，对Collection View进行一个深入的使用探讨，并给出一个自定义的Demo。</p></p>

<p><h2 style="text-align: justify;">UICollectionView的结构回顾</h2>
<p style="text-align: justify;">首先回顾一下Collection View的构成，我们能看到的有三个部分：</p></p>

<p><ul style="text-align: justify;">
	<li>Cells</li>
	<li>Supplementary Views 追加视图 （类似Header或者Footer）</li>
	<li>Decoration Views 装饰视图 （用作背景展示）</li>
</ul>
<p style="text-align: justify;">而在表面下，由两个方面对UICollectionView进行支持。其中之一和tableView一样，即提供数据的UICollectionViewDataSource以及处理用户交互的UICollectionViewDelegate。另一方面，对于cell的样式和组织方式，由于collectionView比tableView要复杂得多，因此没有按照类似于tableView的style的方式来定义，而是专门使用了一个类来对collectionView的布局和行为进行描述，这就是UICollectionViewLayout。</p>
<p style="text-align: justify;">这次的笔记将把重点放在UICollectionViewLayout上，因为这不仅是collectionView和tableView的最重要求的区别，也是整个UICollectionView的精髓所在。</p>
<p style="text-align: justify;"><!--:--><!--more--><!--:zh--></p>
<p style="text-align: justify;">如果对UICollectionView的基本构成要素和使用方法还不清楚的话，可以移步到我之前的一篇笔记：<a href="http://www.onevcat.com/2012/06/introducing-collection-views/">Session笔记——205 Introducing Collection Views</a>中进行一些了解。</p></p>

<p><hr /></p>

<p><h2 style="text-align: justify;">UICollectionViewLayoutAttributes</h2>
<p style="text-align: justify;">UICollectionViewLayoutAttributes是一个非常重要的类，先来看看property列表：</p></p>

<p><ul style="text-align: justify;">
	<li>@property (nonatomic) CGRect frame</li>
	<li>@property (nonatomic) CGPoint center</li>
	<li>@property (nonatomic) CGSize size</li>
	<li>@property (nonatomic) CATransform3D transform3D</li>
	<li>@property (nonatomic) CGFloat alpha</li>
	<li>@property (nonatomic) NSInteger zIndex</li>
	<li>@property (nonatomic, getter=isHidden) BOOL hidden</li>
</ul>
<p style="text-align: justify;">可以看到，UICollectionViewLayoutAttributes的实例中包含了诸如边框，中心点，大小，形状，透明度，层次关系和是否隐藏等信息。和DataSource的行为十分类似，当UICollectionView在获取布局时将针对每一个indexPath的部件（包括cell，追加视图和装饰视图），向其上的UICollectionViewLayout实例询问该部件的布局信息（在这个层面上说的话，实现一个UICollectionViewLayout的时候，其实很像是zap一个delegate，之后的例子中会很明显地看出），这个布局信息，就以UICollectionViewLayoutAttributes的实例的方式给出。</p></p>

<p><hr /></p>

<p><h2 style="text-align: justify;">自定义的UICollectionViewLayout</h2>
<p style="text-align: justify;">UICollectionViewLayout的功能为向UICollectionView提供布局信息，不仅包括cell的布局信息，也包括追加视图和装饰视图的布局信息。实现一个自定义layout的常规做法是继承UICollectionViewLayout类，然后重载下列方法：</p></p>

<p><ul style="text-align: justify;">
	<li>-(CGSize)collectionViewContentSize
<ul>
	<li>返回collectionView的内容的尺寸</li>
</ul>
</li>
	<li>-(NSArray *)layoutAttributesForElementsInRect:(CGRect)rect
<ul>
	<li>返回rect中的所有的元素的布局属性</li>
	<li>返回的是包含UICollectionViewLayoutAttributes的NSArray</li>
	<li>UICollectionViewLayoutAttributes可以是cell，追加视图或装饰视图的信息，通过不同的UICollectionViewLayoutAttributes初始化方法可以得到不同类型的UICollectionViewLayoutAttributes：
<ul>
	<li>layoutAttributesForCellWithIndexPath:</li>
	<li>layoutAttributesForSupplementaryViewOfKind:withIndexPath:</li>
	<li>layoutAttributesForDecorationViewOfKind:withIndexPath:</li>
</ul>
</li>
</ul>
</li>
	<li>-(UICollectionViewLayoutAttributes <em>)layoutAttributesForItemAtIndexPath:(NSIndexPath </em>)indexPath
<ul>
	<li>返回对应于indexPath的位置的cell的布局属性</li>
</ul>
</li>
	<li>-(UICollectionViewLayoutAttributes <em>)layoutAttributesForSupplementaryViewOfKind:(NSString </em>)kind atIndexPath:(NSIndexPath *)indexPath
<ul>
	<li>返回对应于indexPath的位置的追加视图的布局属性，如果没有追加视图可不重载</li>
</ul>
</li>
	<li>-(UICollectionViewLayoutAttributes * )layoutAttributesForDecorationViewOfKind:(NSString<em>)decorationViewKind atIndexPath:(NSIndexPath </em>)indexPath
<ul>
	<li>返回对应于indexPath的位置的装饰视图的布局属性，如果没有装饰视图可不重载</li>
</ul>
</li>
	<li>-(BOOL)shouldInvalidateLayoutForBoundsChange:(CGRect)newBounds
<ul>
	<li>当边界发生改变时，是否应该刷新布局。如果YES则在边界变化（一般是scroll到其他地方）时，将重新计算需要的布局信息。</li>
</ul>
</li>
</ul>
<p style="text-align: justify;">另外需要了解的是，在初始化一个UICollectionViewLayout实例后，会有一系列准备方法被自动调用，以保证layout实例的正确。</p>
<p style="text-align: justify;">首先，-(void)prepareLayout将被调用，默认下该方法什么没做，但是在自己的子类实现中，一般在该方法中设定一些必要的layout的结构和初始需要的参数等。</p>
<p style="text-align: justify;">之后，-(CGSize) collectionViewContentSize将被调用，以确定collection应该占据的尺寸。注意这里的尺寸不是指可视部分的尺寸，而应该是所有内容所占的尺寸。collectionView的本质是一个scrollView，因此需要这个尺寸来配置滚动行为。</p>
<p style="text-align: justify;">接下来-(NSArray *)layoutAttributesForElementsInRect:(CGRect)rect被调用，这个没什么值得多说的。初始的layout的外观将由该方法返回的UICollectionViewLayoutAttributes来决定。</p>
<p style="text-align: justify;">另外，在需要更新layout时，需要给当前layout发送 -invalidateLayout，该消息会立即返回，并且预约在下一个loop的时候刷新当前layout，这一点和UIView的setNeedsLayout方法十分类似。在-invalidateLayout后的下一个collectionView的刷新loop中，又会从prepareLayout开始，依次再调用-collectionViewContentSize和-layoutAttributesForElementsInRect来生成更新后的布局。</p></p>

<p><hr /></p>

<p><h2 style="text-align: justify;">Demo</h2>
<p style="text-align: justify;">说了那么多，其实还是Demo最能解决问题。Apple官方给了一个flow layout和一个circle layout的例子，都很经典，需要的同学可以从<a href="http://www.onevcat.com/wp-content/uploads/2012/08/advanced-collection-view-demo.zip">这里下载</a>。</p></p>

<p><h3 style="text-align: justify;">LineLayout——对于个别UICollectionViewLayoutAttributes的调整</h3>
<p style="text-align: justify;">先看LineLayout，它继承了UICollectionViewFlowLayout这个Apple提供的基本的布局。它主要实现了单行布局，自动对齐到网格以及当前网格cell放大三个特性。如图：</p>
<p style="text-align: justify;"><a href="http://www.onevcat.com/wp-content/uploads/2012/08/QQ20120828-1-e1346145550225.png"><img class="aligncenter size-full wp-image-988" title="collection-view-line-layout" src="http://www.onevcat.com/wp-content/uploads/2012/08/QQ20120828-1-e1346145550225.png" alt="" width="800" height="264" data-pinit="registered" /></a></p>
<p style="text-align: justify;">先看LineLayout的init方法：</p></p>

<p><pre>-(id)init
{
    self = [super init];
    if (self) {
        self.itemSize = CGSizeMake(ITEM_SIZE, ITEM_SIZE);
        self.scrollDirection = UICollectionViewScrollDirectionHorizontal;
        self.sectionInset = UIEdgeInsetsMake(200, 0.0, 200, 0.0);
        self.minimumLineSpacing = 50.0;
    }
    return self;
}</pre>
<p style="text-align: justify;">self.sectionInset = UIEdgeInsetsMake(200, 0.0, 200, 0.0); 确定了缩进，此处为上方和下方各缩进200个point。由于cell的size已经定义了为200x200，因此屏幕上在缩进后就只有一排item的空间了。</p>
<p style="text-align: justify;">self.minimumLineSpacing = 50.0; 这个定义了每个item在水平方向上的最小间距。</p>
<p style="text-align: justify;">UICollectionViewFlowLayout是Apple为我们准备的开袋即食的现成布局，因此之前提到的几个必须重载的方法中需要我们操心的很少，即使完全不重载它们，现在也可以得到一个不错的线状一行的gridview了。而我们的LineLayout通过重载父类方法后，可以实现一些新特性，比如这里的动对齐到网格以及当前网格cell放大。</p>
<p style="text-align: justify;">自动对齐到网格</p></p>

<p><pre>- (CGPoint)targetContentOffsetForProposedContentOffset: (CGPoint)proposedContentOffset withScrollingVelocity:(CGPoint)velocity
{
    //proposedContentOffset是没有对齐到网格时本来应该停下的位置
    CGFloat offsetAdjustment = MAXFLOAT;
    CGFloat horizontalCenter = proposedContentOffset.x + (CGRectGetWidth(self.collectionView.bounds) / 2.0);</pre></p>

<p>    CGRect targetRect = CGRectMake(proposedContentOffset.x, 0.0, self.collectionView.bounds.size.width, self.collectionView.bounds.size.height);<br />
    NSArray* array = [super layoutAttributesForElementsInRect:targetRect];</p>

<p>    //对当前屏幕中的UICollectionViewLayoutAttributes逐个与屏幕中心进行比较，找出最接近中心的一个<br />
    for (UICollectionViewLayoutAttributes* layoutAttributes in array) {<br />
        CGFloat itemHorizontalCenter = layoutAttributes.center.x;<br />
        if (ABS(itemHorizontalCenter - horizontalCenter) &lt; ABS(offsetAdjustment)) {<br />
        offsetAdjustment = itemHorizontalCenter - horizontalCenter;<br />
        }<br />
    }    <br />
    return CGPointMake(proposedContentOffset.x + offsetAdjustment, proposedContentOffset.y);<br />
}
<p style="text-align: justify;">当前item放大</p></p>

<p><pre>-(NSArray*)layoutAttributesForElementsInRect:(CGRect)rect
{
    NSArray* array = [super layoutAttributesForElementsInRect:rect];
    CGRect visibleRect;
    visibleRect.origin = self.collectionView.contentOffset;
    visibleRect.size = self.collectionView.bounds.size;</pre></p>

<p>    for (UICollectionViewLayoutAttributes* attributes in array) {<br />
        if (CGRectIntersectsRect(attributes.frame, rect)) {<br />
            CGFloat distance = CGRectGetMidX(visibleRect) - attributes.center.x;<br />
            CGFloat normalizedDistance = distance / ACTIVE_DISTANCE;<br />
            if (ABS(distance) &lt; ACTIVE_DISTANCE) {<br />
                CGFloat zoom = 1 + ZOOM_FACTOR*(1 - ABS(normalizedDistance));<br />
                attributes.transform3D = CATransform3DMakeScale(zoom, zoom, 1.0);<br />
                attributes.zIndex = 1;<br />
            }<br />
        }<br />
    }<br />
    return array;<br />
}
<p style="text-align: justify;">对于个别UICollectionViewLayoutAttributes进行调整，以达到满足设计需求是UICollectionView使用中的一种思路。在根据位置提供不同layout属性的时候，需要记得让-shouldInvalidateLayoutForBoundsChange:返回YES，这样当边界改变的时候，-invalidateLayout会自动被发送，才能让layout得到刷新。</p></p>

<p><h3 style="text-align: justify;">CircleLayout——完全自定义的Layout，添加删除item，以及手势识别</h3>
<p style="text-align: justify;">CircleLayout的例子稍微复杂一些，cell分布在圆周上，点击cell的话会将其从collectionView中移出，点击空白处会加入一个cell，加入和移出都有动画效果。</p>
<p style="text-align: justify;">这放在以前的话估计够写一阵子了，而得益于UICollectionView，基本只需要100来行代码就可以搞定这一切，非常cheap。通过CircleLayout的实现，可以完整地看到自定义的layout的编写流程，非常具有学习和借鉴的意义。</p>
<p style="text-align: justify;"><img src="http://www.onevcat.com/wp-content/uploads/2012/06/QQ20120630-5.png" alt="CircleLayout" data-pinit="registered" /></p>
<p style="text-align: justify;">首先，布局准备中定义了一些之后计算所需要用到的参数。</p></p>

<p><pre>-(void)prepareLayout
{   //和init相似，必须call super的prepareLayout以保证初始化正确
    [super prepareLayout];</pre></p>

<p>    CGSize size = self.collectionView.frame.size;<br />
    _cellCount = [[self collectionView] numberOfItemsInSection:0];<br />
    _center = CGPointMake(size.width / 2.0, size.height / 2.0);<br />
    _radius = MIN(size.width, size.height) / 2.5;<br />
}
<p style="text-align: justify;">其实对于一个size不变的collectionView来说，除了_cellCount之外的中心和半径的定义也可以扔到init里去做，但是显然在prepareLayout里做的话具有更大的灵活性。因为每次重新给出layout时都会调用prepareLayout，这样在以后如果有collectionView大小变化的需求时也可以自动适应变化。</p>
<p style="text-align: justify;">然后，按照UICollectionViewLayout子类的要求，重载了所需要的方法：</p></p>

<p><pre>//整个collectionView的内容大小就是collectionView的大小（没有滚动）
-(CGSize)collectionViewContentSize
{
    return [self collectionView].frame.size;
}</pre></p>

<p>//通过所在的indexPath确定位置。<br />
- (UICollectionViewLayoutAttributes *)layoutAttributesForItemAtIndexPath:(NSIndexPath *)path<br />
{
    UICollectionViewLayoutAttributes* attributes = [UICollectionViewLayoutAttributes layoutAttributesForCellWithIndexPath:path]; //生成空白的attributes对象，其中只记录了类型是cell以及对应的位置是indexPath</p>

<p>    //配置attributes到圆周上<br />
    attributes.size = CGSizeMake(ITEM_SIZE, ITEM_SIZE);<br />
    attributes.center = CGPointMake(_center.x + _radius * cosf(2 * path.item * M_PI / _cellCount), _center.y + _radius * sinf(2 * path.item * M_PI / _cellCount));<br />
    return attributes;<br />
}</p>

<p>//用来在一开始给出一套UICollectionViewLayoutAttributes<br />
-(NSArray*)layoutAttributesForElementsInRect:(CGRect)rect<br />
{
    NSMutableArray* attributes = [NSMutableArray array];<br />
    for (NSInteger i=0 ; i &lt; self.cellCount; i++) {<br />
        //这里利用了-layoutAttributesForItemAtIndexPath:来获取attributes<br />
        NSIndexPath* indexPath = [NSIndexPath indexPathForItem:i inSection:0];<br />
        [attributes addObject:[self layoutAttributesForItemAtIndexPath:indexPath]];<br />
    }    <br />
    return attributes;<br />
}
<p style="text-align: justify;">现在已经得到了一个circle layout。为了实现cell的添加和删除，需要为collectionView加上手势识别，这个很简单，在ViewController中：</p></p>

<p><pre>UITapGestureRecognizer* tapRecognizer = [[UITapGestureRecognizer alloc] initWithTarget:self action:@selector(handleTapGesture:)];
[self.collectionView addGestureRecognizer:tapRecognizer];</pre>
<p style="text-align: justify;">对应的处理方法handleTapGesture:为</p></p>

<p><pre>- (void)handleTapGesture:(UITapGestureRecognizer *)sender {
    if (sender.state == UIGestureRecognizerStateEnded) {
        CGPoint initialPinchPoint = [sender locationInView:self.collectionView];
        NSIndexPath* tappedCellPath = [self.collectionView indexPathForItemAtPoint:initialPinchPoint]; //获取点击处的cell的indexPath
        if (tappedCellPath!=nil) { //点击处没有cell
            self.cellCount = self.cellCount - 1;
            [self.collectionView performBatchUpdates:^{
                [self.collectionView deleteItemsAtIndexPaths:[NSArray arrayWithObject:tappedCellPath]];
            } completion:nil];
        } else {
            self.cellCount = self.cellCount + 1;
            [self.collectionView performBatchUpdates:^{
                [self.collectionView insertItemsAtIndexPaths:[NSArray arrayWithObject:[NSIndexPath indexPathForItem:0 inSection:0]]];
            } completion:nil];
        }
    }
}</pre>
<p style="text-align: justify;">performBatchUpdates:completion: 再次展示了block的强大的一面..这个方法可以用来对collectionView中的元素进行批量的插入，删除，移动等操作，同时将触发collectionView所对应的layout的对应的动画。相应的动画由layout中的下列四个方法来定义：</p></p>

<p><ul style="text-align: justify;">
	<li>initialLayoutAttributesForAppearingItemAtIndexPath:</li>
	<li>initialLayoutAttributesForAppearingDecorationElementOfKind:atIndexPath:</li>
	<li>finalLayoutAttributesForDisappearingItemAtIndexPath:</li>
	<li>finalLayoutAttributesForDisappearingDecorationElementOfKind:atIndexPath:</li>
</ul>
<div style="text-align: justify;"><span style="color: #ff0000;">更正：正式版中API发生了变化（而且不止一次变化）。</span></div>
<div style="text-align: justify;"><span style="color: #ff0000;">initialLayoutAttributesForInsertedItemAtIndexPath:在正式版中已经被废除。现在在insert或者delete之前，prepareForCollectionViewUpdates:会被调用，可以使用这个方法来完成添加/删除的布局。关于更多这方面的内容以及新的示例demo，可以参看<a href="http://markpospesel.wordpress.com/2012/10/25/fixing-circlelayout/">这篇博文</a>（需要翻墙）。新的示例demo在Github上也有，<a href="https://github.com/mpospese/CircleLayout">链接</a>。</span></div>
<p style="text-align: justify;">在CircleLayout中，实现了cell的动画。</p></p>

<p><pre>//插入前，cell在圆心位置，全透明
- (UICollectionViewLayoutAttributes *)initialLayoutAttributesForInsertedItemAtIndexPath:(NSIndexPath *)itemIndexPath
{
    UICollectionViewLayoutAttributes* attributes = [self layoutAttributesForItemAtIndexPath:itemIndexPath];
    attributes.alpha = 0.0;
    attributes.center = CGPointMake(_center.x, _center.y);
    return attributes;
}</pre></p>

<p>//删除时，cell在圆心位置，全透明，且只有原来的1/10大<br />
- (UICollectionViewLayoutAttributes *)finalLayoutAttributesForDeletedItemAtIndexPath:(NSIndexPath *)itemIndexPath<br />
{
    UICollectionViewLayoutAttributes* attributes = [self layoutAttributesForItemAtIndexPath:itemIndexPath];<br />
    attributes.alpha = 0.0;<br />
    attributes.center = CGPointMake(_center.x, _center.y);<br />
    attributes.transform3D = CATransform3DMakeScale(0.1, 0.1, 1.0);<br />
    return attributes;<br />
}
<p style="text-align: justify;">在插入或删除时，将分别以插入前和删除后的attributes和普通状态下的attributes为基准，进行UIView的动画过渡。而这一切并没有很多代码要写，几乎是free的，感谢苹果…</p></p>

<p><hr /></p>

<p><h2 style="text-align: justify;">布局之间的切换</h2>
<p style="text-align: justify;">有时候可能需要不同的布局，Apple也提供了方便的布局间切换的方法。直接更改collectionView的collectionViewLayout属性可以立即切换布局。而如果通过setCollectionViewLayout:animated:，则可以在切换布局的同时，使用动画来过渡。对于每一个cell，都将有对应的UIView动画进行对应，又是一个接近free的特性。</p>
<p style="text-align: justify;">对于我自己来说，UICollectionView可能是我转向iOS 6 SDK的最具有吸引力的特性之一，因为UIKit团队的努力和CoreAnimation的成熟，使得创建一个漂亮优雅的UI变的越来越简单了。可以断言说UICollectionView在今后的iOS开发中，一定会成为和UITableView一样的强大和最常用的类之一。在iOS 6还未正式上市前，先对其特性进行一些学习，以期尽快能使用新特性来简化开发流程，可以说是非常值得的。</p><!--:--><!--:en-->&nbsp;</p>

<p>&nbsp;</p>

<p><!--:--><!--:ja-->&nbsp;</p>

<p>&nbsp;</p>

<p><!--:--></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[学生时代的终焉]]></title>
    <link href="http://onevcat.com/2012/08/not-a-studen/"/>
    <updated>2012-08-11T00:00:00+09:00</updated>
    <id>http://onevcat.com/2012/08/not-a-studen</id>
    <content type="html"><![CDATA[<p><!--:zh--><p style="text-align: justify;"><a href="http://www.onevcat.com/wp-content/uploads/2012/08/me.jpg"><img class="aligncenter size-full wp-image-973" title="student" src="http://www.onevcat.com/wp-content/uploads/2012/08/me.jpg" alt="" width="838" height="256" data-pinit="registered" /></a></p>
<p style="text-align: justify;">距离研究生毕业，已经过去一个月了。在毕业季的离愁和从学生身份的转变的怅惘渐渐淡去时，大概是时候对我的整个的大学生涯做一个小结了。很多事情的记忆已经在时间的冲蚀中变得模糊了，但是也有一些事情比其他的琐事更深地印刻在了记忆之中，也许简单的梳理和回忆，无法把这七年刻画的细致入微，但是作为轮廓的勾勒和回顾，却已然绰绰有余了。（写完之后终于发现又被写成标准流水账了，这个从小学开始的写作文的毛病在不写博客两个月之后再次复发了哎…）</p></p>

<p><h3 style="text-align: justify;">悲剧的开始</h3>
<p style="text-align: justify;">大学本科加上研究生，七年时间，说长不长，说短却也不短。在经历了中学时代的辉煌之后，我终于还是在大学里找到了自己真正的位置。如果大学不在清华，如果不在清华里可谓最变态的电子系，如果不在清华里可谓最变态的电子系中最变态的班的话，也许我的大学生活会完全不一样吧。</p>
<p style="text-align: justify;">这里有在央视热门节目露过脸的高考状元，</p>
<p style="text-align: justify;">这里有“百度一下”能检出几万条结果的全省第一，</p>
<p style="text-align: justify;">这里有奥数好几块金牌的超级达人，</p>
<p style="text-align: justify;">这里有中学带了五个社团还能考到第一的变态，</p>
<p style="text-align: justify;">这里有之后叱咤清华被老师们认可为几十年难遇的特奖得主和学生会主席。</p>
<p style="text-align: justify;">当然，这里还有我，一个基本是以倒数一二的成绩分到这个班的可怜的差生。虽然说来之前已经被打过预防针，但是我真的不知道，这七年，会这么开始。</p>
<p style="text-align: justify;"><!--:--><!--more--><!--:zh--></p>
<p style="text-align: justify;">当每个人都在叫嚷着自己不会啊考试要挂了啊的时候，我还暗自得意过自己貌似这些题都还算能做一做。最后结果出来发现自己在为自己的80分沾沾自喜的时候，周围基本都是一片95+，那种&#8221;你是一个傻逼&#8221;的打击对于那时的我来说着实不轻。对于从一个教育相对落后的地区出来的学生来说，这可能是很正常很普遍的现象，但是从遥遥领先到远远落后，这样的落差，一时间确实难以接受。不过几次下来，麻木之后，也就对自己所处的位置心安理得了。当时为自己找到的借口是这些东西别人高中里都学过或者接触过，而自己高中时一不搞竞赛二也从来没自己私下刻苦学习过，所以一开始起点就落后很多了。学习这个东西，就像F1赛车一样，发车的时候落后，之后想赶上的话，要付出的代价可要大得多，所以得过且过了…</p></p>

<p><h3 style="text-align: justify;">一点点改变</h3>
<p style="text-align: justify;">还好之后不久便觉得这样的想法实在很可恶…大二的挂科犹如当头棒喝。本科有整整四年的时间，这比初中的三年和高中的三年都要多，而且这四年时间中真正属于自己的时间很多很多。想要努力学习的话，不一定能在这里出类拔萃，但是有所斩获却是毋庸置疑。有句话很好，上帝给每个人都基本公平地发了时间这种万能货币，而一个人，想要怎么样的生活，想要成为怎样的人，与他把时间这种货币用来换了什么有莫大关系。大一和大二的公共课程和电子通讯方向的学习让我感到十分疲惫，我感到的是时间的浪费。而这时正好有机会在专业上进行一个细分，可以选择继续电子或者转为微电子方向。</p>
<p style="text-align: justify;">其实这个时候的境遇和我高一结束后文理分班和校区迁移那时候很像。高一的时候的状况真是糟糕透顶，每天上学放学路上疲惫不堪，加上进入高中时相似的心理落差（当然没有从高中到大学差距这么大），让我几乎无法专于学习了。当时也正好遇上了分班和校址迁移，让我有机会得到喘息，从而有了一个新的开始。我当然希望这次也能有同样的效果，于是毫不犹豫的选择了转到新的专业去。</p>
<p style="text-align: justify;">事实证明了这是一个明智的选择。我也许真的是那种喜欢去适应，喜欢去改变的人吧。有时候奶酪被拿走了，总会喜欢去寻找更新鲜的奶酪，也许是自己潜意识中的那只嗅嗅，在不断指引着我吧（笑）。总之，在微电的这段时光还是很快乐的。在这里虽然在绩点上也没什么了不起的突破，但是却在感情上找到了归宿。其实这么说来，到现在为止，我在自己人生的每个阶段，都很好的完成了我的任务：小学初中是快乐地生活成长，高中考到一个很好的大学，大学时找到很好的伴侣。虽然种种不顺，但是看起来却是不折不扣的成功呐…</p></p>

<p><h3 style="text-align: justify;">继续努力</h3>
<p style="text-align: justify;">在好不容易真正习惯了清华的生活的时候，本科也快毕业了。靠着本科后两年拉回来的绩点，在本科最后踩着线随大流保了研。那时候真的没有想过继续深造和工作哪个好，也不太明白读研意味着什么。只是盲目地从众，而等我真正明白的时候，硕士都已经快毕业了。</p>
<p style="text-align: justify;">其实硕士期间我是很幸运的，因为遇到了一位真的非常非常非常开明的导师。对比起很多其他同学的导师，我的导师几乎具备了一切优点：发钱多，派活少，不push，除了不太请我们吃饭以外，已经和忘年交的朋友差不多了。所以在硕士阶段，属于自己的时间也有很多，也正是以此为条件，我有机会仔细思考我真正想要的和喜欢的东西是什么。</p>
<p style="text-align: justify;">首先，肯定不是研究。一看论文就犯困，一做试验就想逃，这些特质决定了必然不会是一个好的科研人员。我一直认为很多科学研究是毫无意义并且对这个世界是不会有任何改变的（特别是在中国，对然这句话肯定是错的，不过这就是我的想法）。国内的科研环境，就我所看到的号称中国最好的大学之一来说，也满满充斥着拉关系跑经费，报批各种各样的项目，面临无穷无尽的审计，大家真正忙的一切，都和科研本身没什么关系，而最后往往就靠几个真正还不那么讨厌科研的学生的寒碜的所谓“成果”来应付课题最终检查。在这方面，我完全没有入门，也并不是太了解真正的科研的感觉应该是怎么样的。但是在这里，我体会到的是一种低效和浑噩，从真心里，我不喜欢这样的生活。</p>
<p style="text-align: justify;">为了尽量不在科研上花过多的时间，我选了一个非常奇葩的研究方向，做着前人从未做过的试验。因为课题很新，和研究组里所有人的课题都基本没有交集，导师也对新的方法表示闻所未闻。于是我几乎失去了所有的来自研究组的指导和支持，独自一人在黑暗中摸索。但是好处是，我做的试验没有其他人做过，因此我的结果也就没有人能够给出权威的评判，因为在这个领域其实我就是权威。那种感觉，真心不错。</p>
<p style="text-align: justify;">但是这样做的目的，其实是解放自己的时间。不再被无数的试验束缚的同时，我开始尝试走向高效，去做一些自己喜欢做的事情。其实，每个人在青春的时候都应该有那么一段奋斗的历史，这样才不至于在老去后回首时发现一片苍白。拥有狂热的兴趣爱好也罢，全身心地投入某件事情也罢，都会在十几年甚至几十年后成为一段非常美好的回忆。努力过做过，在这个世界上留下一些什么东西，能够时不时被人想起，有时候，存在感和被认同感，还是十分重要的。</p></p>

<p><h3 style="text-align: justify;">新的开始</h3>
<p style="text-align: justify;">找工作的那段时间还是相当郁闷的。虽说好歹算是名校毕业，但是一样四处碰壁。首先我很个性的做了一份比较非主流的简历，这直接导致了所有的正统企业都把我拒之门外（其实应该是我把他们拒之门外吧，233）；接着，投出去的一些简历直接没有了回音，估计是没见过清华的学生去投他们，觉得是在调戏？但是我真的没有乱投简历啊，给了简历的企业都是我真的想去的地方啊；最后，给了笔试的企业的各种笔试基本都没通过，各种请你写出XX算法，写你妹啊我木有学过啊有木有..而且在我做了这些项目以后我就觉得算法什么的就是扯淡啊有木有，你招的是码农啊，又不是计算机科学家，你要的那些算法google一下不就完事儿了。</p>
<p style="text-align: justify;">于是，我好像是被所有的中国企业抛弃了，或者好听一点的话，是中国这些企业都和自己相性不符吧，真的，没有任何一家中国企业愿意给我offer，无奈最后只能去日本了。</p>
<p style="text-align: justify;">然后，顺利的毕业了。不过毕业前的那段日子还是相当难熬的，每天白天在实验室待一整天，做试验整理数据攒论文不亦乐乎，晚上到兼职的地方作项目有时候deadline前忙到夜里两三点的时候也有，周末两天为了之后的工作还要到北语上课。如此高强度的无休生活如果可能一个月两个月的话还好，再长的话可能真的要崩溃掉。幸运的是我没感到什么太大压力就撑下来了，可能以后遇到什么时间上的压力的话，想想这段狗一般的经历就能平静许多了吧…</p>
<p style="text-align: justify;">离开清华的一个月里，都在北语混迹。每天过着标准的学生生活，上课，食堂，宿舍。只不过上课由模电课、数电课、工艺课变成了日语课、日语课、日语课，食堂由麻辣烫、煎鸡饭、铁板烧变成了超市鸡、超市鸡、超市鸡，宿舍从逛论坛、打魔兽、侃大山变成了写代码、写代码、写代码。不过还好这种生活也就还有两周就结束了，再之后是回家，好好待上一个月。这应该是我最后一个这么长的假期了吧，之后的新的生活，应该会很忙碌。</p>
<p style="text-align: justify;">大学的生活，很值得回忆。不管以后怎样NB的我们，可能永远都忘不了这段SB的日子。如果用一句话总结这七年，那不妨抄一句游戏台词：虽有遗憾，却无后悔。</p>
<p style="text-align: justify;">流水账结束。今后，祝自己天天开心，愿自己继续加油。</p><!--:--><!--:en-->&nbsp;</p>

<p><!--:--><!--:ja-->&nbsp;</p>

<p><!--:--></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pomodoro Do - 拖延症患者的福音]]></title>
    <link href="http://onevcat.com/2012/07/pomodoro-do-%E6%8B%96%E5%BB%B6%E7%97%87%E6%82%A3%E8%80%85%E7%9A%84%E7%A6%8F%E9%9F%B3/"/>
    <updated>2012-07-25T00:00:00+09:00</updated>
    <id>http://onevcat.com/2012/07/pomodoro-do-拖延症患者的福音</id>
    <content type="html"><![CDATA[<p><!--:zh--><p style="text-align: center;"><img title="PomodoroDo Logo" src="http://pomo.onevcat.com/img/Icon-50.png" alt="" width="282" height="141" data-pinit="registered" /></p>
<p style="text-align: justify;"><span style="color: #ff0000;"><em>由于完全是自己完成的应用啦，所以详细介绍就写的偏向广告一点吧～欢迎大家购买使用，并给我提意见哦～我会不断完善这款app的。</em></span></p></p>

<p><ul>
	<li>App Store地址：<a href="http://itunes.apple.com/cn/app/pomodoro-do/id533469911?ls=1&amp;mt=8">http://itunes.apple.com/cn/app/pomodoro-do/id533469911?ls=1&amp;mt=8</a></li>
	<li>Pomodoro Do官方主页：<a href="http://pomo.onevcat.com/">http://pomo.onevcat.com/</a></li>
	<li>i果儿评测：<a href="http://www.iguor.com/4050.html">Pomodoro Do——拖延症什么的，我才不怕呢</a></li>
	<li>PunApp：<a href="http://punapp.com/review/article/7437">用一顆番茄來改變你的人生 – Pomodoro Do 評測</a></li>
</ul>
<p style="text-align: justify;"></p></p>

<p><h2 style="text-align: justify;">什么是Pomodoro Do</h2>
<p style="text-align: justify;">一款新鲜上架的番茄工作法辅助应用，功能上十分齐全，从自定义时间到历史统计和推送都很完整。这款应用加入了成就系统和箴言系统的创新，让用户自然地养成使用番茄工作法的习惯，从而提高效率。有拖延症和想提高效率的读者可以试试看这款应用。</p>
<p style="text-align: justify;">拖延症是现在颇为流行的一个说法，人们在习惯网络带来的便利同时也容易被网络分散太多的时间，相信大家多少都有点拖延症患者的感觉，每天工作开始总要那么一些时间浏览一下网页、收收邮件才能进入学习或者工作状态，或者工作到一半不知不觉地就开始刷刷微博，时间不知不觉就过去了，但是手上的事儿却远没做完。这款应用对于那些希望告别拖延症的用户来说正是瞌睡送来的枕头，只要您有一点决心，就可以显著改善拖延症的状况。</p>
<p style="text-align: justify;">我们先来简单了解一下番茄工作法：所谓番茄工作法，就是设定一个任务，将番茄时间设为25分钟，专注工作，中途不允许做任何与该任务无关的事，直到番茄时钟响起，短暂休息一下（5分钟）完成一个番茄时段，每4个番茄时段有一个长休息。通过番茄工作法可以有效提升集中力和注意力。不太了解的朋友对于番茄工作法的详细介绍可以<a href="http://baike.baidu.com/view/5259318.htm">百度一下</a>，E文好的朋友可以直接看看<a href="http://www.pomodorotechnique.com/">番茄工作法的官方网站</a>哦。</p>
<p style="text-align: justify;"><!--:--><!--more--><!--:zh--></p></p>

<p><hr /></p>

<p><h2 style="text-align: justify;">详细介绍</h2>
<h3 style="text-align: justify;">主界面</h3>
<p style="text-align: justify;">应用打开后就直接是主界面。主界面十分简洁美观，深灰色的主题体现了稳重大方。上方为番茄计时框，下方为今天的历史记录，计时框里的小喇叭可以快速开关声音。</p>
<img class="aligncenter" title="主界面" src="http://i.minus.com/jsa8GEHqQcEzv_e.jpg" alt="" width="286" height="429" data-pinit="registered" />   <img class="aligncenter" title="抽屉菜单" src="http://i.minus.com/jbbVzDlANOqkXZ_e.jpg" alt="" width="286" height="429" data-pinit="registered" />
<h3>新建</h3>
一个番茄任务。点击右上角的“+”号，应用切换到了任务设定的界面，可以设定任务时长，任务名称，选择向社交网络共享，文本框里会随机出现励志箴言，也可以自己进行编辑。设置完成以后，一个番茄时间就开始计时了。</p>

<p><img class="aligncenter" title="新页面" src="http://i.minus.com/j3bzTZSKFOR1h_e.jpg" alt="" width="286" height="429" data-pinit="registered" />
<h3>推送提醒</h3>
将手机放在一边专注于预设的任务，待一个番茄时间结束时，PomodoroDo会将手机从睡眠中摇醒，用推送信息告诉你，你完成了一个番茄。</p>

<p><img class="aligncenter" title="推送" src="http://i.minus.com/jAcQCqnYvQEYA_e.jpg" alt="" width="286" height="429" data-pinit="registered" />
<h3>打断和箴言</h3>
在做一个番茄任务的时候，有事情打扰，我们点击右上角的“X”，可以根据具体情况选择暂停或者打断。如果可以很快回到番茄任务来，选择暂停，有15秒的时间处理问题，如果是费时的紧急事件，就只能选择打断，放弃这个任务了。未能完成的任务也会出现在主界面的历史记录里。回顾一天的番茄任务完成情况，会对这一天的工作情况有个直观的了解，随附的励志箴言也让人充满斗志。</p>

<p><img class="aligncenter" title="打断和箴言" src="http://i.minus.com/j9tugJa3rhgue_e.jpg" alt="" width="286" height="429" data-pinit="registered" />
<h3>统计功能</h3>
回到主界面，我们试着按一下左上角的按钮，出现了菜单界面。其中的任务和历史分别根据任务内容和日期对您做过的番茄任务进行统计。这是这款番茄工作法应用的一大亮点，可以方便用户适时对自己一段时间以来的任务情况做一个总结和调整。</p>

<p><img class="aligncenter" title="项目统计" src="http://i.minus.com/jqwcnJvMJZ3XW_e.jpg" alt="" width="286" height="429" data-pinit="registered" />   <img class="aligncenter" title="时间统计" src="http://i.minus.com/jXhxIj3nicDCV_e.jpg" alt="" width="286" height="429" data-pinit="registered" />
<h3>成就系统</h3>
我们看到，菜单中还有成就系统，在时间管理应用中添加成就系统无疑提高了应用的趣味性，在努力实现新成就的同时，您又向高效管理自己的时间迈近了一步。</p>

<p><img class="aligncenter" title="成就" src="http://i.minus.com/jbtP7LC9fQbimQ_e.jpg" alt="" width="286" height="429" data-pinit="registered" />
<h3>灵活设置</h3>
设定菜单中可以设置默认番茄时间、音效开关和社交网络管理。另外比较值得注意的是可以选择箴言的语言，目前该应用支持中文、英文和日文。对于正在学习英语和日语的用户来说，换换箴言的语言类型会有意外的收获呢。</p>

<p><img class="aligncenter" title="设置" src="http://i.minus.com/jbu2R995HUwR0_e.jpg" alt="" width="286" height="429" data-pinit="registered" /></p>

<p><hr /></p>

<p><h2>总结</h2>
AppStore上也有不少番茄工作法的应用。相比起来，Pomodoro Do的话，在使用习惯上可能更适合大家一些，另外功能上也非常齐全。 另外相比起来，这款番茄计时器的界面简洁细腻一些，操作流畅，界面可滑动切换和操作，是一款精致的应用。利用番茄工作法，减少对时间的焦虑，使用户快速进入注意力高度集中的状态，利用适当的工作-休息周期，提高一天的工作和学习效率。最后抄一下AppStore中自己总结的应用特点：
<blockquote>1、不拘泥于番茄工作法推荐的25分钟-5分钟，灵活的番茄和休息时间，根据个人特点指定效率计划；<br />
2、加入后台提醒，开始番茄后立即开始工作。达到预定时间后将提醒您进行下一阶段；<br />
3、社交网络分享，自我激励，让朋友帮助您提高效率，让相关人士了解您的工作进展和专注；<br />
4、每个番茄都对应一句箴言，内心平静方可成就大业；<br />
5、丰富的成就系统，照目标提高效率，帮助您建立良好习惯；<br />
6、完整的番茄记录，帮助您总结和回顾您的效率情况。</blockquote>
对于有提高自己效率和减少时间浪费的读者，可以推荐尝试一下～ 简单的任务设计和使用方法，在iPhone上实践番茄工作法，就能快速提高自己的工作和学习效率。
<ul>
	<li>App Store地址：<a href="http://itunes.apple.com/cn/app/pomodoro-do/id533469911?ls=1&amp;mt=8">http://itunes.apple.com/cn/app/pomodoro-do/id533469911?ls=1&amp;mt=8</a></li>
	<li>Pomodoro Do官方主页：<a href="http://pomo.onevcat.com/">http://pomo.onevcat.com/</a></li>
	<li>i果儿评测：<a href="http://www.iguor.com/4050.html">Pomodoro Do——拖延症什么的，我才不怕呢</a></li>
	<li>PunApp：<a href="http://punapp.com/review/article/7437">用一顆番茄來改變你的人生 – Pomodoro Do 評測</a></li>
</ul><!--:--><!--:en-->&nbsp;</p>

<p><!--:--><!--:ja-->&nbsp;</p>

<p><!--:--></p>
]]></content>
  </entry>
  
</feed>
