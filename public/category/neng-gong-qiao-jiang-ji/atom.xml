<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 能工巧匠集 | OneV's Den]]></title>
  <link href="http://onevcat.com/category/neng-gong-qiao-jiang-ji/atom.xml" rel="self"/>
  <link href="http://onevcat.com/"/>
  <updated>2014-02-08T18:12:31+09:00</updated>
  <id>http://onevcat.com/</id>
  <author>
    <name><![CDATA[onevcat]]></name>
    <email><![CDATA[onev@onevcat.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[宏定义的黑魔法 - 宏菜鸟起飞手册]]></title>
    <link href="http://onevcat.com/2014/01/black-magic-in-macro/"/>
    <updated>2014-01-17T09:56:00+09:00</updated>
    <id>http://onevcat.com/2014/01/black-magic-in-macro</id>
    <content type="html"><![CDATA[<p><img src="http://img.onevcat.com/2014/define-title.png" alt="Happy define :)" /></p>

<p>宏定义在C系开发中可以说占有举足轻重的作用。底层框架自不必说，为了编译优化和方便，以及跨平台能力，宏被大量使用，可以说底层开发离开define将寸步难行。而在更高层级进行开发时，我们会将更多的重心放在业务逻辑上，似乎对宏的使用和依赖并不多。但是使用宏定义的好处是不言自明的，在节省工作量的同时，代码可读性大大增加。如果想成为一个能写出漂亮优雅代码的开发者，宏定义绝对是必不可少的技能（虽然宏本身可能并不漂亮优雅XD）。但是因为宏定义对于很多人来说，并不像业务逻辑那样是每天会接触的东西。即使是能偶尔使用到一些宏，也更多的仅仅只停留在使用的层级，却并不会去探寻背后发生的事情。有一些开发者确实也有探寻的动力和意愿，但却在点开一个定义之后发现还有宏定义中还有其他无数定义，再加上满屏幕都是不同于平时的代码，既看不懂又不变色，于是乎心生烦恼，怒而回退。本文希望通过循序渐进的方式，通过几个例子来表述C系语言宏定义世界中的一些基本规则和技巧，从0开始，希望最后能让大家至少能看懂和还原一些相对复杂的宏。考虑到我自己现在objc使用的比较多，这个站点的读者应该也大多是使用objc的，所以有部分例子是选自objc，但是本文的大部分内容将是C系语言通用。</p>

<h3>入门</h3>

<p>如果您完全不知道宏是什么的话，可以先来热个身。很多人在介绍宏的时候会说，宏嘛很简单，就是简单的查找替换嘛。嗯，只说对了的一半。C中的宏分为两类，对象宏(object-like macro)和函数宏(function-like macro)。对于对象宏来说确实相对简单，但却也不是那么简单的查找替换。对象宏一般用来定义一些常数，举个例子：</p>

<p>```c
//This defines PI</p>

<h1>define M_PI        3.14159265358979323846264338327950288</h1>

<p>```</p>

<!--more-->


<p><code>#define</code>关键字表明即将开始定义一个宏，紧接着的<code>M_PI</code>是宏的名字，空格之后的数字是内容。类似这样的<code>#define X A</code>的宏是比较简单的，在编译时编译器会在语义分析认定是宏后，将X替换为A，这个过程称为宏的展开。比如对于上面的<code>M_PI</code></p>

<p>```c</p>

<h1>define M_PI        3.14159265358979323846264338327950288</h1>

<p>double r = 10.0;
double circlePerimeter = 2 * M_PI * r;
// => double circlePerimeter = 2 * 3.14159265358979323846264338327950288 * r;</p>

<p>printf("Pi is %0.7f",M_PI);
//Pi is 3.1415927
```</p>

<p>那么让我们开始看看另一类宏吧。函数宏顾名思义，就是行为类似函数，可以接受参数的宏。具体来说，在定义的时候，如果我们在宏名字后面跟上一对括号的话，这个宏就变成了函数宏。从最简单的例子开始，比如下面这个函数宏</p>

<p>```c
//A simple function-like macro</p>

<h1>define SELF(x)      x</h1>

<p>NSString *name = @"Macro Rookie";
NSLog(@"Hello %@",SELF(name));
// => NSLog(@"Hello %@",name);
//   => Hello Macro Rookie
```</p>

<p>这个宏做的事情是，在编译时如果遇到<code>SELF</code>，并且后面带括号，并且括号中的参数个数与定义的相符，那么就将括号中的参数换到定义的内容里去，然后替换掉原来的内容。 具体到这段代码中，<code>SELF</code>接受了一个name，然后将整个SELF(name)用name替换掉。嗯..似乎很简单很没用，身经百战阅码无数的你一定会认为这个宏是写出来卖萌的。那么接受多个参数的宏肯定也不在话下了，例如这样的：</p>

<p>```c</p>

<h1>define PLUS(x,y) x + y</h1>

<p>printf("%d",PLUS(3,2));
// => printf("%d",3 + 2);
//  => 5
```</p>

<p>相比对象宏来说，函数宏要复杂一些，但是看起来也相当简单吧？嗯，那么现在热身结束，让我们正式开启宏的大门吧。</p>

<h3>宏的世界，小有乾坤</h3>

<p>因为宏展开其实是编辑器的预处理，因此它可以在更高层级上控制程序源码本身和编译流程。而正是这个特点，赋予了宏很强大的功能和灵活度。但是凡事都有两面性，在获取灵活的背后，是以需要大量时间投入以对各种边界情况进行考虑来作为代价的。可能这么说并不是很能让人理解，但是大部分宏（特别是函数宏）背后都有一些自己的故事，挖掘这些故事和设计的思想会是一件很有意思的事情。另外，我一直相信在实践中学习才是真正掌握知识的唯一途径，虽然可能正在看这篇博文的您可能最初并不是打算亲自动手写一些宏，但是这我们不妨开始动手从实际的书写和犯错中进行学习和挖掘，因为只有肌肉记忆和大脑记忆协同起来，才能说达到掌握的水准。可以说，写宏和用宏的过程，一定是在在犯错中学习和深入思考的过程，我们接下来要做的，就是重现这一系列过程从而提高进步。</p>

<p>第一个题目是，让我们一起来实现一个<code>MIN</code>宏吧：实现一个函数宏，给定两个数字输入，将其替换为较小的那个数。比如<code>MIN(1,2)</code>出来的值是1。嗯哼，simple enough？定义宏，写好名字，两个输入，然后换成比较取值。比较取值嘛，任何一本入门级别的C程序设计上都会有讲啊，于是我们可以很快写出我们的第一个版本：</p>

<p>```c
//Version 1.0</p>

<h1>define MIN(A,B) A &lt; B ? A : B</h1>

<p>```</p>

<p>Try一下
<code>c
int a = MIN(1,2);
// =&gt; int a = 1 &lt; 2 ? 1 : 2;
printf("%d",a);
// =&gt; 1
</code></p>

<p>输出正确，打包发布！</p>

<p><img src="http://img.onevcat.com/2014/shipit.png" alt="潇洒走一回" /></p>

<p>但是在实际使用中，我们很快就遇到了这样的情况
<code>c
int a = 2 * MIN(3, 4);
printf("%d",a);
// =&gt; 4
</code></p>

<p>看起来似乎不可思议，但是我们将宏展开就知道发生什么了</p>

<p><code>c
int a = 2 * MIN(3, 4);
// =&gt; int a = 2 * 3 &lt; 4 ? 3 : 4;
// =&gt; int a = 6 &lt; 4 ? 3 : 4;
// =&gt; int a = 4;
</code></p>

<p>嘛，写程序这个东西，bug出来了，原因知道了，事后大家就都是诸葛亮了。因为小于和比较符号的优先级是较低的，所以乘法先被运算了，修正非常简单嘛，加括号就好了。</p>

<p>```c
//Version 2.0</p>

<h1>define MIN(A,B) (A &lt; B ? A : B)</h1>

<p><code>``
这次</code>2 * MIN(3, 4)`这样的式子就轻松愉快地拿下了。经过了这次修改，我们对自己的宏信心大增了...直到，某一天一个怒气冲冲的同事跑来摔键盘，然后给出了一个这样的例子：</p>

<p><code>c
int a = MIN(3, 4 &lt; 5 ? 4 : 5);
printf("%d",a);
// =&gt; 4
</code></p>

<p>简单的相比较三个数字并找到最小的一个而已，要怪就怪你没有提供三个数字比大小的宏，可怜的同事只好自己实现4和5的比较。在你开始着手解决这个问题的时候，你首先想到的也许是既然都是求最小值，那写成<code>MIN(3, MIN(4, 5))</code>是不是也可以。于是你就随手这样一改，发现结果变成了3，正是你想要的..接下来，开始怀疑之前自己是不是看错结果了，改回原样，一个4赫然出现在屏幕上。你终于意识到事情并不是你想像中那样简单，于是还是回到最原始直接的手段，展开宏。</p>

<p><code>c
int a = MIN(3, 4 &lt; 5 ? 4 : 5);
// =&gt; int a = (3 &lt; 4 &lt; 5 ? 4 : 5 ? 3 : 4 &lt; 5 ? 4 : 5);  //希望你还记得运算符优先级
//  =&gt; int a = ((3 &lt; (4 &lt; 5 ? 4 : 5) ? 3 : 4) &lt; 5 ? 4 : 5);  //为了您不太纠结，我给这个式子加上了括号
//   =&gt; int a = ((3 &lt; 4 ? 3 : 4) &lt; 5 ? 4 : 5)
//    =&gt; int a = (3 &lt; 5 ? 4 : 5)
//     =&gt; int a = 4
</code></p>

<p>找到问题所在了，由于展开时连接符号和被展开式子中的运算符号优先级相同，导致了计算顺序发生了变化，实质上和我们的1.0版遇到的问题是差不多的，还是考虑不周。那么就再严格一点吧，3.0版！</p>

<p>```c
//Version 3.0</p>

<h1>define MIN(A,B) ((A) &lt; (B) ? (A) : (B))</h1>

<p>```</p>

<p>至于为什么2.0版本中的<code>MIN(3, MIN(4, 5))</code>没有出问题，可以正确使用，这里作为练习，大家可以试着自己展开一下，来看看发生了什么。</p>

<p>经过两次悲剧，你现在对这个简单的宏充满了疑惑。于是你跑了无数的测试用例而且它们都通过了，我们似乎彻底解决了括号问题，你也认为从此这个宏就妥妥儿的哦了。不过如果你真的这么想，那你就图样图森破了。生活总是残酷的，该来的bug也一定是会来的。不出意外地，在一个雾霾阴沉的下午，我们又收到了一个出问题的例子。</p>

<p><code>c
float a = 1.0f;
float b = MIN(a++, 1.5f);
printf("a=%f, b=%f",a,b);
// =&gt; a=3.000000, b=2.000000
</code></p>

<p>拿到这个出问题的例子你的第一反应可能和我一样，这TM的谁这么二货还在比较的时候搞++，这简直乱套了！但是这样的人就是会存在，这样的事就是会发生，你也不能说人家逻辑有错误。a是1，a++表示先使用a的值进行计算，然后再加1。那么其实这个式子想要计算的是取a和b的最小值，然后a等于a加1：所以正确的输出a为2，b为1才对！嘛，满眼都是泪，让我们这些久经摧残的程序员淡定地展开这个式子，来看看这次又发生了些什么吧：</p>

<p><code>c
float a = 1.0f;
float b = MIN(a++, 1.5f);
// =&gt; float b = ((a++) &lt; (1.5f) ? (a++) : (1.5f))
</code></p>

<p>其实只要展开一步就很明白了，在比较a++和1.5f的时候，先取1和1.5比较，然后a自增1。接下来条件比较得到真以后又触发了一次a++，此时a已经是2，于是b得到2，最后a再次自增后值为3。出错的根源就在于我们预想的是a++只执行一次，但是由于宏展开导致了a++被多执行了，改变了预想的逻辑。解决这个问题并不是一件很简单的事情，使用的方式也很巧妙。我们需要用到一个GNU C的赋值扩展，即使用<code>({...})</code>的形式。这种形式的语句可以类似很多脚本语言，在顺次执行之后，会将最后一次的表达式的赋值作为返回。举个简单的例子，下面的代码执行完毕后a的值为3，而且b和c只存在于大括号限定的代码域中</p>

<p>```c
int a = ({</p>

<pre><code>int b = 1;
int c = 2;
b + c;
</code></pre>

<p>});
// => a is 3
```</p>

<p>有了这个扩展，我们就能做到之前很多做不到的事情了。比如彻底解决<code>MIN</code>宏定义的问题，而也正是GNU C中<code>MIN</code>的标准写法</p>

<p>```c
//GNUC MIN</p>

<h1>define MIN(A,B)    ({ <strong>typeof</strong>(A) <strong>a = (A); </strong>typeof<strong>(B) </strong>b = (B); <strong>a &lt; </strong>b ? <strong>a : </strong>b; })</h1>

<p>```</p>

<p>这里定义了三个语句，分别以输入的类型申明了<code>__a</code>和<code>__b</code>，并使用输入为其赋值，接下来做一个简单的条件比较，得到<code>__a</code>和<code>__b</code>中的较小值，并使用赋值扩展将结果作为返回。这样的实现保证了不改变原来的逻辑，先进行一次赋值，也避免了括号优先级的问题，可以说是一个比较好的解决方案了。如果编译环境支持GNU C的这个扩展，那么毫无疑问我们应该采用这种方式来书写我们的<code>MIN</code>宏，如果不支持这个环境扩展，那我们只有人为地规定参数不带运算或者函数调用，以避免出错。</p>

<p>关于<code>MIN</code>我们讨论已经够多了，但是其实还存留一个悬疑的地方。如果在同一个scope内已经有<code>__a</code>或者<code>__b</code>的定义的话（虽然一般来说不会出现这种悲剧的命名，不过谁知道呢），这个宏可能出现问题。在申明后赋值将因为定义重复而无法被初始化，导致宏的行为不可预知。如果您有兴趣，不妨自己动手试试看结果会是什么。Apple在Clang中彻底解决了这个问题，我们把Xcode打开随便建一个新工程，在代码中输入<code>MIN(1,1)</code>，然后Cmd+点击即可找到clang中 <code>MIN</code>的写法。为了方便说明，我直接把相关的部分抄录如下：</p>

<p>```objc
//CLANG MIN</p>

<h1>define <strong>NSX_PASTE</strong>(A,B) A##B</h1>

<h1>define MIN(A,B) <strong>NSMIN_IMPL</strong>(A,B,<strong>COUNTER</strong>)</h1>

<h1>define <strong>NSMIN_IMPL</strong>(A,B,L) ({ <strong>typeof</strong>(A) <strong>NSX_PASTE</strong>(<strong>a,L) = (A); </strong>typeof<strong>(B) </strong>NSX_PASTE<strong>(</strong>b,L) = (B); (<strong>NSX_PASTE</strong>(<strong>a,L) &lt; </strong>NSX_PASTE<strong>(</strong>b,L)) ? <strong>NSX_PASTE</strong>(<strong>a,L) : </strong>NSX_PASTE<strong>(</strong>b,L); })</h1>

<p>```</p>

<p>似乎有点长，看起来也很吃力。我们先美化一下这宏，首先是最后那个<code>__NSMIN_IMPL__</code>内容实在是太长了。我们知道代码的话是可以插入换行而不影响含义的，宏是否也可以呢？答案是肯定的，只不过我们不能使用一个单一的回车来完成，而必须在回车前加上一个反斜杠<code>\</code>。改写一下，为其加上换行好看些：</p>

<p>```objc</p>

<h1>define <strong>NSX_PASTE</strong>(A,B) A##B</h1>

<h1>define MIN(A,B) <strong>NSMIN_IMPL</strong>(A,B,<strong>COUNTER</strong>)</h1>

<h1>define <strong>NSMIN_IMPL</strong>(A,B,L) ({ <strong>typeof</strong>(A) <strong>NSX_PASTE</strong>(__a,L) = (A); \</h1>

<pre><code>                             __typeof__(B) __NSX_PASTE__(__b,L) = (B); \
                             (__NSX_PASTE__(__a,L) &lt; __NSX_PASTE__(__b,L)) ? __NSX_PASTE__(__a,L) : __NSX_PASTE__(__b,L); \
                          })
</code></pre>

<p>```</p>

<p>但可以看出<code>MIN</code>一共由三个宏定义组合而成。第一个<code>__NSX_PASTE__</code>里出现的两个连着的井号<code>##</code>在宏中是一个特殊符号，它表示将两个参数连接起来这种运算。注意函数宏必须是有意义的运算，因此你不能直接写<code>AB</code>来连接两个参数，而需要写成例子中的<code>A##B</code>。宏中还有一切其他的自成一脉的运算符号，我们稍后还会介绍几个。接下来是我们调用的两个参数的<code>MIN</code>，它做的事是调用了另一个三个参数的宏<code>__NSMIN_IMPL__</code>，其中前两个参数就是我们的输入，而第三个<code>__COUNTER__</code>我们似乎不认识，也不知道其从何而来。其实<code>__COUNTER__</code>是一个预定义的宏，这个值在编译过程中将从0开始计数，每次被调用时加1。因为唯一性，所以很多时候被用来构造独立的变量名称。有了上面的基础，再来看最后的实现宏就很简单了。整体思路和前面的实现和之前的GNUC MIN是一样的，区别在于为变量名<code>__a</code>和<code>__b</code>添加了一个计数后缀，这样大大避免了变量名相同而导致问题的可能性（当然如果你执拗地把变量叫做__a9527并且出问题了的话，就只能说不作死就不会死了）。</p>

<p>花了好多功夫，我们终于把一个简单的<code>MIN</code>宏彻底搞清楚了。宏就是这样一类东西，简单的表面之下隐藏了很多玄机，可谓小有乾坤。作为练习大家可以自己尝试一下实现一个<code>SQUARE(A)</code>，给一个数字输入，输出它的平方的宏。虽然一般这个计算现在都是用inline来做了，但是通过和<code>MIN</code>类似的思路我们是可以很好地实现它的，动手试一试吧 :)</p>

<h3>Log，永恒的主题</h3>

<p>Log人人爱，它为我们指明前进方向，它为我们抓虫提供帮助。在objc中，我们最多使用的log方法就是<code>NSLog</code>输出信息到控制台了，但是NSLog的标准输出可谓残废，有用信息完全不够，比如下面这段代码：</p>

<p><code>objc
NSArray *array = @[@"Hello", @"My", @"Macro"];
NSLog (@"The array is %@", array);
</code></p>

<p>打印到控制台里的结果是类似这样的</p>

<p>```
2014-01-20 11:22:11.835 TestProject[23061:70b] The array is (</p>

<pre><code>Hello,
My,
Macro
</code></pre>

<p>)
```</p>

<p>我们在输出的时候关心什么？除了结果以外，很多情况下我们会对这行log的所在的文件位置方法什么的会比较关心。在每次NSLog里都手动加上方法名字和位置信息什么的无疑是个笨办法，而如果一个工程里已经有很多<code>NSLog</code>的调用了，一个一个手动去改的话无疑也是噩梦。我们通过宏，可以很简单地完成对<code>NSLog</code>原生行为的改进，优雅，高效。只需要在预编译的pch文件中加上</p>

<p>```objc
//A better version of NSLog</p>

<h1>define NSLog(format, ...) do {                                                                          \</h1>

<pre><code>                         fprintf(stderr, "&lt;%s : %d&gt; %s\n",                                           \
                         [[[NSString stringWithUTF8String:__FILE__] lastPathComponent] UTF8String],  \
                         __LINE__, __func__);                                                        \
                         (NSLog)((format), ##__VA_ARGS__);                                           \
                         fprintf(stderr, "-------\n");                                               \
                       } while (0)
</code></pre>

<p>```</p>

<p>嘛，这是我们到现在为止见到的最长的一个宏了吧...没关系，一点一点来分析就好。首先是定义部分，第2行的<code>NSLog(format, ...)</code>。我们看到的是一个函数宏，但是它的参数比较奇怪，第二个参数是<code>...</code>，在宏定义（其实也包括函数定义）的时候，写为<code>...</code>的参数被叫做可变参数(variadic)。可变参数的个数不做限定。在这个宏定义中，除了第一个参数<code>format</code>将被单独处理外，接下来输入的参数将作为整体一并看待。回想一下NSLog的用法，我们在使用NSLog时，往往是先给一个format字符串作为第一个参数，然后根据定义的格式在后面的参数里跟上写要输出的变量之类的。这里第一个格式化字符串即对应宏里的<code>format</code>，后面的变量全部映射为<code>...</code>作为整体处理。</p>

<p>接下来宏的内容部分。上来就是一个下马威，我们遇到了一个do while语句...想想看你上次使用do while是什么时候吧？也许是C程序设计课的大作业？或者是某次早已被遗忘的算法面试上？总之虽然大家都是明白这个语句的，但是实际中可能用到它的机会少之又少。乍一看似乎这个do while什么都没做，因为while是0，所以do肯定只会被执行一次。那么它存在的意义是什么呢，我们是不是可以直接简化一下这个宏，把它给去掉，变成这个样子呢？</p>

<p>```objc
//A wrong version of NSLog</p>

<h1>define NSLog(format, ...)   fprintf(stderr, "&lt;%s : %d> %s\n",                                           \</h1>

<pre><code>                         [[[NSString stringWithUTF8String:__FILE__] lastPathComponent] UTF8String],  \
                         __LINE__, __func__);                                                        \
                         (NSLog)((format), ##__VA_ARGS__);                                           \
                         fprintf(stderr, "-------\n");                                               
</code></pre>

<p>```</p>

<p>答案当然是否定的，也许简单的测试里你没有遇到问题，但是在生产环境中这个宏显然悲剧了。考虑下面的常见情况</p>

<p>```objc
if (errorHappend)</p>

<pre><code>NSLog(@"Oops, error happened");
</code></pre>

<p>```</p>

<p>展开以后将会变成
```objc
if (errorHappend)</p>

<pre><code>fprintf((stderr, "&lt;%s : %d&gt; %s\n",[[[NSString stringWithUTF8String:__FILE__] lastPathComponent] UTF8String], __LINE__, __func__);
</code></pre>

<p>(NSLog)((format), ##<strong>VA_ARGS</strong>); //I will expand this later
fprintf(stderr, "-------\n");
```
注意..C系语言可不是靠缩进来控制代码块和逻辑关系的。所以说如果使用这个宏的人没有在条件判断后加大括号的话，你的宏就会一直调用真正的NSLog输出东西，这显然不是我们想要的逻辑。当然在这里还是需要重新批评一下认为if后的单条执行语句不加大括号也没问题的同学，这是陋习，无需理由，请改正。不论是不是一条语句，也不论是if后还是else后，都加上大括号，是对别人和自己的一种尊重。</p>

<p>好了知道我们的宏是如何失效的，也就知道了修改的方法。作为宏的开发者，应该力求使用者在最大限度的情况下也不会出错，于是我们想到直接用一对大括号把宏内容括起来，大概就万事大吉了？像这样：</p>

<p>```objc
//Another wrong version of NSLog</p>

<h1>define NSLog(format, ...)   {</h1>

<pre><code>                           fprintf(stderr, "&lt;%s : %d&gt; %s\n",                                           \
                           [[[NSString stringWithUTF8String:__FILE__] lastPathComponent] UTF8String],  \
                           __LINE__, __func__);                                                        \
                           (NSLog)((format), ##__VA_ARGS__);                                           \
                           fprintf(stderr, "-------\n");                                               \
                         }
</code></pre>

<p>```</p>

<p>展开刚才的那个式子，结果是
```objc
//I am sorry if you don't like { in the same like. But I am a fan of this style :P
if (errorHappend) {</p>

<pre><code>fprintf((stderr, "&lt;%s : %d&gt; %s\n",[[[NSString stringWithUTF8String:__FILE__] lastPathComponent] UTF8String], __LINE__, __func__);
(NSLog)((format), ##__VA_ARGS__);
fprintf(stderr, "-------\n");
</code></pre>

<p>};
```</p>

<p>编译，执行，正确！因为用大括号标识代码块是不会嫌多的，所以这样一来的话我们的宏在不论if后面有没有大括号的情况下都能工作了！这么看来，前面例子中的do while果然是多余的？于是我们又可以愉快地发布了？如果你够细心的话，可能已经发现问题了，那就是上面最后的一个分号。虽然编译运行测试没什么问题，但是始终稍微有些刺眼有木有？没错，因为我们在写NSLog本身的时候，是将其当作一条语句来处理的，后面跟了一个分号，在宏展开后，这个分号就如同噩梦一般的多出来了。什么，你还没看出哪儿有问题？试试看展开这个例子吧：</p>

<p>```objc
if (errorHappend)</p>

<pre><code>NSLog(@"Oops, error happened");
</code></pre>

<p>else</p>

<pre><code>//Yep, no error, I am happy~ :)
</code></pre>

<p>```</p>

<p>No! I am not haapy at all! 因为编译错误了！实际上这个宏展开以后变成了这个样子：</p>

<p>```objc
if (errorHappend) {</p>

<pre><code>fprintf((stderr, "&lt;%s : %d&gt; %s\n",[[[NSString stringWithUTF8String:__FILE__] lastPathComponent] UTF8String], __LINE__, __func__);
(NSLog)((format), ##__VA_ARGS__);
fprintf(stderr, "-------\n");
</code></pre>

<p>}; else {</p>

<pre><code>//Yep, no error, I am happy~ :)
</code></pre>

<p>}
```</p>

<p>因为else前面多了一个分号，导致了编译错误，很恼火..要是写代码的人乖乖写大括号不就啥事儿没有了么？但是我们还是有巧妙的解决方法的，那就是上面的do while。把宏的代码块添加到do中，然后之后while(0)，在行为上没有任何改变，但是可以巧妙地吃掉那个悲剧的分号，使用do while的版本展开以后是这个样子的</p>

<p>```objc
if (errorHappend)</p>

<pre><code>do {
    fprintf((stderr, "&lt;%s : %d&gt; %s\n",[[[NSString stringWithUTF8String:__FILE__] lastPathComponent] UTF8String], __LINE__, __func__);
    (NSLog)((format), ##__VA_ARGS__);
    fprintf(stderr, "-------\n");
} while (0);
</code></pre>

<p>else {</p>

<pre><code>//Yep, no error, I am really happy~ :)
</code></pre>

<p>}
```</p>

<p>这个吃掉分号的方法被大量运用在代码块宏中，几乎已经成为了标准写法。而且while(0)的好处在于，在编译的时候，编译器基本都会为你做好优化，把这部分内容去掉，最终编译的结果不会因为这个do while而导致运行效率上的差异。在终于弄明白了这个奇怪的do while之后，我们终于可以继续深入到这个宏里面了。宏本体内容的第一行没有什么值得多说的<code>fprintf(stderr, "&lt;%s : %d&gt; %s\n",</code>，简单的格式化输出而已。注意我们使用了<code>\</code>将这个宏分成了好几行来写，实际在最后展开时会被合并到同一行内，我们在刚才<code>MIN</code>最后也用到了反斜杠，希望你还能记得。接下来一行我们填写这个格式输出中的三个token，</p>

<p><code>
[[[NSString stringWithUTF8String:__FILE__] lastPathComponent] UTF8String], __LINE__, __func__);
</code></p>

<p>这里用到了三个预定义宏，和刚才的<code>__COUNTER__</code>类似，预定义宏的行为是由编译器指定的。<code>__FILE__</code>返回当前文件的绝对路径，<code>__LINE__</code>返回展开该宏时在文件中的行数，<code>__func__</code>是改宏所在scope的函数名称。我们在做Log输出时如果带上这这三个参数，便可以加快解读Log，迅速定位。关于编译器预定义的Log以及它们的一些实现机制，感兴趣的同学可以移步到gcc文档的<a href="http://gcc.gnu.org/onlinedocs/cpp/Predefined-Macros.html#Predefined-Macros">PreDefine页面</a>和clang的<a href="http://clang.llvm.org/docs/LanguageExtensions.html#builtin-macros">Builtin Macro</a>进行查看。在这里我们将格式化输出的三个参数分别设定为文件名的最后一个部分（因为绝对路径太长很难看），行数，以及方法名称。</p>

<p>接下来是还原原始的NSLog，<code>(NSLog)((format), ##__VA_ARGS__);</code>中出现了另一个预定义的宏<code>__VA_ARGS__</code>（我们似乎已经找出规律了，前后双下杠的一般都是预定义）。<code>__VA_ARGS__</code>表示的是宏定义中的<code>...</code>中的所有剩余参数。我们之前说过可变参数将被统一处理，在这里展开的时候编译器会将<code>__VA_ARGS__</code>直接替换为输入中从第二个参数开始的剩余参数。另外一个悬疑点是在它前面出现了两个井号<code>##</code>。还记得我们上面在<code>MIN</code>中的两个井号么，在那里两个井号的意思是将前后两项合并，在这里做的事情比较类似，将前面的格式化字符串和后面的参数列表合并，这样我们就得到了一个完整的NSLog方法了。之后的几行相信大家自己看懂也没有问题了，最后输出一下试试看，大概看起来会是这样的。</p>

<h2>```</h2>

<p>&lt;AppDelegate.m : 46> -[AppDelegate application:didFinishLaunchingWithOptions:]
2014-01-20 16:44:25.480 TestProject[30466:70b] The array is (</p>

<pre><code>Hello,
My,
Macro
</code></pre>

<h2>)</h2>

<p>```</p>

<p>带有文件，行号和方法的输出，并且用横杠隔开了（请原谅我没有质感的设计，也许我应该画一只牛，比如这样？），debug的时候也许会轻松一些吧 :)</p>

<p><img src="http://img.onevcat.com/2014/cowsay-lolcat.png" alt="hello cowsay" /></p>

<p>这个Log有三个悬念点，首先是为什么我们要把format单独写出来，然后吧其他参数作为可变参数传递呢？如果我们不要那个format，而直接写成<code>NSLog(...)</code>会不会有问题？对于我们这里这个例子来说的话是没有变化的，但是我们需要记住的是<code>...</code>是可变参数列表，它可以代表一个、两个，或者是很多个参数，但同时它也能代表零个参数。如果我们在申明这个宏的时候没有指定format参数，而直接使用参数列表，那么在使用中不写参数的NSLog()也将被匹配到这个宏中，导致编译无法通过。如果你手边有Xcode，也可以看看Cocoa中真正的NSLog方法的实现，可以看到它也是接收一个格式参数和一个参数列表的形式，我们在宏里这么定义，正是为了其传入正确合适的参数，从而保证使用者可以按照原来的方式正确使用这个宏。</p>

<p>第二点是既然我们的可变参数可以接受任意个输入，那么在只有一个format输入，而可变参数个数为零的时候会发生什么呢？不妨展开看一看，记住<code>##</code>的作用是拼接前后，而现在<code>##</code>之后的可变参数是空：</p>

<p>```
NSLog(@"Hello");
=> do {</p>

<pre><code>   fprintf((stderr, "&lt;%s : %d&gt; %s\n",[[[NSString stringWithUTF8String:__FILE__] lastPathComponent] UTF8String], __LINE__, __func__);
   (NSLog)((@"Hello"), );
   fprintf(stderr, "-------\n");
</code></pre>

<p>   } while (0);</p>

<p>```</p>

<p>中间的一行<code>(NSLog)(@"Hello", );</code>似乎是存在问题的，你一定会有疑惑，这种方式怎么可能编译通过呢？！原来大神们其实早已想到这个问题，并且进行了一点特殊的处理。这里有个特殊的规则，在<code>逗号</code>和<code>__VA_ARGS__</code>之间的双井号，除了拼接前后文本之外，还有一个功能，那就是如果后方文本为空，那么它会将前面一个逗号吃掉。这个特性当且仅当上面说的条件成立时才会生效，因此可以说是特例。加上这条规则后，我们就可以将刚才的式子展开为正确的<code>(NSLog)((@"Hello"));</code>了。</p>

<p>最后一个值得讨论的地方是<code>(NSLog)((format), ##__VA_ARGS__);</code>的括号使用。把看起来能去掉的括号去掉，写成<code>NSLog(format, ##__VA_ARGS__);</code>是否可以呢？在这里的话应该是没有什么大问题的，首先format不会被调用多次也不太存在误用的可能性（因为最后编译器会检查NSLog的输入是否正确）。另外你也不用担心展开以后式子里的NSLog会再次被自己展开，虽然展开式中NSLog也满足了我们的宏定义，但是宏的展开非常聪明，展开后会自身无限循环的情况，就不会再次被展开了。</p>

<p>作为一个您读到了这里的小奖励，附送三个debug输出rect，size和point的宏，希望您能用上（嗯..想想曾经有多少次你需要打印这些结构体的某个数字而被折磨致死，让它们玩儿蛋去吧！当然请先加油看懂它们吧）</p>

<p>```</p>

<h1>define NSLogRect(rect) NSLog(@"%s x:%.4f, y:%.4f, w:%.4f, h:%.4f", #rect, rect.origin.x, rect.origin.y, rect.size.width, rect.size.height)</h1>

<h1>define NSLogSize(size) NSLog(@"%s w:%.4f, h:%.4f", #size, size.width, size.height)</h1>

<h1>define NSLogPoint(point) NSLog(@"%s x:%.4f, y:%.4f", #point, point.x, point.y)</h1>

<p>```</p>

<h3>两个实际应用的例子</h3>

<p>当然不是说上面介绍的宏实际中不能用。它们相对简单，但是里面坑不少，所以显得很有特点，非常适合作为入门用。而实际上在日常中很多我们常用的宏并没有那么多奇怪的问题，很多时候我们按照想法去实现，再稍微注意一下上述介绍的可能存在的共通问题，一个高质量的宏就可以诞生。如果能写出一些有意义价值的宏，小了从对你的代码的使用者来说，大了从整个社区整个世界和减少碳排放来说，你都做出了相当的贡献。我们通过几个实际的例子来看看，宏是如何改变我们的生活，和写代码的习惯的吧。</p>

<p>先来看看这两个宏</p>

<p>```objc</p>

<h1>define XCTAssertTrue(expression, format...) \</h1>

<pre><code>_XCTPrimitiveAssertTrue(expression, ## format)
</code></pre>

<h1>define _XCTPrimitiveAssertTrue(expression, format...) \</h1>

<p>({ \</p>

<pre><code>@try { \
    BOOL _evaluatedExpression = !!(expression); \
    if (!_evaluatedExpression) { \
        _XCTRegisterFailure(_XCTFailureDescription(_XCTAssertion_True, 0, @#expression),format); \
    } \
} \
@catch (id exception) { \
    _XCTRegisterFailure(_XCTFailureDescription(_XCTAssertion_True, 1, @#expression, [exception reason]),format); \
}\
</code></pre>

<p>})
```</p>

<p>如果您常年做苹果开发，却没有见过或者完全不知道<code>XCTAssertTrue</code>是什么的话，强烈建议补习一下测试驱动开发的相关知识，我想应该会对您之后的道路很有帮助。如果你已经很熟悉这个命令了，那我们一起开始来看看幕后发生了什么。</p>

<p>有了上面的基础，相信您大体上应该可以自行解读这个宏了。<code>({...})</code>的语法和<code>##</code>都很熟悉了，这里有三个值得注意的地方，在这个宏的一开始，我们后面的的参数是<code>format...</code>，这其实也是可变参数的一种写法，和<code>...</code>与<code>__VA_ARGS__</code>配对类似，<code>{NAME}...</code>将于<code>{NAME}</code>配对使用。也就是说，在这里宏内容的<code>format</code>指代的其实就是定义的先对<code>expression</code>取了两次反？我不是科班出身，但是我还能依稀记得这在大学程序课上讲过，两次取反的操作可以确保结果是BOOL值，这在objc中还是比较重要的（关于objc中BOOL的讨论已经有很多，如果您还没能分清BOOL, bool和Boolean，可以参看<a href="http://nshipster.com/bool/">NSHisper的这篇文章</a>）。然后就是<code>@#expression</code>这个式子。我们接触过双井号<code>##</code>，而这里我们看到的操作符是单井号<code>#</code>，注意井号前面的<code>@</code>是objc的编译符号，不属于宏操作的对象。单个井号的作用是字符串化，简单来说就是将替换后在两头加上""，转为一个C字符串。这里使用@然后紧跟#expression，出来后就是一个内容是expression的内容的NSString。然后这个NSString再作为参数传递给<code>_XCTRegisterFailure</code>和<code>_XCTFailureDescription</code>等，继续进行展开，这些是后话。简单一瞥，我们大概就可以想象宏帮助我们省了多少事儿了，如果各位看官要是写个断言还要来个十多行的话，想象都会疯掉的吧。</p>

<p>另外一个例子，找了人民群众喜闻乐见的<a href="https://github.com/ReactiveCocoa/ReactiveCocoa">ReactiveCocoa(RAC)</a>中的一个宏定义。对于RAC不熟悉或者没听过的朋友，可以简单地看看<a href="http://blog.leezhong.com">Limboy的一系列相关博文</a>（搜索ReactiveCocoa），介绍的很棒。如果觉得“哇哦这个好酷我很想学”的话，不妨可以跟随raywenderlich上这个<a href="http://www.raywenderlich.com/55384/ios-7-best-practices-part-1">系列的教程</a>做一些实践，里面简单地用到了RAC，但是都已经包含了RAC的基本用法了。RAC中有几个很重要的宏，它们是保证RAC简洁好用的基本，可以说要是没有这几个宏的话，是不会有人喜欢RAC的。其中<code>RACObserve</code>就是其中一个，它通过KVC来为对象的某个属性创建一个信号返回（如果你看不懂这句话，不要担心，这对你理解这个宏的写法和展开没有任何影响）。对于这个宏，我决定不再像上面那样展开和讲解，我会在最后把相关的宏都贴出来，大家不妨拿它练练手，看看能不能将其展开到代码的状态，并且明白其中都发生了些什么。如果你遇到什么问题或者在展开过程中有所心得，欢迎在评论里留言分享和交流 :)</p>

<p>好了，这篇文章已经够长了。希望在看过以后您在看到宏的时候不再发怵，而是可以很开心地说这个我会这个我会这个我也会。最终目标当然是写出漂亮高效简洁的宏，这不论对于提高生产力还是<del>震慑你的同事</del>提升自己实力都会很有帮助。</p>

<p>另外，在这里一定要宣传一下关注了很久的<a href="http://weibo.com/hangcom">@hangcom</a> 吴航前辈的新书《iOS应用逆向工程》。很荣幸能够在发布之前得到前辈的允许拜读了整本书，可以说看的畅快淋漓。我之前并没有越狱开发的任何基础，也对相关领域知之甚少，在这样的前提下跟随书中的教程和例子进行探索的过程可以说是十分有趣。我也得以能够用不同的眼光和高度来审视这几年所从事的iOS开发行业，获益良多。可以说《iOS应用逆向工程》是我近期所愉快阅读到的很cool的一本好书。现在这本书还在预售中，但是距离1月28日的正式发售已经很近，有兴趣的同学可以前往<a href="http://www.amazon.cn/gp/product/B00HQW9AA6/ref=s9_simh_gw_p14_d0_i6?pf_rd_m=A1AJ19PSB66TGU&amp;pf_rd_s=center-2&amp;pf_rd_r=1KY5VBPQDKMCCWC07ANV&amp;pf_rd_t=101&amp;pf_rd_p=108773272&amp;pf_rd_i=899254051">亚马逊</a>或者<a href="http://product.china-pub.com/3769262">ChinaPub</a>的相关页面预定，相信这本书将会是iOS技术人员非常棒的春节读物。</p>

<p>最后是我们说好的留给大家玩的练习，我加了一点注释帮助大家稍微理解每个宏是做什么的，在文章后面留了一块试验田，大家可以随便填写玩弄。总之，加油！</p>

<p>```
//调用 RACSignal是类的名字
RACSignal *signal = RACObserve(self, currentLocation);</p>

<p>//以下开始是宏定义
//rac_valuesForKeyPath:observer:是方法名</p>

<h1>define RACObserve(TARGET, KEYPATH) \</h1>

<pre><code>[(id)(TARGET) rac_valuesForKeyPath:@keypath(TARGET, KEYPATH) observer:self]
</code></pre>

<h1>define keypath(...) \</h1>

<pre><code>metamacro_if_eq(1, metamacro_argcount(__VA_ARGS__))(keypath1(__VA_ARGS__))(keypath2(__VA_ARGS__))
</code></pre>

<p>//这个宏在取得keypath的同时在编译期间判断keypath是否存在，避免误写
//您可以先不用介意这里面的巫术..</p>

<h1>define keypath1(PATH) \</h1>

<pre><code>(((void)(NO &amp;&amp; ((void)PATH, NO)), strchr(# PATH, '.') + 1))
</code></pre>

<h1>define keypath2(OBJ, PATH) \</h1>

<pre><code>(((void)(NO &amp;&amp; ((void)OBJ.PATH, NO)), # PATH))
</code></pre>

<p>//A和B是否相等，若相等则展开为后面的第一项，否则展开为后面的第二项
//eg. metamacro_if_eq(0, 0)(true)(false) => true
//    metamacro_if_eq(0, 1)(true)(false) => false</p>

<h1>define metamacro_if_eq(A, B) \</h1>

<pre><code>    metamacro_concat(metamacro_if_eq, A)(B)
</code></pre>

<h1>define metamacro_if_eq1(VALUE) metamacro_if_eq0(metamacro_dec(VALUE))</h1>

<h1>define metamacro_if_eq0(VALUE) \</h1>

<pre><code>metamacro_concat(metamacro_if_eq0_, VALUE)
</code></pre>

<h1>define metamacro_if_eq0_1(...) metamacro_expand_</h1>

<h1>define metamacro_expand_(...) <strong>VA_ARGS</strong></h1>

<h1>define metamacro_argcount(...) \</h1>

<pre><code>    metamacro_at(20, __VA_ARGS__, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1)
</code></pre>

<h1>define metamacro_at(N, ...) \</h1>

<pre><code>    metamacro_concat(metamacro_at, N)(__VA_ARGS__)
</code></pre>

<h1>define metamacro_concat(A, B) \</h1>

<pre><code>    metamacro_concat_(A, B)
</code></pre>

<h1>define metamacro_concat_(A, B) A ## B</h1>

<h1>define metamacro_at2(<em>0, </em>1, ...) metamacro_head(<strong>VA_ARGS</strong>)</h1>

<h1>define metamacro_at20(<em>0, </em>1, <em>2, </em>3, <em>4, </em>5, <em>6, </em>7, <em>8, </em>9, <em>10, </em>11, <em>12, </em>13, <em>14, </em>15, <em>16, </em>17, <em>18, </em>19, ...) metamacro_head(<strong>VA_ARGS</strong>)</h1>

<h1>define metamacro_head(...) \</h1>

<pre><code>    metamacro_head_(__VA_ARGS__, 0)
</code></pre>

<h1>define metamacro_head_(FIRST, ...) FIRST</h1>

<h1>define metamacro_dec(VAL) \</h1>

<pre><code>    metamacro_at(VAL, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19)
</code></pre>

<p>```</p>

<div id="editor">//调用 RACSignal是类的名字
RACSignal *signal = RACObserve(self, currentLocation);</div>




<script src="http://onevcat.com/javascripts/src-min/ace.js" type="text/javascript" charset="utf-8"></script>


<script>
    var editor = ace.edit("editor");
    editor.setTheme("ace/theme/github");
    editor.getSession().setMode("ace/mode/objectivec");
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[代码手写UI，xib和StoryBoard间的博弈，以及Interface Builder的一些小技巧]]></title>
    <link href="http://onevcat.com/2013/12/code-vs-xib-vs-storyboard/"/>
    <updated>2013-12-31T21:32:00+09:00</updated>
    <id>http://onevcat.com/2013/12/code-vs-xib-vs-storyboard</id>
    <content type="html"><![CDATA[<p><img src="http://img.onevcat.com/2013/code-xib-sb.png" alt="Code-vs-Xibs-vs-StroyBoard" /></p>

<p>最近接触了几个刚入门的iOS学习者，他们之中存在一个普遍和困惑和疑问，就是应该如何制作UI界面。iOS应用是非常重视用户体验的，可以说绝大多数的应用成功与否与交互设计以及UI是否漂亮易用有着非常大的关系。而随着iOS开发发展至今，可以说在UI制作上大家逐渐分化为了三种主要流派：使用代码手写UI及布局；使用单个xib文件组织viewController或者view；使用StoryBoard来通过单个或很少的几个（关于这点稍后会进行展开）文件构建全部UI。应该使用哪种方式来制作UI已经是iOS开发中亘古不变的争论话题了，或许永远不会有一个统一的结论。但是首先需要知道的是三种方式各有优劣，所以也各有自己最适用的场合，而不会有完全的孰优孰劣。对于初学iOS开发来说，一时间其实是很难判定最适合自己的UI架构方式的。在这篇文章里我希望能够通过自己的经验给出一些意见，以期能帮助入门者来挑选最适合自己应用场景的方案。对于老鸟的话，也不妨对照自己平日的使用习惯和运用场景，看看有没有可以改进或变化的地方。最后，因为我本人现在最习惯和喜欢的是用Interface Builder(之后简称IB)及xib来做UI，所以文末附上了一些IB使用时候的小技巧，算是做个总结。</p>

<!--more-->


<h3>代码手写UI</h3>

<p>这种方法经常被学院派的极客或者依赖多人合作的大型项目大规模使用。Geek们喜欢用代码构建UI，是因为代码是键盘敲出来的，这样可以做到不开IB，手不离开键盘就完成工作，可以专注于编码环境，看起来很cool很高效，而且不到运行时大家都不知道会是什么样子，也显出了程序员这一职业的高大上及神秘气息（这个真的不是在黑..想想大家一起在设计师背后指点江山的场景吧）。大型多人合作项目使用代码构建UI，主要是看中纯代码在版本管理时的优势，检查追踪改动以及进行代码合并相对容易一些。</p>

<p>另外，代码UI可以说具有最好的代码重用性。如果你的目的是写一些可以高度重用的控件提供给其他开发者使用，那毫无疑问最好的选择应该是使用代码来完成UIView的子类。这样进一步的修改和其他开发者在使用时，都会方便不少。使用代码也是最为强大的，会有xib或者StoryBoard做不了的事情，但是使用代码最终一定能够完成所要的需求。</p>

<p>但是代码手写UI的劣势同时也是最明显的，主要就是一个字：慢。首先相比可视化的IB来说，完成一个并不太复杂的界面，你可能需要写上数百行的UI代码。不论是初始化一个Label，还是设定一个frame或者添加一个target-action，都需要写代码，这不仅在前期极为浪费时间，在之后维护时代码定位和寻找也会很痛苦。其次，因为你无法直观地看到你能得到的结果，所以你很可能需要不断地<code>Cmd+R</code>/<code>Cmd+.</code>来修改各个视图的位置大小。即使你用上了<a href="http://revealapp.com">Reveal</a>或者<a href="https://github.com/mikr/RestartLessOften">RestartLessOften</a>之类的工具，也还是无法特别方便地完成需要的布局。另外加上如果需要利用AutoLayout来进行尺寸适配的话，使用代码进行约束就更加头疼了。很多时候一个无法满足的约束的问题就够来回运行修改调试很长时间了。</p>

<h3>Xibs</h3>

<p>相对于代码，使用IB和xib文件来组织UI，可以省下大量代码和时间，从而得到更快的开发速度。如果你曾经受到过微软家Visual Basic或者其他Visual系的可视化界面的荼毒与残害，因此怀疑Interface Builder的纯正血统和工作能力，建议可以看看这些资料以纠正三观：<a href="http://www.programmer.com.cn/9234/">Jean-Marie Hullot的Interface Builder神话</a>，<a href="http://www.youtube.com/watch?v=viLnOVBbcsE">西装革履的青涩乔帮主在NeXT时亲手用IB构建应用</a>（需要翻墙）。另外，不妨打开你的Mac上的Application文件夹中或者iPhone上Apple家的各种应用。你会惊奇地发现，IB远比你看到的要强大：小至计算器取色器这类小工具，大至iWork三件套，Aperture或Final Cut这样的专业级应用，无一不是使用IB来完成UI制作的。</p>

<p>其实IB和xib是从iOS SDK初次面世开始就是捆绑在开发者工具套装内的内容了，而到了Xcode 4之后更被直接集成到了Xcode中成为了IDE的一部分。xib设计的一大目的其实是为了良好的MVC：一般来说，单个的xib文件对应一个ViewController，而对于一些自定义的view，往往也会使用单个xib并从main bundle进行加载的方式来载入。IB帮助完成view的创建，布局和与file owner的关系映射等一些列工作。对于初学者来说，牢记xib的文件都是view的内容，有助于建立起较好的MVC的概念，从而在开发中避免或少走弯路。</p>

<p>xib文件之前一大被诟病的问题是文件内容过于复杂，可读性很差，即使只是简单打开没有编辑也有可能造成变化而导致合并和提交的苦难。在Xcode 5中Apple大幅简化了xib文件的格式，使其变得易读易维护。可以说现在对于xib文件在版本管理上其实和纯代码已经没有太大差异，只要仔细看过一遍xib的文件内容，自然能理解绝大部分，并很好地追踪并查找过往的修改记录了。</p>

<p>当然xib也不是完美的。最大的问题在于xib中的设置往往并非最终设置，在代码中你将有机会覆盖你在xib文件中进行的UI设计。在不同的地方对同一个属性进行设置，这在之后的维护中将会是噩梦般的存在。因为其实IB还是有所局限的，它没有逻辑判断，也很难在运行时进行配置，而反之使用代码确是无所不能的。在使用xib时，辅以部分代码来补充和完成功能几乎是不可避免的。关于这点在开发时应该予以高度重视，如果选择xib，那么要尽量将xib的工作和代码的工作隔离开来：能够使用xib完成的内容就统一使用xib来做，而不要说三个Label其中两个在xib设置了字体而另一个却在代码中完成。尽量仅保持必要的、较少的IBOutlet和IBAction会是一个好方法。</p>

<h3>StoryBoard</h3>

<p>iOS5之后Apple提供了一种全新的方式来制作UI，那就是StoryBoard。简单理解来说，可以把StoryBoard看做是一组viewController对应的xib，以及它们之间的转换方式的集合。在StoryBoard中不仅可以看到每个ViewController的布局样式，也可以明确地知道各个ViewController之间的转换关系。相对于单个的xib，其代码需求更少，也由于集合了各个xib，使得对于界面的理解和修改的速度也得到了更大提升。减少代码量就是减少bug量，这也是程序开发中的真理之一。</p>

<p>在Xcode5之后，StoryBoard已经成为新建项目的默认配置，这也代表了Apple对开发者的建议和未来的方向。WWDC2013的各个Sample Code中也基本都使用了StoryBoard来进行演示。可以预见到，之后Apple必定会在这方面进行继续强化，而反之纯代码或者单个xib的方式很可能不会再得到增强。</p>

<p>如果不考虑iOS版本的支持（其实说实话现在已经很少还见到要从iOS4开始支持的app了吧），现在StoryBoard面临的最大问题就是多人协作。因为所有的UI都定义在一个文件中，因此很多开发者个人或企业的技术负责人认为StoryBoard是无法进行协作开发的，其实这更多的是一种对StoryBoard的陌生所造成的误解。虽然Apple并没有在WWDC明确提及，但是没有人规定整个项目只能有一个StoryBoard文件。一种可行的做法是将项目的不同部分分解成若干个StoryBoard，并安排开发人员对自己的部分进行负责。简单举例比如一个有4个tab功能相互独立的基于UITabBarViewController的应用，完全可以使用4个StoryBoard来分别代表4个tab，并在相互无干扰的情况下完成开发。这样一来就不会存在所谓的冲突问题了。StoryBoard的API是如此简单，现在的SDK中一共方法数量一只手就能数过来，所以具体方法在这里就不再罗嗦了。</p>

<p>StoryBoard的另外的挑战来源于ViewController的重用和自定义的view的处理。对于前者，在正确封装接口以及良好设计的基础上，其实StoryBoard的VC重用与代码的VC重用是没有本质区别的，在StoryBoard中添加封装良好需要重用的Scene即可解决。而对于后者，因为StoryBoard中已经不允许有单个view的存在，因此很多时候我们还是需要借助于单个的xib来自定义UI。这一点可以说是由于StoryBoard的设计思路所造成的，StoryBoard更强调的是一种层次结构，是在全局的视角上来组织UI设计和迁移。而对于单个的view，更多的会注重于重用和定制，而与整个项目的流程没有太大关系。相信抓住这一要点，就能很好地了解什么时候使用xib，什么时候使用StoryBoard。</p>

<p>关于StoryBoard最后要说的是，现在会有一些对于StoryBoard性能上的担忧。因为相对于单个xib来说，StoryBoard文件往往更大，加载速度也相应变慢。但是其实随着现在设备的更新换代，在iPhone4都难觅的今天，这点性能上的差距几乎可以忽略了。而再之后的设备，不论读取还是解析，只会越来越快。所以性能上的问题完全是没有担心的必要的。</p>

<h3>我的观点和选择</h3>

<p>我入门的时候是使用xib的，因为那时候还没有StoryBoard，而我也不是喜欢代码的学院派Geek。到现在，三种方式我都有尝试过，并分别得到了一些可能还并不是特别深刻体会。对于现在的我来说，xib是我的奶酪，也是我在自己的一些项目里一直使用的方式，我可以在极短短时间内用xib架起一套包括自定义要素和良好部件重用性复杂UI。但是在我尝试了几次使用StoryBoard制作demo之后，我已经决定在之后的项目转向使用StoryBoard。一方面因为确实是未来方向（每次新工程删StoryBoard很讨厌..），现在的StoryBoard专有的preview功能，以及之后AutoLayout的进一步改进等都很值得期待；另一方面也觉得奶酪放一个地方太久了会不好，趁着iOS7的大变革，也更新一下自己的观念和方式，把奶酪换个地方摆摆，也许会对以后大有裨益。</p>

<p>对于初心者来说，我并不建议上手就直接使用代码来进行UI制作和布局，因为冗长的UI代码确实非常乏味无趣。尽快看到成品，至少尽快看到原型，是保持兴趣，继续深入和从事职业的有效动力。所以如果有可能有条件，在老鸟的指导下选择StoryBoard来进行快速构建（或者如果是单个人开发的话，可以不用考虑多个StoryBoard协作，就更容易），会是入门的好选择。而最新的教程和文档已经开始逐渐偏向StoryBoard，关于StoryBoard的问题在SO上关注度也会更高，这样在入门时会有更多的资料可以进行参考。</p>

<p>这并不是说不需要关心代码UI或者xib，因为使用StoryBoard的时候在只能使用代码以及自定义单个view时，还是不可避免地需要接触它们的。这里想给的一点建议就是，虽然你不依赖代码来进行UI制作，但是了解并掌握如何使用纯代码来从头构建UI还是非常必要的：包括从新建Window开始，到初始化ViewController，添加必要的view，设定它们的property，以及添加和处理它们的各种响应及responser链等内容。现在iOS开发入门非常容易，Xcode和xib/StoryBoard帮助开发者隐藏了太多的细节，但是很多时候如果你不明白underhood到底是些什么，为什么这些xib/StoryBoard会这样运作的话，经常会出现卡在一些很可笑的和初级的bug上找不着北，这其实会是对时间的巨大浪费，很不值得。</p>

<h3>一些IB小技巧</h3>

<p>最后分享一些IB使用上的小技巧作为结束吧。其中很多方法也可以用在StoryBoard上，所以在向我自己之前xib使用者生涯致敬的同时，也算是一点小的备忘总结吧。</p>

<h4>同时添加多个outlet</h4>

<p>在IB中，选中一个view并右键点击，将会出现灰色的HUD，可以在其上方便地拖拉或设定事件和outlet。你可以同时打开多个这样的面板来一次性添加所有outlet。右键点击面板，随便拖动一下面板，然后再打开另一个。你会发现前一个面板也留下来了，这样你就可以方便地进行拖拽设定了。</p>

<p><img src="http://img.onevcat.com/2013/IB-tip1.png" alt="多个Outlet HUD" /></p>

<p>当然，对于成组和行为类似的IBOutlet，应该直接使用IBOutletCollection来进行处理会更方便。</p>

<h4>可视化坐标距离</h4>

<p>IB最烦人的问题就是对其。用代码的时候我们可以明确地指定x,y坐标，但是换到IB的时候我们更多的时候是靠拖拽UIView来布局。比如需要三个间隔相同的label，除了用强大的肉眼来估测距离是否相等以外，难道只能乖乖分别选中三个label，记下它们的坐标然后打开计算器来做加减法么？</p>

<p>显然不要那么笨，试试看选中一个label，然后按住option键并将鼠标移动到其他label上试试？你可以发现view之间的距离都以很容易理解的方式显示出来了。不仅是同层次的view，被选中view与其他层次的view之间的距离关系也可以同样显示。</p>

<p><img src="http://img.onevcat.com/2013/IB-tip2.png" alt="显示View之间的距离" /></p>

<h4>在一组view层次中进行选择</h4>

<p>对于一些复杂的view层级关系，我们往往直接在IB中选择会比较困难。比如view相互覆盖时，我们很难甚至不能在编辑视图中选中底层的view。这时候一般的做法是打开左侧的view层级面板，一层层展开然后选择自己需要的view。其实我们也有更简单的方法：按住<code>Cmd</code>和<code>Shift</code>，然后在需要选择的view上方按右键，就可以列出在点击位置上所有的view的列表。藉此就可以方便快速地选中想要的view了。</p>

<p><img src="http://img.onevcat.com/2013/IB-tip3.png" alt="在编辑视图中选则底层view" /></p>

<h4>添加辅助线</h4>

<p>这么高大上的技巧必须放在最后啊...在左边的层级列表中双击某个view，然后<code>Cmd+_</code>或者<code>Cmd+|</code>即可在选中的view上添加一条水平或者垂直中心的辅助线。当然这个辅助线是可以随意移动的。如果干过设计的同学肯定明白这个的意义了，在之后的对其和设计变更的时候都有重要的参考价值。</p>

<p><img src="http://img.onevcat.com/2013/IB-tip4.png" alt="为IB添加辅助线" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS内购实现及测试Check List]]></title>
    <link href="http://onevcat.com/2013/11/ios-iap-checklist/"/>
    <updated>2013-11-18T22:08:00+09:00</updated>
    <id>http://onevcat.com/2013/11/ios-iap-checklist</id>
    <content type="html"><![CDATA[<p><img src="http://img.onevcat.com/2013/cannot-connect-its.png" alt="image" /></p>

<p>免费+应用内购买的模式已经被证明了是最有效的盈利模式，所以实现内购功能可能是很多开发者必做的工作和必备的技能了。但是鉴于内购这块坑不算少，另外因为sandbox测试所需要特定的配置也很多，所以对于经验不太多的开发者来说很容易就遇到各种问题，并且测试时出错Apple给出的也只有“Can not connect iTunes Store”或者"Invalid Product IDs"之类毫无价值的错误提示，并没有详细的错误说明，因此调试起来往往没有方向。有老前辈在<a href="http://troybrant.net/blog/2010/01/invalid-product-ids/">这里</a>整理过一个相对完整的check list了，但是因为年代已经稍微久远，所以内容上和现在的情况已经有一些出入。趁着在最近两个项目里做内购这块遇到的新问题，顺便在此基础上总结整理了一份比较新的中文Check list，希望能帮到后来人。</p>

<p>如果您在实现和测试iOS应用内购的时候遇到问题，可以逐一对照下面所列出的条目，并逐一进行检查。相信可以排除大部分的错误。如果您遇到的问题不在这个列表范围内，欢迎在评论中指出，我会进行更新。</p>

<ul>
<li>您是否在iOS Dev Center中打开了对应应用AppID的<code>In-App Purchases</code>功能？登陆iOS Dev Center的Certificates, Identifiers &amp; Profiles下，在Identifiers中找到正在开发的App，In-App Purchase一项应当显示Enabled（如果使用Xcode5，可以直接在Xcode的Capabilities页面中打开In-App Purchases）。</li>
<li>您是否在iTunes Connect中注册了您的IAP项目，并将其设为Cleared for Sale？</li>
<li>您的plist中的<code>Bundle identifier</code>的内容是否和您的AppID一致？</li>
<li>您是否正确填写了Version（CFBundleVersion）和Build（CFBuildNumber）两个数字？两者缺一不可。</li>
<li>您用代码向Apple申请售卖物品列表时是否使用了完整的在iTC注册的Product ID？（使用在IAP管理中内购项目的Product ID一栏中的字符串）</li>
<li>您是否在打开IAP以后重新生成过包含IAP许可的provisioning profile？</li>
<li>你是否重新导入了新的包含IAP的provisioning profile？建议在Organizer中先删掉原来设备上的老的provisioning profile。</li>
<li>您是否在用包含IAP的provisioning profile在部署测试程序？在Xcode5中，建议使用General中的Team选项来自动管理。</li>
<li>您是否是在模拟器中测试IAP？虽然理论上说模拟器在某些情况下可以测试IAP，但是条件很多也不让人安心，因此您确实需要一台真机来做IAP测试。</li>
<li>您是在企业版发布中测试IAP么？因为企业版没有iTC进行内购项目管理，也无法发布AppStore应用，所以您在企业版的build中不能使用IAP。</li>
<li>您是否将设备上原来的app删除了，并重新进行了安装？记得在安装前做一下Clean和Clean Build Folder。</li>
<li>您是否在运行应用前将设备上实际的Apple ID登出了？建议在设置->iTunes Store和App Stroe中将使用中的Apple ID登出，以未登录状态进入应用进行测试。</li>
<li>你是否使用的是Test User？如果你还没有创建Test User，你需要到iTC中创建。</li>
<li>您使用的测试账号是否是美国区账号？虽然不是一定需要，但是鉴于其他地区的测试账号经常抽风，加上美国区账号一直很稳定，因此强烈建议使用美国区账号。正常情况下IAP不需要进行信用卡绑定和其他信息填写，如果你遇到了这种情况，可以试试删除这个测试账号再新建一个其他地区的。</li>
<li>您是否有新建账户进行测试？可能的话，可以使用新建测试账户试试看，因为某些特定情况下测试账户会被Apple锁定。</li>
<li>您的应用是否是被拒状态（Rejected）或自己拒绝（Developer Rejected）了？被拒绝状态的应用的话对应还未通过的内购项目也会一起被拒，因此您需要重新将IAP项目设为Cleared for Sale。</li>
<li>您的应用是否处于等待开发者发布（Pending Developer Release）状态？等待发布状态的IAP是无法测试的。</li>
<li>您的内购项目是否是最近才新建的，或者进行了更改？内购项目需要一段时间才能反应到所有服务器上，这个过程一般是一两小时，也可能再长一些达到若干小时。</li>
<li>您在iTC中Contracts, Tax, and Banking Information项目中是否有还没有设置或者过期了的项目？不完整的财务信息无法进行内购测试。</li>
<li>您是在越狱设备上进行内购测试么？越狱设备不能用于正常内购，您需要重装或者寻找一台没有越狱的设备。</li>
<li>您是否能正常连接到Apple的服务器，你可以访问<a href="https://devforums.apple.com/community/ios/connected/purchase">Apple开发者论坛关于IAP的板块</a>，如果苹果服务器正down掉，那里应该有热烈的讨论。</li>
</ul>


<hr />

<p>如果您正在寻找一份手把手教你实现IAP的教程的话，这篇文章不是您的菜。关于IAP的实现和步骤，可以参考下面的教程：</p>

<ul>
<li>苹果的<a href="https://developer.apple.com/library/ios/documentation/NetworkingInternet/Conceptual/StoreKitGuide/Introduction.html">官方IAP指南</a>和相应的<a href="https://developer.apple.com/library/mac/technotes/tn2259/_index.html">Technical Note</a></li>
<li>Ray Wenderlich的<a href="http://www.raywenderlich.com/23266/in-app-purchases-in-ios-6-tutorial-consumables-and-receipt-validation">iOS6 IAP教程</a></li>
<li>一篇图文并茂的<a href="http://blog.csdn.net/xiaominghimi/article/details/6937097">中文教程</a></li>
<li>直接使用大神们封好的Store有关的库，比如<a href="https://github.com/mattt/CargoBay">mattt/CargoBay</a>，<a href="https://github.com/robotmedia/RMStore">robotmedia/RMStore</a>或者<a href="https://github.com/MugunthKumar/MKStoreKit">MugunthKumar/MKStoreKit</a>。推荐前两个，因为MKStoreKit有一些恼人的小bug。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[WWDC 2013 Session笔记 - iOS7中的ViewController切换]]></title>
    <link href="http://onevcat.com/2013/10/vc-transition-in-ios7/"/>
    <updated>2013-10-11T15:36:00+09:00</updated>
    <id>http://onevcat.com/2013/10/vc-transition-in-ios7</id>
    <content type="html"><![CDATA[<p><img src="http://img.onevcat.com/2013/ios-transition-banner.jpg" alt="iOS7中的ViewController切换" /></p>

<p>这是我的WWDC2013系列笔记中的一篇，完整的笔记列表请参看<a href="http://onevcat.com/2013/06/developer-should-know-about-ios7/">这篇总览</a>。本文仅作为个人记录使用，也欢迎在<a href="http://creativecommons.org/licenses/by-nc/3.0/deed.zh">许可协议</a>范围内转载或使用，但是还烦请保留原文链接，谢谢您的理解合作。如果您觉得本站对您能有帮助，您可以使用<a href="http://onevcat.com/atom.xml">RSS</a>或<a href="http://eepurl.com/wNSkj">邮件</a>方式订阅本站，这样您将能在第一时间获取本站信息。</p>

<p>本文涉及到的WWDC2013 Session有</p>

<ul>
<li>Session 201 Building User Interfaces for iOS 7</li>
<li>Session 218 Custom Transitions Using View Controllers</li>
<li>Session 226 Implementing Engaging UI on iOS</li>
</ul>


<p>毫无疑问，ViewController（在本文中简写为VC）是使用MVC构建Cocoa或者CocoaTouch程序时最重要的一个类，我们的日常工作中一般来说最花费时间和精力的也是在为VC部分编写代码。苹果产品是注重用户体验的，而对细节进行琢磨也是苹果对于开发者一直以来的要求和希望。在用户体验中，VC之间的关系，比如不同VC之间迁移和转换动画效果一直是一个值得不断推敲的重点。在iOS7中，苹果给出了一套完整的VC制作之间迁移效果的方案，可以说是为现在这部分各种不同实现方案指出了一条推荐的统一道路。</p>

<h3>iOS 7 SDK之前的VC切换解决方案</h3>

<p>在深入iOS 7的VC切换效果的新API实现之前，先让我们回顾下现在的一般做法吧。这可以帮助理解为什么iOS7要对VC切换给出新的解决方案，如果您对iOS 5中引入的VC容器比较熟悉的话，可以跳过这节。</p>

<!--more-->


<p>在iOS5和iOS6中，除了标准的Push，Tab和PresentModal之外，一般是使用ChildViewController的方式来完成VC之间切换的过渡效果。ChildViewController和自定义的Controller容器是iOS 5 SDK中加入的，可以用来生成自定义的VC容器，简单来说典型的一种用法类似这样：</p>

<p>```objc
//ContainerVC.m</p>

<p>[self addChildViewController:toVC];
[fromVC willMoveToParentViewController:nil];
[self.view addSubview:toVC.view];</p>

<p>__weak id weakSelf = self;
[self transitionFromViewController:fromVC</p>

<pre><code>              toViewController:toVC duration:0.3
                       options:UIViewAnimationOptionTransitionCrossDissolve
                    animations:^{}
                    completion:^(BOOL finished) {
[fromVC.view removeFromSuperView];
[fromVC removeFromParentViewController];
[toVC didMoveToParentViewController:weakSelf];
</code></pre>

<p>}];
```</p>

<p>在自己对view进行管理的同时，可以使用transitionFromViewController:toViewController:...的Animation block中可以实现一些简单的切换效果。去年年初我写的<a href="http://onevcat.com/2012/02/uiviewcontroller/">UIViewController的误用</a>一文中曾经指出类似<code>[viewController.view addSubview:someOtherViewController.view];</code>这样的代码的存在，一般就是误用VC。这个结论适用于非Controller容器，对于自定义的Controller容器来说，向当前view上添加其他VC的view是正确的做法（当然不能忘了也将VC本身通过<code>addChildViewController:</code>方法添加到容器中）。</p>

<p>VC容器的主要目的是解决将不同VC添加到同一个屏幕上的需求，以及可以提供一些简单的自定义切换效果。使用VC容器可以使view的关系正确，使添加的VC能够正确接收到例如屏幕旋转，viewDidLoad:等VC事件，进而进行正确相应。VC容器确实可以解决一部分问题，但是也应该看到，对于自定义切换效果来说，这样的解决还有很多不足。首先是代码高度耦合，VC切换部分的代码直接写在container中，难以分离重用；其次能够提供的切换效果比较有限，只能使用UIView动画来切换，管理起来也略显麻烦。iOS 7提供了一套新的自定义VC切换，就是针对这两个问题的。</p>

<h3>iOS 7 自定义ViewController动画切换</h3>

<h4>自定义动画切换的相关的主要API</h4>

<p>在深入之前，我们先来看看新SDK中有关这部分内容的相关接口以及它们的关系和典型用法。这几个接口和类的名字都比较相似，但是还是能比较好的描述出各自的职能的，一开始的话可能比较迷惑，但是当自己动手实现一两个例子之后，它们之间的关系就会逐渐明晰起来。（相关的内容都定义在UIKit的<a href="https://gist.github.com/onevcat/6944809">UIViewControllerTransitioning.h</a>中了）</p>

<h4>@protocol <a href="https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIViewControllerContextTransitioning_protocol/Reference/Reference.html">UIViewControllerContextTransitioning</a></h4>

<p>这个接口用来提供切换上下文给开发者使用，包含了从哪个VC到哪个VC等各类信息，一般不需要开发者自己实现。具体来说，iOS7的自定义切换目的之一就是切换相关代码解耦，在进行VC切换时，做切换效果实现的时候必须要需要切换前后VC的一些信息，<strong>系统在新加入的API的比较的地方都会提供一个实现了该接口的对象</strong>，以供我们使用。</p>

<p><strong>对于切换的动画实现来说</strong>（这里先介绍简单的动画，在后面我会再引入手势驱动的动画），这个接口中最重要的方法有：</p>

<ul>
<li>-(UIView *)containerView; VC切换所发生的view容器，开发者应该将切出的view移除，将切入的view加入到该view容器中。</li>
<li>-(UIViewController <em>)viewControllerForKey:(NSString </em>)key; 提供一个key，返回对应的VC。现在的SDK中key的选择只有UITransitionContextFromViewControllerKey和UITransitionContextToViewControllerKey两种，分别表示将要切出和切入的VC。</li>
<li>-(CGRect)initialFrameForViewController:(UIViewController *)vc; 某个VC的初始位置，可以用来做动画的计算。</li>
<li>-(CGRect)finalFrameForViewController:(UIViewController *)vc; 与上面的方法对应，得到切换结束时某个VC应在的frame。</li>
<li>-(void)completeTransition:(BOOL)didComplete; 向这个context报告切换已经完成。</li>
</ul>


<h4>@protocol <a href="https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIViewControllerAnimatedTransitioning_Protocol/Reference/Reference.html">UIViewControllerAnimatedTransitioning</a></h4>

<p>这个接口负责切换的具体内容，也即“切换中应该发生什么”。开发者在做自定义切换效果时大部分代码会是用来实现这个接口。它只有两个方法需要我们实现：</p>

<ul>
<li><p>-(NSTimeInterval)transitionDuration:(id &lt; UIViewControllerContextTransitioning >)transitionContext; 系统给出一个切换上下文，我们根据上下文环境返回这个切换所需要的花费时间（一般就返回动画的时间就好了，SDK会用这个时间来在百分比驱动的切换中进行帧的计算，后面再详细展开）。</p></li>
<li><p>-(void)animateTransition:(id &lt; UIViewControllerContextTransitioning >)transitionContext; 在进行切换的时候将调用该方法，我们对于切换时的UIView的设置和动画都在这个方法中完成。</p></li>
</ul>


<h4>@protocol <a href="https://developer.apple.com/library/ios/documentation/uikit/reference/UIViewControllerTransitioningDelegate_protocol/Reference/Reference.html">UIViewControllerTransitioningDelegate</a></h4>

<p>这个接口的作用比较简单单一，在需要VC切换的时候系统会像实现了这个接口的对象询问是否需要使用自定义的切换效果。这个接口共有四个类似的方法：</p>

<ul>
<li><p>-(id&lt; UIViewControllerAnimatedTransitioning >)animationControllerForPresentedController:(UIViewController <em>)presented presentingController:(UIViewController </em>)presenting sourceController:(UIViewController *)source;</p></li>
<li><p>-(id&lt; UIViewControllerAnimatedTransitioning >)animationControllerForDismissedController:(UIViewController *)dismissed;</p></li>
<li><p>-(id&lt; UIViewControllerInteractiveTransitioning >)interactionControllerForPresentation:(id &lt; UIViewControllerAnimatedTransitioning >)animator;</p></li>
<li><p>-(id&lt; UIViewControllerInteractiveTransitioning >)interactionControllerForDismissal:(id &lt; UIViewControllerAnimatedTransitioning >)animator;</p></li>
</ul>


<p>前两个方法是针对动画切换的，我们需要分别在呈现VC和解散VC时，给出一个实现了UIViewControllerAnimatedTransitioning接口的对象（其中包含切换时长和如何切换）。后两个方法涉及交互式切换，之后再说。</p>

<h3>Demo</h3>

<p>还是那句话，一百行的讲解不如一个简单的小Demo，于是..it's demo time～ 整个demo的代码我放到了github的<a href="https://github.com/onevcat/VCTransitionDemo">这个页面</a>上，有需要的朋友可以参照着看这篇文章。</p>

<p>我们打算做一个简单的自定义的modalViewController的切换效果。普通的present modal VC的效果大家都已经很熟悉了，这次我们先实现一个自定义的类似的modal present的效果，与普通效果不同的是，我们希望modalVC出现的时候不要那么乏味的就简单从底部出现，而是带有一个弹性效果（这里虽然是弹性，但是仅指使用UIView的模拟动画，而不设计iOS 7的另一个重要特性UIKit Dynamics。用UIKit Dynamics当然也许可以实现更逼真华丽的效果，但是已经超出本文的主题范畴了，因此不在这里展开了。关于UIKit Dynamics，可以参看我之前关于这个主题的<a href="http://onevcat.com/2013/06/uikit-dynamics-started/">一篇介绍</a>）。我们首先实现简单的ModalVC弹出吧..这段非常基础，就交待了一下背景，非初级人士请跳过代码段..</p>

<p>先定义一个ModalVC，以及相应的protocal和delegate方法：</p>

<p>```objc
//ModalViewController.h</p>

<p>@class ModalViewController;
@protocol ModalViewControllerDelegate <NSObject></p>

<p>-(void) modalViewControllerDidClickedDismissButton:(ModalViewController *)viewController;</p>

<p>@end</p>

<p>@interface ModalViewController : UIViewController
@property (nonatomic, weak) id<ModalViewControllerDelegate> delegate;
@end</p>

<p>//ModalViewController.m
- (void)viewDidLoad
{</p>

<pre><code>[super viewDidLoad];
// Do any additional setup after loading the view.
self.view.backgroundColor = [UIColor lightGrayColor];

UIButton *button = [UIButton buttonWithType:UIButtonTypeRoundedRect];
button.frame = CGRectMake(80.0, 210.0, 160.0, 40.0);
[button setTitle:@"Dismiss me" forState:UIControlStateNormal];
[button addTarget:self action:@selector(buttonClicked:) forControlEvents:UIControlEventTouchUpInside];
[self.view addSubview:button];
</code></pre>

<p>}</p>

<p>-(void) buttonClicked:(id)sender
{</p>

<pre><code>if (self.delegate &amp;&amp; [self.delegate respondsToSelector:@selector(modalViewControllerDidClickedDismissButton:)]) {
    [self.delegate modalViewControllerDidClickedDismissButton:self];
}
</code></pre>

<p>}</p>

<p>```</p>

<p>这个是很标准的modalViewController的实现方式了。需要多嘴一句的是，在实际使用中有的同学喜欢在-buttonClicked:中直接给self发送dismissViewController的相关方法。在现在的SDK中，如果当前的VC是被显示的话，这个消息会被直接转发到显示它的VC去。但是这并不是一个好的实现，违反了程序设计的哲学，也很容易掉到坑里，具体案例可以参看<a href="http://onevcat.com/2011/11/objective-c%E4%B8%AD%E7%9A%84block/#comment-1052782406">这篇文章的评论</a>。</p>

<p>所以我们用标准的方式来呈现和解散这个VC：</p>

<p>```objc
//MainViewController.m</p>

<ul>
<li>(void)viewDidLoad
{
  [super viewDidLoad];
  // Do any additional setup after loading the view.
  UIButton *button = [UIButton buttonWithType:UIButtonTypeRoundedRect];
  button.frame = CGRectMake(80.0, 210.0, 160.0, 40.0);
  [button setTitle:@"Click me" forState:UIControlStateNormal];
  [button addTarget:self action:@selector(buttonClicked:) forControlEvents:UIControlEventTouchUpInside];
  [self.view addSubview:button];
}</li>
</ul>


<p>-(void) buttonClicked:(id)sender
{</p>

<pre><code>ModalViewController *mvc =  [[ModalViewController alloc] init];
mvc.delegate = self;
[self presentViewController:mvc animated:YES completion:nil];
</code></pre>

<p>}</p>

<p>-(void)modalViewControllerDidClickedDismissButton:(ModalViewController *)viewController
{</p>

<pre><code>[self dismissViewControllerAnimated:YES completion:nil];
</code></pre>

<p>}
```</p>

<p>测试一下，没问题，然后我们可以开始实现自定义的切换效果了。首先我们需要一个实现了UIViewControllerAnimatedTransitioning的对象..嗯，新建一个类来实现吧，比如BouncePresentAnimation：</p>

<p>```objc
//BouncePresentAnimation.h
@interface BouncePresentAnimation : NSObject<UIViewControllerAnimatedTransitioning></p>

<p>@end</p>

<p>//BouncePresentAnimation.m
- (NSTimeInterval)transitionDuration:(id <UIViewControllerContextTransitioning>)transitionContext
{</p>

<pre><code>return 0.8f;
</code></pre>

<p>}</p>

<ul>
<li><p>(void)animateTransition:(id <UIViewControllerContextTransitioning>)transitionContext
{
  // 1. Get controllers from transition context
  UIViewController *toVC = [transitionContext viewControllerForKey:UITransitionContextToViewControllerKey];</p>

<p>  // 2. Set init frame for toVC
  CGRect screenBounds = [[UIScreen mainScreen] bounds];
  CGRect finalFrame = [transitionContext finalFrameForViewController:toVC];
  toVC.view.frame = CGRectOffset(finalFrame, 0, screenBounds.size.height);</p>

<p>  // 3. Add toVC's view to containerView
  UIView *containerView = [transitionContext containerView];
  [containerView addSubview:toVC.view];</p>

<p>  // 4. Do animate now
  NSTimeInterval duration = [self transitionDuration:transitionContext];
  [UIView animateWithDuration:duration</p>

<pre><code>                    delay:0.0
   usingSpringWithDamping:0.6
    initialSpringVelocity:0.0
                  options:UIViewAnimationOptionCurveLinear
               animations:^{
                   toVC.view.frame = finalFrame;
               } completion:^(BOOL finished) {
                   // 5. Tell context that we completed.
                   [transitionContext completeTransition:YES];
               }];
</code></pre>

<p>}
```</p></li>
</ul>


<p>解释一下这个实现：</p>

<ol>
<li>我们首先需要得到参与切换的两个ViewController的信息，使用context的方法拿到它们的参照；</li>
<li>对于要呈现的VC，我们希望它从屏幕下方出现，因此将初始位置设置到屏幕下边缘；</li>
<li>将view添加到containerView中；</li>
<li>开始动画。这里的动画时间长度和切换时间长度一致，都为0.8s。usingSpringWithDamping的UIView动画API是iOS7新加入的，描述了一个模拟弹簧动作的动画曲线，我们在这里只做使用，更多信息可以参看<a href="https://developer.apple.com/library/ios/documentation/uikit/reference/uiview_class/UIView/UIView.html#//apple_ref/occ/clm/UIView/animateWithDuration:delay:usingSpringWithDamping:initialSpringVelocity:options:animations:completion:">相关文档</a>；（顺便多说一句，iOS7中对UIView动画添加了一个很方便的Category，UIViewKeyframeAnimations。使用其中方法可以为UIView动画添加关键帧动画）</li>
<li>在动画结束后我们必须向context报告VC切换完成，是否成功（在这里的动画切换中，没有失败的可能性，因此直接pass一个YES过去）。系统在接收到这个消息后，将对VC状态进行维护。</li>
</ol>


<p>接下来我们实现一个UIViewControllerTransitioningDelegate，应该就能让它工作了。简单来说，一个比较好的地方是直接在MainViewController中实现这个接口。在MainVC中声明实现这个接口，然后加入或变更为如下代码：</p>

<p>```objc
@interface MainViewController ()&lt;ModalViewControllerDelegate, UIViewControllerTransitioningDelegate>
@property (nonatomic, strong) BouncePresentAnimation *presentAnimation;
@end</p>

<p>@implementation MainViewController</p>

<ul>
<li>(id)initWithNibName:(NSString <em>)nibNameOrNil bundle:(NSBundle </em>)nibBundleOrNil
{
  self = [super initWithNibName:nibNameOrNil bundle:nibBundleOrNil];
  if (self) {

<pre><code>  // Custom initialization
  _presentAnimation = [BouncePresentAnimation new];
</code></pre>

<p>  }
  return self;
}</p></li>
</ul>


<p>-(void) buttonClicked:(id)sender
{</p>

<pre><code>//...
mvc.transitioningDelegate = self;
//...
</code></pre>

<p>}</p>

<ul>
<li>(id <UIViewControllerAnimatedTransitioning>)animationControllerForPresentedController:(UIViewController <em>)presented presentingController:(UIViewController </em>)presenting sourceController:(UIViewController *)source
{
  return self.presentAnimation;
}
```</li>
</ul>


<p>Believe or not, we have done. 跑一下，应该可以得到如下效果：</p>

<p><img src="http://img.onevcat.com/2013/custom-vc-transition-1.gif" alt="BouncePresentAnimation的实际效果" /></p>

<h3>手势驱动的百分比切换</h3>

<p>iOS7引入了一种手势驱动的VC切换的方式（交互式切换）。如果你使用系统的各种应用，在navViewController里push了一个新的VC的话，返回时并不需要点击左上的Back按钮，而是通过从屏幕左侧划向右侧即可完成返回操作。而在这个操作过程中，我们甚至可以撤销我们的手势，以取消这次VC转移。在新版的Safari中，我们甚至可以用相同的手势来完成网页的后退功能（所以很大程度上来说屏幕底部的工具栏成为了摆设）。如果您还不知道或者没太留意过这个改动，不妨现在就拿手边的iOS7这辈试试看，手机浏览的朋友记得切回来哦 :)</p>

<p>我们这就动手在自己的VC切换中实现这个功能吧，首先我们需要在刚才的知识基础上补充一些东西：</p>

<p>首先是UIViewControllerContextTransitioning，刚才提到这个是系统提供的VC切换上下文，如果您深入看了它的头文件描述的话，应该会发现其中有三个关于InteractiveTransition的方法，正是用来处理交互式切换的。但是在初级的实际使用中我们其实可以不太理会它们，而是使用iOS 7 SDK已经给我们准备好的一个现成转为交互式切换而新加的类：UIPercentDrivenInteractiveTransition。</p>

<h4><a href="https://developer.apple.com/library/ios/documentation/uikit/reference/UIPercentDrivenInteractiveTransition_class/Reference/Reference.html">UIPercentDrivenInteractiveTransition</a>是什么</h4>

<p>这是一个实现了UIViewControllerInteractiveTransitioning接口的类，为我们预先实现和提供了一系列便利的方法，可以用一个百分比来控制交互式切换的过程。一般来说我们更多地会使用某些手势来完成交互式的转移（当然用的高级的话用其他的输入..比如声音，iBeacon距离或者甚至面部微笑来做输入驱动也无不可，毕竟想象无极限嘛..），这样使用这个类（一般是其子类）的话就会非常方便。我们在手势识别中只需要告诉这个类的实例当前的状态百分比如何，系统便根据这个百分比和我们之前设定的迁移方式为我们计算当前应该的UI渲染，十分方便。具体的几个重要方法：</p>

<ul>
<li>-(void)updateInteractiveTransition:(CGFloat)percentComplete 更新百分比，一般通过手势识别的长度之类的来计算一个值，然后进行更新。之后的例子里会看到详细的用法</li>
<li>-(void)cancelInteractiveTransition 报告交互取消，返回切换前的状态</li>
<li>–(void)finishInteractiveTransition 报告交互完成，更新到切换后的状态</li>
</ul>


<h4>@protocol <a href="https://developer.apple.com/library/ios/documentation/uikit/reference/UIViewControllerInteractiveTransitioning_protocol/Reference/Reference.html">UIViewControllerInteractiveTransitioning</a></h4>

<p>就如上面提到的，UIPercentDrivenInteractiveTransition只是实现了这个接口的一个类。为了实现交互式切换的功能，我们需要实现这个接口。因为大部分时候我们其实不需要自己来实现这个接口，因此在这篇入门中就不展开说明了，有兴趣的童鞋可以自行钻研。</p>

<p>还有就是上面提到过的UIViewControllerTransitioningDelegate中的返回Interactive实现对象的方法，我们同样会在交互式切换中用到它们。</p>

<h3>继续Demo</h3>

<p>Demo time again。在刚才demo的基础上，这次我们用一个向上划动的手势来吧之前呈现的ModalViewController给dismiss掉～当然是交互式的切换，可以半途取消的那种。</p>

<p>首先新建一个类，继承自UIPercentDrivenInteractiveTransition，这样我们可以省不少事儿。</p>

<p>```objc
//SwipeUpInteractiveTransition.h
@interface SwipeUpInteractiveTransition : UIPercentDrivenInteractiveTransition</p>

<p>@property (nonatomic, assign) BOOL interacting;</p>

<ul>
<li>(void)wireToViewController:(UIViewController*)viewController;</li>
</ul>


<p>@end</p>

<p>//SwipeUpInteractiveTransition.m
@interface SwipeUpInteractiveTransition()
@property (nonatomic, assign) BOOL shouldComplete;
@property (nonatomic, strong) UIViewController *presentingVC;
@end</p>

<p>@implementation SwipeUpInteractiveTransition
-(void)wireToViewController:(UIViewController *)viewController
{</p>

<pre><code>self.presentingVC = viewController;
[self prepareGestureRecognizerInView:viewController.view];
</code></pre>

<p>}</p>

<ul>
<li>(void)prepareGestureRecognizerInView:(UIView<em>)view {
  UIPanGestureRecognizer </em>gesture = [[UIPanGestureRecognizer alloc] initWithTarget:self action:@selector(handleGesture:)];
  [view addGestureRecognizer:gesture];
}</li>
</ul>


<p>-(CGFloat)completionSpeed
{</p>

<pre><code>return 1 - self.percentComplete;
</code></pre>

<p>}</p>

<ul>
<li>(void)handleGesture:(UIPanGestureRecognizer *)gestureRecognizer {
  CGPoint translation = [gestureRecognizer translationInView:gestureRecognizer.view.superview];
  switch (gestureRecognizer.state) {

<pre><code>  case UIGestureRecognizerStateBegan:
      // 1. Mark the interacting flag. Used when supplying it in delegate.
      self.interacting = YES;
      [self.presentingVC dismissViewControllerAnimated:YES completion:nil];
      break;
  case UIGestureRecognizerStateChanged: {
      // 2. Calculate the percentage of guesture
      CGFloat fraction = translation.y / 400.0;
      //Limit it between 0 and 1
      fraction = fminf(fmaxf(fraction, 0.0), 1.0);
      self.shouldComplete = (fraction &gt; 0.5);

      [self updateInteractiveTransition:fraction];
      break;
  }
  case UIGestureRecognizerStateEnded:
  case UIGestureRecognizerStateCancelled: {
      // 3. Gesture over. Check if the transition should happen or not
      self.interacting = NO;
      if (!self.shouldComplete || gestureRecognizer.state == UIGestureRecognizerStateCancelled) {
          [self cancelInteractiveTransition];
      } else {
          [self finishInteractiveTransition];
      }
      break;
  }
  default:
      break;
</code></pre>

<p>  }
}</p></li>
</ul>


<p>@end</p>

<p>```</p>

<p>有点长，但是做的事情还是比较简单的。</p>

<ol>
<li>我们设定了一个BOOL变量来表示是否处于切换过程中。这个布尔值将在监测到手势开始时被设置，我们之后会在调用返回这个InteractiveTransition的时候用到。</li>
<li>计算百分比，我们设定了向下划动400像素或以上为100%，每次手势状态变化时根据当前手势位置计算新的百分比，结果被限制在0～1之间。然后更新InteractiveTransition的百分数。</li>
<li>手势结束时，把正在切换的标设置回NO，然后进行判断。在2中我们设定了手势距离超过设定一半就认为应该结束手势，否则就应该返回原来状态。在这里使用其进行判断，已决定这次transition是否应该结束。</li>
</ol>


<p>接下来我们需要添加一个向下移动的UIView动画，用来表现dismiss。这个十分简单，和BouncePresentAnimation很相似，写一个NormalDismissAnimation的实现了UIViewControllerAnimatedTransitioning接口的类就可以了，本文里略过不写了，感兴趣的童鞋可以自行查看源码。</p>

<p>最后调整MainViewController的内容，主要修改点有三个地方：</p>

<p>```objc
//MainViewController.m
@interface MainViewController ()&lt;ModalViewControllerDelegate,UIViewControllerTransitioningDelegate>
//...
// 1. Add dismiss animation and transition controller
@property (nonatomic, strong) NormalDismissAnimation <em>dismissAnimation;
@property (nonatomic, strong) SwipeUpInteractiveTransition </em>transitionController;
@end</p>

<p>@implementation MainViewController</p>

<ul>
<li>(id)initWithNibName:(NSString <em>)nibNameOrNil bundle:(NSBundle </em>)nibBundleOrNil
{
  //...

<pre><code>  _dismissAnimation = [NormalDismissAnimation new];
  _transitionController = [SwipeUpInteractiveTransition new];
</code></pre>

<p>  //...
}</p></li>
</ul>


<p>-(void) buttonClicked:(id)sender
{</p>

<pre><code>//...
// 2. Bind current VC to transition controller.
[self.transitionController wireToViewController:mvc];
//...
</code></pre>

<p>}</p>

<p>// 3. Implement the methods to supply proper objects.
-(id<UIViewControllerAnimatedTransitioning>)animationControllerForDismissedController:(UIViewController *)dismissed
{</p>

<pre><code>return self.dismissAnimation;
</code></pre>

<p>}</p>

<p>-(id<UIViewControllerInteractiveTransitioning>)interactionControllerForDismissal:(id<UIViewControllerAnimatedTransitioning>)animator {</p>

<pre><code>return self.transitionController.interacting ? self.transitionController : nil;
</code></pre>

<p>}</p>

<p>```</p>

<ol>
<li>在其中添加dismiss时候的动画和交互切换Controller</li>
<li>在初始化modalVC的时候为交互切换的Controller绑定VC</li>
<li>为UIViewControllerTransitioningDelegate实现dismiss时候的委托方法，包括返回对应的动画以及交互切换Controller</li>
</ol>


<p>完成了，如果向下划动时，效果如下：</p>

<p><img src="http://img.onevcat.com/2013/custom-vc-transition-2.gif" alt="交互驱动的VC转移" /></p>

<h3>关于iOS 7中自定义VC切换的一些总结</h3>

<p>demo中只展示了对于modalVC的present和dismiss的自定义切换效果，当然对与Navigation Controller的Push和Pop切换也是有相应的一套方法的。实现起来和dismiss十分类似，只不过对应UIViewControllerTransitioningDelegate的询问动画和交互的方法换到了UINavigationControllerDelegate中（为了区别push或者pop，看一下这个接口应该能马上知道）。另外一个很好的福利是，对于标准的navController的Pop操作，苹果已经替我们实现了手势驱动返回，我们不用再费心每个去实现一遍了，cheers～</p>

<p>另外，可能你会觉得使用VC容器其提供的transition动画方法来进行VC切换就已经够好够方便了，为什么iOS7中还要引入一套自定义的方式呢。其实从根本来说它们所承担的是两类完全不同的任务：自定义VC容器可以提供自己定义的VC结构，并保证系统的各类方法和通知能够准确传递到合适的VC，它提供的transition方法虽然可以实现一些简单的UIView动画，但是难以重用，可以说是和containerVC完全耦合在一起的；而自定义切换并不改变VC的组织结构，只是负责提供view的效果，因为VC切换将动画部分、动画驱动部分都使用接口的方式给出，因此重用性非常优秀。在绝大多数情况下，精心编写的一套UIView动画是可以轻易地用在不同的VC中，甚至是不同的项目中的。</p>

<p>需要特别一提的是，Github上的<a href="https://github.com/ColinEberhardt/VCTransitionsLibrary">ColinEberhardt的VCTransitionsLibrary</a>已经为我们提供了一系列的VC自定义切换动画效果，正是得益于iOS7中这一块的良好设计（虽然这几个接口的命名比较相似，在弄明白之前会有些confusing），因此这些效果使用起来非常方便，相信一般项目中是足够使用的了。而其他更复杂或者炫目的效果，亦可在其基础上进行扩展改进得到。可以说随着越来越多的应用转向iOS7，自定义VC切换将成为新的用户交互实现的基础和重要部分，对于今后会在其基础上会衍生出怎样让人眼前一亮的交互设计，不妨让我们拭目以待（或者自己努力去创造）。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[WWDC 2013 Session笔记 - iOS7中弹簧式列表的制作]]></title>
    <link href="http://onevcat.com/2013/09/spring-list-like-ios7-message/"/>
    <updated>2013-09-01T23:03:00+09:00</updated>
    <id>http://onevcat.com/2013/09/spring-list-like-ios7-message</id>
    <content type="html"><![CDATA[<p>这是我的WWDC2013系列笔记中的一篇，完整的笔记列表请参看<a href="http://onevcat.com/2013/06/developer-should-know-about-ios7/">这篇总览</a>。本文仅作为个人记录使用，也欢迎在<a href="http://creativecommons.org/licenses/by-nc/3.0/deed.zh">许可协议</a>范围内转载或使用，但是还烦请保留原文链接，谢谢您的理解合作。如果您觉得本站对您能有帮助，您可以使用<a href="http://onevcat.com/atom.xml">RSS</a>或<a href="http://eepurl.com/wNSkj">邮件</a>方式订阅本站，这样您将能在第一时间获取本站信息。</p>

<p>本文涉及到的WWDC2013 Session有</p>

<ul>
<li>Session 206 Getting Started with UIKit Dynamics</li>
<li>Session 217 Exploring Scroll Views in iOS7</li>
</ul>


<p>UIScrollView可以说是UIKit中最重要的类之一了，包括UITableView和UICollectionView等重要的数据容器类都是UIScrollView的子类。在历年的WWDC上，UIScrollView和相关的API都有专门的主题进行介绍，也可以看出这个类的使用和变化之快。今年也不例外，因为iOS7完全重新定义了UI，这使得UIScrollView里原来不太会使用的一些用法和实现的效果在新的系统中得到了很好的表现。另外，由于引入了UIKit Dynamics，我们还可以结合ScrollView做出一些以前不太可能或者需要花费很大力气来实现的效果，包括带有重力的swipe或者是类似新的信息app中的带有弹簧效果聊天泡泡等。如果您还不太了解iOS7中信息app的效果，这里有一张gif图可以帮您大概了解一下：</p>

<p><img src="http://img.onevcat.com/2013/ios7-message-app-spring.gif" alt="iOS7中信息app的弹簧效果" /></p>

<p>这次笔记的内容主要就是实现一个这样的效果。为了避免重复造轮子，我对这个效果进行了一些简单的封装，并连同这篇笔记的demo一起扔在了Github上，有需要的童鞋可以<a href="https://github.com/onevcat/VVSpringCollectionViewFlowLayout">到这里</a>自取。</p>

<p>iOS7的SDK中Apple最大的野心其实是想用SpriteKit来结束iOS平台游戏开发（至少是2D游戏开发）的乱战，统一游戏开发的方式并建立良性社区。而UIKit Dynamics，个人猜测Apple在花费力气为SpriteKit开发了物理引擎的同时，发现在UIKit中也可以使用，并能得到不错的效果，于是顺便革新了一下设计理念，在UI设计中引入了不少物理的概念。在iOS系统中，最为典型的应用是锁屏界面打开相机时中途放弃后的重力下坠+反弹的效果，另一个就是信息应用中的加入弹性的消息列表了。弹性列表在我自己上手试过以后觉得表现形式确实很生动，可以消除原来列表那种冷冰冰的感觉，是有可能在今后的设计中被大量使用的，因此决定学上一学。</p>

<p>首先我们需要知道要如何实现这样一种效果，我们会用到哪些东西。毋庸置疑，如果不使用UIKit Dynamics的话，自己从头开始来完成会是一件非常费力的事情，你可能需要实现一套位置计算和物理模拟来使效果看起来真实滑润。而UIKit Dynamics中已经给我们提供了现成的弹簧效果，可以用<code>UIAttachmentBehavior</code>进行实现。另外，在说到弹性效果的时候，我们其实是在描述一个列表中的各个cell之间的关系，对于传统的UITableView来说，描述UITableViewCell之间的关系是比较复杂的（因为Apple已经把绝大多数工作做了，包括计算cell位置和位移等。使用越简单，定制就会越麻烦在绝大多数情况下都是真理）。而UICollectionView则通过layout来完成cell之间位置关系的描述，给了开发者较大的空间来实现布局。另外，UIKit Dynamics为UICollectionView做了很多方便的Catagory，可以很容易地“指导”UICollectionView利用加入物理特性计算后的结果，在实现弹性效果的时候，UICollectionView是我们不二的选择。</p>

<p>如果您在阅读这篇笔记的时候遇到困难的话，建议您可以看看我之前的一些笔记，包括今年的<a href="http://onevcat.com/2013/06/uikit-dynamics-started/">UIKit Dynamics的介绍</a>和去年的<a href="http://onevcat.com/2012/06/introducing-collection-views/">UICollectionView介绍</a>。</p>

<!--more-->


<p>话不多说，我们开工。首先准备一个UICollectionViewFlowLayout的子类（在这里叫做<code>VVSpringCollectionViewFlowLayout</code>），然后在ViewController中用这个layout实现一个简单的collectionView：</p>

<p>```objc
//ViewController.m</p>

<p>@interface ViewController ()&lt;UICollectionViewDataSource, UICollectionViewDelegate>
@property (nonatomic, strong) VVSpringCollectionViewFlowLayout *layout;
@end</p>

<p>static NSString *reuseId = @"collectionViewCellReuseId";</p>

<p>@implementation ViewController
- (void)viewDidLoad
{</p>

<pre><code>[super viewDidLoad];
// Do any additional setup after loading the view, typically from a nib.

self.layout = [[VVSpringCollectionViewFlowLayout alloc] init];
self.layout.itemSize = CGSizeMake(self.view.frame.size.width, 44);
UICollectionView *collectionView = [[UICollectionView alloc] initWithFrame:self.view.frame collectionViewLayout:self.layout];

collectionView.backgroundColor = [UIColor clearColor];

[collectionView registerClass:[UICollectionViewCell class] forCellWithReuseIdentifier:reuseId];

collectionView.dataSource = self;
[self.view insertSubview:collectionView atIndex:0];
</code></pre>

<p>}</p>

<h1>pragma mark - UICollectionViewDataSource</h1>

<ul>
<li><p>(NSInteger)collectionView:(UICollectionView *)collectionView numberOfItemsInSection:(NSInteger)section
{
  return 50;
}</p></li>
<li><p>(UICollectionViewCell <em>)collectionView:(UICollectionView </em>)collectionView cellForItemAtIndexPath:(NSIndexPath <em>)indexPath
{
  UICollectionViewCell </em>cell = [collectionView dequeueReusableCellWithReuseIdentifier:reuseId forIndexPath:indexPath];</p>

<p>  //Just give a random color to the cell. See https://gist.github.com/kylefox/1689973
  cell.contentView.backgroundColor = [UIColor randomColor];
  return cell;
}
@end
```</p></li>
</ul>


<p>这部分没什么可以多说的，现在我们有一个标准的FlowLayout的UICollectionView了。通过使用UICollectionViewFlowLayout的子类来作为开始的layout，我们可以节省下所有的初始cell位置计算的代码，在上面代码的情况下，这个collectionView的表现和一个普通的tableView并没有太大不同。接下来我们着重来看看要如何实现弹性的layout。对于弹性效果，我们需要的是连接一个item和一个锚点间弹性连接的<code>UIAttachmentBehavior</code>，并能在滚动时设置新的锚点位置。我们在scroll的时候，只要使用UIKit Dynamics的计算结果，替代掉原来的位置更新计算（其实就是简单的scrollView的contentOffset的改变），就可以模拟出弹性的效果了。</p>

<p>首先在<code>-prepareLayout</code>中为cell添加<code>UIAttachmentBehavior</code>。</p>

<p>```objc
//VVSpringCollectionViewFlowLayout.m
@interface VVSpringCollectionViewFlowLayout()
@property (nonatomic, strong) UIDynamicAnimator *animator;
@end</p>

<p>@implementation VVSpringCollectionViewFlowLayout
//...</p>

<p>-(void)prepareLayout {</p>

<pre><code>[super prepareLayout];

if (!_animator) {
    _animator = [[UIDynamicAnimator alloc] initWithCollectionViewLayout:self];
    CGSize contentSize = [self collectionViewContentSize];
    NSArray *items = [super layoutAttributesForElementsInRect:CGRectMake(0, 0, contentSize.width, contentSize.height)];

    for (UICollectionViewLayoutAttributes *item in items) {
        UIAttachmentBehavior *spring = [[UIAttachmentBehavior alloc] initWithItem:item attachedToAnchor:item.center];

        spring.length = 0;
        spring.damping = 0.5;
        spring.frequency = 0.8;

        [_animator addBehavior:spring];
    }
}
</code></pre>

<p>}
@end
```</p>

<p>prepareLayout将在CollectionView进行排版的时候被调用。首先当然是call一下super的prepareLayout，你肯定不会想要全都要自己进行设置的。接下来，如果是第一次调用这个方法的话，先初始化一个UIDynamicAnimator实例，来负责之后的动画效果。iOS7 SDK中，UIDynamicAnimator类专门有一个针对UICollectionView的Category，以使UICollectionView能够轻易地利用UIKit Dynamics的结果。在<code>UIDynamicAnimator.h</code>中能够找到这个Category：</p>

<p>```objc
@interface UIDynamicAnimator (UICollectionViewAdditions)</p>

<p>// When you initialize a dynamic animator with this method, you should only associate collection view layout attributes with your behaviors.
// The animator will employ thecollection view layout’s content size coordinate system.
- (instancetype)initWithCollectionViewLayout:(UICollectionViewLayout*)layout;</p>

<p>// The three convenience methods returning layout attributes (if associated to behaviors in the animator) if the animator was configured with collection view layout
- (UICollectionViewLayoutAttributes<em>)layoutAttributesForCellAtIndexPath:(NSIndexPath</em>)indexPath;
- (UICollectionViewLayoutAttributes<em>)layoutAttributesForSupplementaryViewOfKind:(NSString </em>)kind atIndexPath:(NSIndexPath <em>)indexPath;
- (UICollectionViewLayoutAttributes</em>)layoutAttributesForDecorationViewOfKind:(NSString<em>)decorationViewKind atIndexPath:(NSIndexPath </em>)indexPath;</p>

<p>@end
```</p>

<p>于是通过<code>-initWithCollectionViewLayout:</code>进行初始化后，这个UIDynamicAnimator实例便和我们的layout进行了绑定，之后这个layout对应的attributes都应该由绑定的UIDynamicAnimator的实例给出。就像下面这样：</p>

<p>```objc
//VVSpringCollectionViewFlowLayout.m
@implementation VVSpringCollectionViewFlowLayout</p>

<p>//...</p>

<p>-(NSArray *)layoutAttributesForElementsInRect:(CGRect)rect {</p>

<pre><code>return [_animator itemsInRect:rect];
</code></pre>

<p>}</p>

<p>-(UICollectionViewLayoutAttributes <em>)layoutAttributesForItemAtIndexPath:(NSIndexPath </em>)indexPath {</p>

<pre><code>return [_animator layoutAttributesForCellAtIndexPath:indexPath];
</code></pre>

<p>}
@end
```</p>

<p>让我们回到<code>-prepareLayout</code>方法中，在创建了UIDynamicAnimator实例后，我们对于这个layout中的每个attributes对应的点，都创建并添加一个添加一个<code>UIAttachmentBehavior</code>（在iOS7 SDK中，UICollectionViewLayoutAttributes已经实现了UIDynamicItem接口，可以直接参与UIKit Dynamic的计算中去）。创建时我们希望collectionView的每个cell就保持在原位，因此我们设定了锚点为当前attribute本身的center。</p>

<p>接下来我们考虑滑动时的弹性效果的实现。在系统的信息app中，我们可以看到弹性效果有两个特点：</p>

<ul>
<li>随着滑动的速度增大，初始的拉伸和压缩的幅度将变大</li>
<li>随着cell距离屏幕触摸位置越远，拉伸和压缩的幅度</li>
</ul>


<p>对于考虑到这两方面的特点，我们所期望的滑动时的各cell锚点的变化应该是类似这样的：</p>

<p><img src="http://img.onevcat.com/2013/spring-list-ios7.png" alt="向上拖动时的锚点变化示意" /></p>

<p>现在我们来实现这个锚点的变化。既然都是滑动，我们是不是可以考虑在UIScrollView的<code>–scrollViewDidScroll:</code>委托方法中来设定新的Behavior锚点值呢？理论上来说当然是可以的，但是如果这样的话我们大概就不得不面临着将刚才的layout实例设置为collectionView的delegate这样一个事实。但是我们都知道layout应该做的事情是给collectionView提供必要的布局信息，而不应该负责去处理它的委托事件。处理collectionView的回调更恰当地应该由处于collectionView的controller层级的类来完成，而不应该由一个给collectionView提供数据和信息的类来响应。在<code>UICollectionViewLayout</code>中，我们有一个叫做<code>-shouldInvalidateLayoutForBoundsChange:</code>的方法，每次layout的bounds发生变化的时候，collectionView都会询问这个方法是否需要为这个新的边界和更新layout。一般情况下只要layout没有根据边界不同而发生变化的话，这个方法直接不做处理地返回NO，表示保持现在的layout即可，而每次bounds改变时这个方法都会被调用的特点正好可以满足我们更新锚点的需求，因此我们可以在这里面完成锚点的更新。</p>

<p>```objc
//VVSpringCollectionViewFlowLayout.m
@implementation VVSpringCollectionViewFlowLayout</p>

<p>//...</p>

<p>-(BOOL)shouldInvalidateLayoutForBoundsChange:(CGRect)newBounds {</p>

<pre><code>UIScrollView *scrollView = self.collectionView;
CGFloat scrollDelta = newBounds.origin.y - scrollView.bounds.origin.y;

//Get the touch point
CGPoint touchLocation = [scrollView.panGestureRecognizer locationInView:scrollView];

for (UIAttachmentBehavior *spring in _animator.behaviors) {
    CGPoint anchorPoint = spring.anchorPoint;

    CGFloat distanceFromTouch = fabsf(touchLocation.y - anchorPoint.y);
    CGFloat scrollResistance = distanceFromTouch / 500;

    UICollectionViewLayoutAttributes *item = [spring.items firstObject];
    CGPoint center = item.center;

    //In case the added value bigger than the scrollDelta, which leads an unreasonable effect
    center.y += (scrollDelta &gt; 0) ? MIN(scrollDelta, scrollDelta * scrollResistance)
                                  : MAX(scrollDelta, scrollDelta * scrollResistance);
    item.center = center;

    [_animator updateItemUsingCurrentState:item];
}
return NO;
</code></pre>

<p>}</p>

<p>@end
```</p>

<p>首先我们计算了这次scroll的距离<code>scrollDelta</code>，为了得到每个item与触摸点的之间的距离，我们当然还需要知道触摸点的坐标<code>touchLocation</code>。接下来，可以根据距离对每个锚点进行设置了：简单地计算了原来锚点与触摸点之间的距离<code>distanceFromTouch</code>，并由此计算一个系数。接下来，对于当前的item，我们获取其当前锚点位置，然后将其根据<code>scrollDelta</code>的数值和刚才计算的系数，重新设定锚点的位置。最后我们需要告诉UIDynamicAnimator我们已经完成了对冒点的更新，现在可以开始更新物理计算，并随时准备collectionView来取LayoutAttributes的数据了。</p>

<p>也许你还没有缓过神来？但是我们确实已经做完了，让我们来看看实际的效果吧：</p>

<p><img src="http://img.onevcat.com/2013/spring-collection-view-over-ios7.gif" alt="带有弹性效果的collecitonView" /></p>

<p>当然，通过调节<code>damping</code>，<code>frequency</code>和<code>scrollResistance</code>的系数等参数，可以得到弹性不同的效果，比如更多的震荡或者更大的幅度等等。</p>

<p>这个layout实现起来非常简单，我顺便封装了一下放到了Github上，大家有需要的话可以<a href="https://github.com/onevcat/VVSpringCollectionViewFlowLayout">点击这里下载</a>并直接使用。</p>
]]></content>
  </entry>
  
</feed>
